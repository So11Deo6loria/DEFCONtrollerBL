
DEFCONtrollerBL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ebc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800606c  0800606c  0001606c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060fc  080060fc  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  080060fc  080060fc  000160fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006104  08006104  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006104  08006104  00016104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006108  08006108  00016108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800610c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          000017b4  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000184c  2000184c  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d8bb  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ef1  00000000  00000000  0003d983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001870  00000000  00000000  00041878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001708  00000000  00000000  000430e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000259ad  00000000  00000000  000447f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ad77  00000000  00000000  0006a19d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e727c  00000000  00000000  00084f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016c190  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a38  00000000  00000000  0016c1e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000098 	.word	0x20000098
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006054 	.word	0x08006054

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	08006054 	.word	0x08006054

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000210:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	6039      	str	r1, [r7, #0]
 800050e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000514:	2b00      	cmp	r3, #0
 8000516:	db0a      	blt.n	800052e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	b2da      	uxtb	r2, r3
 800051c:	490c      	ldr	r1, [pc, #48]	; (8000550 <__NVIC_SetPriority+0x4c>)
 800051e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000522:	0112      	lsls	r2, r2, #4
 8000524:	b2d2      	uxtb	r2, r2
 8000526:	440b      	add	r3, r1
 8000528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800052c:	e00a      	b.n	8000544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	b2da      	uxtb	r2, r3
 8000532:	4908      	ldr	r1, [pc, #32]	; (8000554 <__NVIC_SetPriority+0x50>)
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	f003 030f 	and.w	r3, r3, #15
 800053a:	3b04      	subs	r3, #4
 800053c:	0112      	lsls	r2, r2, #4
 800053e:	b2d2      	uxtb	r2, r2
 8000540:	440b      	add	r3, r1
 8000542:	761a      	strb	r2, [r3, #24]
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	e000e100 	.word	0xe000e100
 8000554:	e000ed00 	.word	0xe000ed00

08000558 <UART_SendByte>:
  uart_handle.Init.OverSampling = UART_OVERSAMPLING_16;
  HAL_UART_Init(&uart_handle);
}

void UART_SendByte(uint8_t byte, uint32_t timeout)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	6039      	str	r1, [r7, #0]
 8000562:	71fb      	strb	r3, [r7, #7]
  uint32_t tick_start = HAL_GetTick();
 8000564:	f000 ff72 	bl	800144c <HAL_GetTick>
 8000568:	60f8      	str	r0, [r7, #12]
  while ((UART5->SR & USART_SR_TXE) == 0)
 800056a:	e00a      	b.n	8000582 <UART_SendByte+0x2a>
  {
    if (timeout > 0 && (HAL_GetTick() - tick_start) >= timeout)
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d007      	beq.n	8000582 <UART_SendByte+0x2a>
 8000572:	f000 ff6b 	bl	800144c <HAL_GetTick>
 8000576:	4602      	mov	r2, r0
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	1ad3      	subs	r3, r2, r3
 800057c:	683a      	ldr	r2, [r7, #0]
 800057e:	429a      	cmp	r2, r3
 8000580:	d906      	bls.n	8000590 <UART_SendByte+0x38>
  while ((UART5->SR & USART_SR_TXE) == 0)
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <UART_SendByte+0x54>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800058a:	2b00      	cmp	r3, #0
 800058c:	d0ee      	beq.n	800056c <UART_SendByte+0x14>
 800058e:	e000      	b.n	8000592 <UART_SendByte+0x3a>
    {
      // Timeout occurred
      break;
 8000590:	bf00      	nop
    }
  }

  if ((UART5->SR & USART_SR_TXE) != 0)
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <UART_SendByte+0x54>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800059a:	2b00      	cmp	r3, #0
 800059c:	d002      	beq.n	80005a4 <UART_SendByte+0x4c>
  {
    UART5->DR = byte;
 800059e:	4a03      	ldr	r2, [pc, #12]	; (80005ac <UART_SendByte+0x54>)
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	6053      	str	r3, [r2, #4]
  }
}
 80005a4:	bf00      	nop
 80005a6:	3710      	adds	r7, #16
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40005000 	.word	0x40005000

080005b0 <UART_ReceiveByte>:

uint8_t UART_ReceiveByte(uint8_t * byte)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  if( UART5->SR & USART_SR_RXNE )
 80005b8:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <UART_ReceiveByte+0x30>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f003 0320 	and.w	r3, r3, #32
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d006      	beq.n	80005d2 <UART_ReceiveByte+0x22>
  {
	  // Need to update this?
//	  USART1->RQR |= USART_RQR_RXFRQ;
	  *byte = (uint8_t)UART5->DR;
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <UART_ReceiveByte+0x30>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	701a      	strb	r2, [r3, #0]
	  return 1;
 80005ce:	2301      	movs	r3, #1
 80005d0:	e000      	b.n	80005d4 <UART_ReceiveByte+0x24>
  }
  return 0;
 80005d2:	2300      	movs	r3, #0
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr
 80005e0:	40005000 	.word	0x40005000

080005e4 <UART_SendData>:

void UART_SendData(const uint8_t *data, uint32_t length, uint32_t timeout)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  for (uint32_t i = 0; i < length; i++)
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
 80005f4:	e00a      	b.n	800060c <UART_SendData+0x28>
  {
    UART_SendByte(data[i], timeout);
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	4413      	add	r3, r2
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	6879      	ldr	r1, [r7, #4]
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff ffa9 	bl	8000558 <UART_SendByte>
  for (uint32_t i = 0; i < length; i++)
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	3301      	adds	r3, #1
 800060a:	617b      	str	r3, [r7, #20]
 800060c:	697a      	ldr	r2, [r7, #20]
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	429a      	cmp	r2, r3
 8000612:	d3f0      	bcc.n	80005f6 <UART_SendData+0x12>
  }
}
 8000614:	bf00      	nop
 8000616:	bf00      	nop
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <BspSystemTimeInit>:
    UART_ReceiveByte(&buffer[i]);
  }
}

void BspSystemTimeInit( void )
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  SysTick->LOAD = ( SystemCoreClock / 1000 ) - 1;
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <BspSystemTimeInit+0x38>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a0c      	ldr	r2, [pc, #48]	; (800065c <BspSystemTimeInit+0x3c>)
 800062a:	fba2 2303 	umull	r2, r3, r2, r3
 800062e:	099b      	lsrs	r3, r3, #6
 8000630:	4a0b      	ldr	r2, [pc, #44]	; (8000660 <BspSystemTimeInit+0x40>)
 8000632:	3b01      	subs	r3, #1
 8000634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority(SysTick_IRQn,0);
 8000636:	2100      	movs	r1, #0
 8000638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800063c:	f7ff ff62 	bl	8000504 <__NVIC_SetPriority>
  SysTick->VAL  = 0;
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <BspSystemTimeInit+0x40>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL = ( 1 << 2 ) | ( 1 << 1 ) | ( 1 << 0 );
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <BspSystemTimeInit+0x40>)
 8000648:	2207      	movs	r2, #7
 800064a:	601a      	str	r2, [r3, #0]
  __SystemTimer = 0;
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <BspSystemTimeInit+0x44>)
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000024 	.word	0x20000024
 800065c:	10624dd3 	.word	0x10624dd3
 8000660:	e000e010 	.word	0xe000e010
 8000664:	200000b4 	.word	0x200000b4

08000668 <BspSystemTimeGetTime>:

uint32_t BspSystemTimeGetTime( void )
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800066c:	f000 feee 	bl	800144c <HAL_GetTick>
 8000670:	4603      	mov	r3, r0
}
 8000672:	4618      	mov	r0, r3
 8000674:	bd80      	pop	{r7, pc}

08000676 <BspSystemTimeHasExpired>:

uint8_t BspSystemTimeHasExpired( uint32_t time, uint32_t length )
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
 800067e:	6039      	str	r1, [r7, #0]
  return ( HAL_GetTick() - time ) > length;
 8000680:	f000 fee4 	bl	800144c <HAL_GetTick>
 8000684:	4602      	mov	r2, r0
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	683a      	ldr	r2, [r7, #0]
 800068c:	429a      	cmp	r2, r3
 800068e:	bf34      	ite	cc
 8000690:	2301      	movcc	r3, #1
 8000692:	2300      	movcs	r3, #0
 8000694:	b2db      	uxtb	r3, r3
}
 8000696:	4618      	mov	r0, r3
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <JumpToApplication>:
  { FLASH_SECTOR_22, 0x081C0000, 0x0020000},
  { FLASH_SECTOR_23, 0x081E0000, 0x0020000}
};

void JumpToApplication(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
	const JumpStruct* vector_p = (JumpStruct*)APPLICATION_START_ADDRESS;
 80006a6:	4b20      	ldr	r3, [pc, #128]	; (8000728 <JumpToApplication+0x88>)
 80006a8:	607b      	str	r3, [r7, #4]

    // Reset the application-specific hardware peripherals
    // Reset UART5
    __HAL_RCC_UART5_FORCE_RESET();
 80006aa:	4b20      	ldr	r3, [pc, #128]	; (800072c <JumpToApplication+0x8c>)
 80006ac:	6a1b      	ldr	r3, [r3, #32]
 80006ae:	4a1f      	ldr	r2, [pc, #124]	; (800072c <JumpToApplication+0x8c>)
 80006b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006b4:	6213      	str	r3, [r2, #32]
    __HAL_RCC_UART5_RELEASE_RESET();
 80006b6:	4b1d      	ldr	r3, [pc, #116]	; (800072c <JumpToApplication+0x8c>)
 80006b8:	6a1b      	ldr	r3, [r3, #32]
 80006ba:	4a1c      	ldr	r2, [pc, #112]	; (800072c <JumpToApplication+0x8c>)
 80006bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80006c0:	6213      	str	r3, [r2, #32]

    // Reset SPI4
    __HAL_RCC_SPI4_FORCE_RESET();
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <JumpToApplication+0x8c>)
 80006c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c6:	4a19      	ldr	r2, [pc, #100]	; (800072c <JumpToApplication+0x8c>)
 80006c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006cc:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_RCC_SPI4_RELEASE_RESET();
 80006ce:	4b17      	ldr	r3, [pc, #92]	; (800072c <JumpToApplication+0x8c>)
 80006d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006d2:	4a16      	ldr	r2, [pc, #88]	; (800072c <JumpToApplication+0x8c>)
 80006d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80006d8:	6253      	str	r3, [r2, #36]	; 0x24

    // Reset GPIOD
    __HAL_RCC_GPIOD_FORCE_RESET();
 80006da:	4b14      	ldr	r3, [pc, #80]	; (800072c <JumpToApplication+0x8c>)
 80006dc:	691b      	ldr	r3, [r3, #16]
 80006de:	4a13      	ldr	r2, [pc, #76]	; (800072c <JumpToApplication+0x8c>)
 80006e0:	f043 0308 	orr.w	r3, r3, #8
 80006e4:	6113      	str	r3, [r2, #16]
    __HAL_RCC_GPIOD_RELEASE_RESET();
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <JumpToApplication+0x8c>)
 80006e8:	691b      	ldr	r3, [r3, #16]
 80006ea:	4a10      	ldr	r2, [pc, #64]	; (800072c <JumpToApplication+0x8c>)
 80006ec:	f023 0308 	bic.w	r3, r3, #8
 80006f0:	6113      	str	r3, [r2, #16]

    // Reset GPIOC
    __HAL_RCC_GPIOC_FORCE_RESET();
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <JumpToApplication+0x8c>)
 80006f4:	691b      	ldr	r3, [r3, #16]
 80006f6:	4a0d      	ldr	r2, [pc, #52]	; (800072c <JumpToApplication+0x8c>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	6113      	str	r3, [r2, #16]
    __HAL_RCC_GPIOC_RELEASE_RESET();
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <JumpToApplication+0x8c>)
 8000700:	691b      	ldr	r3, [r3, #16]
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <JumpToApplication+0x8c>)
 8000704:	f023 0304 	bic.w	r3, r3, #4
 8000708:	6113      	str	r3, [r2, #16]
//    __HAL_RCC_UART5_CLK_DISABLE();
//    __HAL_RCC_SPI4_CLK_DISABLE();
//    __HAL_RCC_GPIOC_CLK_DISABLE();
//    __HAL_RCC_GPIOD_CLK_DISABLE();

    HAL_RCC_DeInit();
 800070a:	f002 f939 	bl	8002980 <HAL_RCC_DeInit>
    HAL_DeInit();
 800070e:	f000 fe55 	bl	80013bc <HAL_DeInit>

	/* let's do The Jump! */
    /* Jump, used asm to avoid stack optimization */
    asm("msr msp, %0; bx %1;" : : "r"(vector_p->stack_addr), "r"(vector_p->func_p));
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	6852      	ldr	r2, [r2, #4]
 800071a:	f383 8808 	msr	MSP, r3
 800071e:	4710      	bx	r2
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	08008000 	.word	0x08008000
 800072c:	40023800 	.word	0x40023800

08000730 <Flash_EraseSector>:

// Function to erase a sector of the flash
void Flash_EraseSector(uint32_t sector)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b090      	sub	sp, #64	; 0x40
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	uint32_t lame;
//	HAL_FLASH_OB_Unlock();             // Unlock the option bytes for write access
	FLASH_OBProgramInitTypeDef obInit; // Option bytes structure
	HAL_FLASHEx_OBGetConfig(&obInit);   // Get the current option bytes configuration
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	4618      	mov	r0, r3
 800073e:	f001 f9ab 	bl	8001a98 <HAL_FLASHEx_OBGetConfig>
//	}
//
////	HAL_FLASH_OB_Lock(); // Lock the option bytes after modification

	HAL_StatusTypeDef status;
	status = HAL_FLASH_Unlock();
 8000742:	f000 ffc5 	bl	80016d0 <HAL_FLASH_Unlock>
 8000746:	4603      	mov	r3, r0
 8000748:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    FLASH_EraseInitTypeDef eraseInit;
    eraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 800074c:	2300      	movs	r3, #0
 800074e:	60bb      	str	r3, [r7, #8]
    eraseInit.Banks = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
    eraseInit.Sector = sector;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	613b      	str	r3, [r7, #16]
    eraseInit.NbSectors = 1;
 8000758:	2301      	movs	r3, #1
 800075a:	617b      	str	r3, [r7, #20]
    eraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800075c:	2302      	movs	r3, #2
 800075e:	61bb      	str	r3, [r7, #24]
    status = HAL_FLASHEx_Erase(&eraseInit, &lame);
 8000760:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000764:	f107 0308 	add.w	r3, r7, #8
 8000768:	4611      	mov	r1, r2
 800076a:	4618      	mov	r0, r3
 800076c:	f001 f922 	bl	80019b4 <HAL_FLASHEx_Erase>
 8000770:	4603      	mov	r3, r0
 8000772:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if( status != HAL_OK )
 8000776:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800077a:	2b00      	cmp	r3, #0
 800077c:	d000      	beq.n	8000780 <Flash_EraseSector+0x50>
    {
    	while(1);
 800077e:	e7fe      	b.n	800077e <Flash_EraseSector+0x4e>
    }
}
 8000780:	bf00      	nop
 8000782:	3740      	adds	r7, #64	; 0x40
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <Flash_WriteData>:

// Function to write data to the flash
void Flash_WriteData(uint32_t address, uint8_t* data, uint32_t length)
{
 8000788:	b5b0      	push	{r4, r5, r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status;
	status = HAL_FLASH_Unlock();
 8000794:	f000 ff9c 	bl	80016d0 <HAL_FLASH_Unlock>
 8000798:	4603      	mov	r3, r0
 800079a:	74fb      	strb	r3, [r7, #19]
    for (uint32_t i = 0; i < length; i += 4)
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	e017      	b.n	80007d2 <Flash_WriteData+0x4a>
    {
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + i, *(uint32_t*)(data + i));
 80007a2:	68fa      	ldr	r2, [r7, #12]
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	18d1      	adds	r1, r2, r3
 80007a8:	68ba      	ldr	r2, [r7, #8]
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	4413      	add	r3, r2
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2200      	movs	r2, #0
 80007b2:	461c      	mov	r4, r3
 80007b4:	4615      	mov	r5, r2
 80007b6:	4622      	mov	r2, r4
 80007b8:	462b      	mov	r3, r5
 80007ba:	2002      	movs	r0, #2
 80007bc:	f000 ff34 	bl	8001628 <HAL_FLASH_Program>
 80007c0:	4603      	mov	r3, r0
 80007c2:	74fb      	strb	r3, [r7, #19]
        if( status != HAL_OK )
 80007c4:	7cfb      	ldrb	r3, [r7, #19]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d000      	beq.n	80007cc <Flash_WriteData+0x44>
        {
        	while(1);
 80007ca:	e7fe      	b.n	80007ca <Flash_WriteData+0x42>
    for (uint32_t i = 0; i < length; i += 4)
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	3304      	adds	r3, #4
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d3e3      	bcc.n	80007a2 <Flash_WriteData+0x1a>
        }
    }
    status = HAL_FLASH_Lock();
 80007da:	f000 ff9b 	bl	8001714 <HAL_FLASH_Lock>
 80007de:	4603      	mov	r3, r0
 80007e0:	74fb      	strb	r3, [r7, #19]
}
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080007ec <__TimerStart>:


static void __TimerStart( uint32_t timeout )
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  __ComTimeoutStartTime = BspSystemTimeGetTime();
 80007f4:	f7ff ff38 	bl	8000668 <BspSystemTimeGetTime>
 80007f8:	4603      	mov	r3, r0
 80007fa:	4a04      	ldr	r2, [pc, #16]	; (800080c <__TimerStart+0x20>)
 80007fc:	6013      	str	r3, [r2, #0]
  __ComTimeoutLength    = timeout;
 80007fe:	4a04      	ldr	r2, [pc, #16]	; (8000810 <__TimerStart+0x24>)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6013      	str	r3, [r2, #0]
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000158 	.word	0x20000158
 8000810:	2000015c 	.word	0x2000015c

08000814 <__TimerKill>:

static void __TimerKill( void )
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <__TimerExpired>:

static uint8_t __TimerExpired( void )
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  return BspSystemTimeHasExpired( __ComTimeoutStartTime, __ComTimeoutLength );
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <__TimerExpired+0x1c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a05      	ldr	r2, [pc, #20]	; (8000844 <__TimerExpired+0x20>)
 800082e:	6812      	ldr	r2, [r2, #0]
 8000830:	4611      	mov	r1, r2
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff ff1f 	bl	8000676 <BspSystemTimeHasExpired>
 8000838:	4603      	mov	r3, r0
}
 800083a:	4618      	mov	r0, r3
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000158 	.word	0x20000158
 8000844:	2000015c 	.word	0x2000015c

08000848 <__ComWriteSlaveMode>:

static void __ComWriteSlaveMode( uint8_t Byte )
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
	UART_SendByte( Byte, 100 );
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	2164      	movs	r1, #100	; 0x64
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fe7e 	bl	8000558 <UART_SendByte>
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <__ComReadSlaveMode>:

static uint8_t __ComReadSlaveMode( uint8_t * Byte )
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	return UART_ReceiveByte( Byte );
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff fe9f 	bl	80005b0 <UART_ReceiveByte>
 8000872:	4603      	mov	r3, r0
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <__ComPayloadCallbackSlaveMode>:

static uint8_t __ComPayloadCallbackSlaveMode( uint8_t * Payload )
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  // Flashing Data, Size of data is in words
  Flash_WriteData(__InternalFlashAddress, Payload, 1024);
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <__ComPayloadCallbackSlaveMode+0x30>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800088c:	6879      	ldr	r1, [r7, #4]
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff ff7a 	bl	8000788 <Flash_WriteData>

  // Updating Address with 1K Bytes
  __InternalFlashAddress += 1024;
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <__ComPayloadCallbackSlaveMode+0x30>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800089c:	4a03      	ldr	r2, [pc, #12]	; (80008ac <__ComPayloadCallbackSlaveMode+0x30>)
 800089e:	6013      	str	r3, [r2, #0]

  return 1;
 80008a0:	2301      	movs	r3, #1
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000020 	.word	0x20000020

080008b0 <__PrepareInternalFlash>:


static void __PrepareInternalFlash( void )
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
	uint8_t sector = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	71fb      	strb	r3, [r7, #7]
	for( sector = FLASH_SECTOR_2; sector <= FLASH_SECTOR_19; sector++ )
 80008ba:	2302      	movs	r3, #2
 80008bc:	71fb      	strb	r3, [r7, #7]
 80008be:	e006      	b.n	80008ce <__PrepareInternalFlash+0x1e>
	{
		Flash_EraseSector(sector);
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ff34 	bl	8000730 <Flash_EraseSector>
	for( sector = FLASH_SECTOR_2; sector <= FLASH_SECTOR_19; sector++ )
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	3301      	adds	r3, #1
 80008cc:	71fb      	strb	r3, [r7, #7]
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	2b13      	cmp	r3, #19
 80008d2:	d9f5      	bls.n	80008c0 <__PrepareInternalFlash+0x10>
	}
}
 80008d4:	bf00      	nop
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <__resetRxBuffer>:

static void __resetRxBuffer(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	memset(__rxBuffer, 0, sizeof(__rxBuffer) );
 80008e4:	2220      	movs	r2, #32
 80008e6:	2100      	movs	r1, #0
 80008e8:	4803      	ldr	r0, [pc, #12]	; (80008f8 <__resetRxBuffer+0x18>)
 80008ea:	f005 fad5 	bl	8005e98 <memset>
	__rxBufferPosition = 0;
 80008ee:	4b03      	ldr	r3, [pc, #12]	; (80008fc <__resetRxBuffer+0x1c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	701a      	strb	r2, [r3, #0]
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000160 	.word	0x20000160
 80008fc:	20000180 	.word	0x20000180

08000900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  int strCmpResult = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
  uint8_t __waitForSecret = 1;
 800090a:	2301      	movs	r3, #1
 800090c:	70fb      	strb	r3, [r7, #3]
  uint8_t __rxByte = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	70bb      	strb	r3, [r7, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000912:	f000 fd31 	bl	8001378 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000916:	f000 f88f 	bl	8000a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800091a:	f000 f94d 	bl	8000bb8 <MX_GPIO_Init>
  MX_UART5_Init();
 800091e:	f000 f921 	bl	8000b64 <MX_UART5_Init>
  MX_SPI4_Init();
 8000922:	f000 f8e9 	bl	8000af8 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000926:	f002 ff5f 	bl	80037e8 <osKernelInitialize>

  __resetRxBuffer();
 800092a:	f7ff ffd9 	bl	80008e0 <__resetRxBuffer>
  BspSystemTimeInit();
 800092e:	f7ff fe77 	bl	8000620 <BspSystemTimeInit>
  XModemGlobalHandle  = XModem1KCreate( __ComWriteSlaveMode,
 8000932:	4b35      	ldr	r3, [pc, #212]	; (8000a08 <main+0x108>)
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	4b35      	ldr	r3, [pc, #212]	; (8000a0c <main+0x10c>)
 8000938:	4a35      	ldr	r2, [pc, #212]	; (8000a10 <main+0x110>)
 800093a:	4936      	ldr	r1, [pc, #216]	; (8000a14 <main+0x114>)
 800093c:	4836      	ldr	r0, [pc, #216]	; (8000a18 <main+0x118>)
 800093e:	f000 fb4f 	bl	8000fe0 <XModem1KCreate>
 8000942:	4603      	mov	r3, r0
 8000944:	4a35      	ldr	r2, [pc, #212]	; (8000a1c <main+0x11c>)
 8000946:	6013      	str	r3, [r2, #0]
		  	  	  	  	  	  	  	  	__ComReadSlaveMode,
										__TimerStart,
										__TimerKill,
										__TimerExpired      );

  UART_SendData( __bootloaderPrompt, strlen((char*)__bootloaderPrompt), 1000 );
 8000948:	4835      	ldr	r0, [pc, #212]	; (8000a20 <main+0x120>)
 800094a:	f7ff fc51 	bl	80001f0 <strlen>
 800094e:	4603      	mov	r3, r0
 8000950:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000954:	4619      	mov	r1, r3
 8000956:	4832      	ldr	r0, [pc, #200]	; (8000a20 <main+0x120>)
 8000958:	f7ff fe44 	bl	80005e4 <UART_SendData>

  // I should be able to simply reuse this timer before XModem1K Starts
  __TimerStart(3000);
 800095c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000960:	f7ff ff44 	bl	80007ec <__TimerStart>
  while( __waitForSecret )
 8000964:	e021      	b.n	80009aa <main+0xaa>
  {
	  if( UART_ReceiveByte( &__rxByte ) )
 8000966:	1cbb      	adds	r3, r7, #2
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fe21 	bl	80005b0 <UART_ReceiveByte>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d009      	beq.n	8000988 <main+0x88>
	  {
		  __rxBuffer[__rxBufferPosition++] = __rxByte;
 8000974:	4b2b      	ldr	r3, [pc, #172]	; (8000a24 <main+0x124>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	1c5a      	adds	r2, r3, #1
 800097a:	b2d1      	uxtb	r1, r2
 800097c:	4a29      	ldr	r2, [pc, #164]	; (8000a24 <main+0x124>)
 800097e:	7011      	strb	r1, [r2, #0]
 8000980:	461a      	mov	r2, r3
 8000982:	78b9      	ldrb	r1, [r7, #2]
 8000984:	4b28      	ldr	r3, [pc, #160]	; (8000a28 <main+0x128>)
 8000986:	5499      	strb	r1, [r3, r2]
	  }
	  if( __TimerExpired() || ( __rxBufferPosition == 8 ) )
 8000988:	f7ff ff4c 	bl	8000824 <__TimerExpired>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d103      	bne.n	800099a <main+0x9a>
 8000992:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <main+0x124>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b08      	cmp	r3, #8
 8000998:	d107      	bne.n	80009aa <main+0xaa>
	  {
		  strCmpResult = strncmp( (char*)__rxBuffer, (char*)__password, sizeof(__password));
 800099a:	2208      	movs	r2, #8
 800099c:	4923      	ldr	r1, [pc, #140]	; (8000a2c <main+0x12c>)
 800099e:	4822      	ldr	r0, [pc, #136]	; (8000a28 <main+0x128>)
 80009a0:	f005 faec 	bl	8005f7c <strncmp>
 80009a4:	6078      	str	r0, [r7, #4]
		  __waitForSecret = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	70fb      	strb	r3, [r7, #3]
  while( __waitForSecret )
 80009aa:	78fb      	ldrb	r3, [r7, #3]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d1da      	bne.n	8000966 <main+0x66>
	  }
  }

  UART_SendData( __bootloaderPrompt, strlen((char*)__bootloaderPrompt), 1000 );
 80009b0:	481b      	ldr	r0, [pc, #108]	; (8000a20 <main+0x120>)
 80009b2:	f7ff fc1d 	bl	80001f0 <strlen>
 80009b6:	4603      	mov	r3, r0
 80009b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009bc:	4619      	mov	r1, r3
 80009be:	4818      	ldr	r0, [pc, #96]	; (8000a20 <main+0x120>)
 80009c0:	f7ff fe10 	bl	80005e4 <UART_SendData>

  if( 0 == strCmpResult )
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d118      	bne.n	80009fc <main+0xfc>
  {
	  UART_SendData( __response, strlen((char*)__response), 1000 );
 80009ca:	4819      	ldr	r0, [pc, #100]	; (8000a30 <main+0x130>)
 80009cc:	f7ff fc10 	bl	80001f0 <strlen>
 80009d0:	4603      	mov	r3, r0
 80009d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009d6:	4619      	mov	r1, r3
 80009d8:	4815      	ldr	r0, [pc, #84]	; (8000a30 <main+0x130>)
 80009da:	f7ff fe03 	bl	80005e4 <UART_SendData>
	  __PrepareInternalFlash();
 80009de:	f7ff ff67 	bl	80008b0 <__PrepareInternalFlash>
	  XModem1KReceiveFileInit( XModemGlobalHandle );
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <main+0x11c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 fb36 	bl	8001058 <XModem1KReceiveFileInit>
	  XModem1KReceiveFile( XModemGlobalHandle, __ComPayloadCallbackSlaveMode );
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <main+0x11c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4910      	ldr	r1, [pc, #64]	; (8000a34 <main+0x134>)
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 fb48 	bl	8001088 <XModem1KReceiveFile>
	  HAL_FLASH_Lock();
 80009f8:	f000 fe8c 	bl	8001714 <HAL_FLASH_Lock>

	  // TODO: We probably need to add the FLASH_LOCK() to an error handler somewhere
  }

  JumpToApplication();
 80009fc:	f7ff fe50 	bl	80006a0 <JumpToApplication>

  // TODO: Rip out the unnecessary FreeRTOS stuff
  /* Start scheduler */
  osKernelStart();
 8000a00:	f002 ff16 	bl	8003830 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <main+0x104>
 8000a06:	bf00      	nop
 8000a08:	08000825 	.word	0x08000825
 8000a0c:	08000815 	.word	0x08000815
 8000a10:	080007ed 	.word	0x080007ed
 8000a14:	08000865 	.word	0x08000865
 8000a18:	08000849 	.word	0x08000849
 8000a1c:	200000b8 	.word	0x200000b8
 8000a20:	20000000 	.word	0x20000000
 8000a24:	20000180 	.word	0x20000180
 8000a28:	20000160 	.word	0x20000160
 8000a2c:	20000018 	.word	0x20000018
 8000a30:	20000014 	.word	0x20000014
 8000a34:	0800087d 	.word	0x0800087d

08000a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b094      	sub	sp, #80	; 0x50
 8000a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3e:	f107 0320 	add.w	r3, r7, #32
 8000a42:	2230      	movs	r2, #48	; 0x30
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f005 fa26 	bl	8005e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	4b23      	ldr	r3, [pc, #140]	; (8000af0 <SystemClock_Config+0xb8>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	4a22      	ldr	r2, [pc, #136]	; (8000af0 <SystemClock_Config+0xb8>)
 8000a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6c:	4b20      	ldr	r3, [pc, #128]	; (8000af0 <SystemClock_Config+0xb8>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a78:	2300      	movs	r3, #0
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <SystemClock_Config+0xbc>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a84:	4a1b      	ldr	r2, [pc, #108]	; (8000af4 <SystemClock_Config+0xbc>)
 8000a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <SystemClock_Config+0xbc>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa0:	2310      	movs	r3, #16
 8000aa2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa8:	f107 0320 	add.w	r3, r7, #32
 8000aac:	4618      	mov	r0, r3
 8000aae:	f001 fadd 	bl	800206c <HAL_RCC_OscConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000ab8:	f000 f8c6 	bl	8000c48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000abc:	230f      	movs	r3, #15
 8000abe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fd40 	bl	800255c <HAL_RCC_ClockConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ae2:	f000 f8b1 	bl	8000c48 <Error_Handler>
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	3750      	adds	r7, #80	; 0x50
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40007000 	.word	0x40007000

08000af8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000afc:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <MX_SPI4_Init+0x64>)
 8000afe:	4a18      	ldr	r2, [pc, #96]	; (8000b60 <MX_SPI4_Init+0x68>)
 8000b00:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000b02:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <MX_SPI4_Init+0x64>)
 8000b04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b08:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <MX_SPI4_Init+0x64>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <MX_SPI4_Init+0x64>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_SPI4_Init+0x64>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <MX_SPI4_Init+0x64>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_SPI4_Init+0x64>)
 8000b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b28:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_SPI4_Init+0x64>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <MX_SPI4_Init+0x64>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_SPI4_Init+0x64>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <MX_SPI4_Init+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_SPI4_Init+0x64>)
 8000b44:	220a      	movs	r2, #10
 8000b46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000b48:	4804      	ldr	r0, [pc, #16]	; (8000b5c <MX_SPI4_Init+0x64>)
 8000b4a:	f002 f811 	bl	8002b70 <HAL_SPI_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8000b54:	f000 f878 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	200000bc 	.word	0x200000bc
 8000b60:	40013400 	.word	0x40013400

08000b64 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_UART5_Init+0x4c>)
 8000b6a:	4a12      	ldr	r2, [pc, #72]	; (8000bb4 <MX_UART5_Init+0x50>)
 8000b6c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <MX_UART5_Init+0x4c>)
 8000b70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b74:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MX_UART5_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_UART5_Init+0x4c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <MX_UART5_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_UART5_Init+0x4c>)
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <MX_UART5_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_UART5_Init+0x4c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000b9a:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_UART5_Init+0x4c>)
 8000b9c:	f002 fb1e 	bl	80031dc <HAL_UART_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000ba6:	f000 f84f 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000114 	.word	0x20000114
 8000bb4:	40005000 	.word	0x40005000

08000bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <MX_GPIO_Init+0x68>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a16      	ldr	r2, [pc, #88]	; (8000c20 <MX_GPIO_Init+0x68>)
 8000bc8:	f043 0310 	orr.w	r3, r3, #16
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <MX_GPIO_Init+0x68>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0310 	and.w	r3, r3, #16
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <MX_GPIO_Init+0x68>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a0f      	ldr	r2, [pc, #60]	; (8000c20 <MX_GPIO_Init+0x68>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <MX_GPIO_Init+0x68>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <MX_GPIO_Init+0x68>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <MX_GPIO_Init+0x68>)
 8000c00:	f043 0308 	orr.w	r3, r3, #8
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <MX_GPIO_Init+0x68>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0308 	and.w	r3, r3, #8
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]

}
 8000c12:	bf00      	nop
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800

08000c24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d101      	bne.n	8000c3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c36:	f000 fbf5 	bl	8001424 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40001000 	.word	0x40001000

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4c:	b672      	cpsid	i
}
 8000c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <Error_Handler+0x8>
	...

08000c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_MspInit+0x54>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	4a11      	ldr	r2, [pc, #68]	; (8000ca8 <HAL_MspInit+0x54>)
 8000c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c68:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <HAL_MspInit+0x54>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	603b      	str	r3, [r7, #0]
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <HAL_MspInit+0x54>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <HAL_MspInit+0x54>)
 8000c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c84:	6413      	str	r3, [r2, #64]	; 0x40
 8000c86:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <HAL_MspInit+0x54>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	210f      	movs	r1, #15
 8000c96:	f06f 0001 	mvn.w	r0, #1
 8000c9a:	f000 fc9b 	bl	80015d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800

08000cac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a19      	ldr	r2, [pc, #100]	; (8000d30 <HAL_SPI_MspInit+0x84>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d12b      	bne.n	8000d26 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	4a17      	ldr	r2, [pc, #92]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cf4:	f043 0310 	orr.w	r3, r3, #16
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0310 	and.w	r3, r3, #16
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8000d06:	2364      	movs	r3, #100	; 0x64
 8000d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d12:	2303      	movs	r3, #3
 8000d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000d16:	2305      	movs	r3, #5
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <HAL_SPI_MspInit+0x8c>)
 8000d22:	f000 fff7 	bl	8001d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8000d26:	bf00      	nop
 8000d28:	3728      	adds	r7, #40	; 0x28
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40013400 	.word	0x40013400
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40021000 	.word	0x40021000

08000d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	; 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a28      	ldr	r2, [pc, #160]	; (8000dfc <HAL_UART_MspInit+0xc0>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d14a      	bne.n	8000df4 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b27      	ldr	r3, [pc, #156]	; (8000e00 <HAL_UART_MspInit+0xc4>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	4a26      	ldr	r2, [pc, #152]	; (8000e00 <HAL_UART_MspInit+0xc4>)
 8000d68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6e:	4b24      	ldr	r3, [pc, #144]	; (8000e00 <HAL_UART_MspInit+0xc4>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <HAL_UART_MspInit+0xc4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a1f      	ldr	r2, [pc, #124]	; (8000e00 <HAL_UART_MspInit+0xc4>)
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <HAL_UART_MspInit+0xc4>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <HAL_UART_MspInit+0xc4>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a18      	ldr	r2, [pc, #96]	; (8000e00 <HAL_UART_MspInit+0xc4>)
 8000da0:	f043 0308 	orr.w	r3, r3, #8
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <HAL_UART_MspInit+0xc4>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0308 	and.w	r3, r3, #8
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480d      	ldr	r0, [pc, #52]	; (8000e04 <HAL_UART_MspInit+0xc8>)
 8000dd0:	f000 ffa0 	bl	8001d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000de4:	2308      	movs	r3, #8
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4619      	mov	r1, r3
 8000dee:	4806      	ldr	r0, [pc, #24]	; (8000e08 <HAL_UART_MspInit+0xcc>)
 8000df0:	f000 ff90 	bl	8001d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000df4:	bf00      	nop
 8000df6:	3728      	adds	r7, #40	; 0x28
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40005000 	.word	0x40005000
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020800 	.word	0x40020800
 8000e08:	40020c00 	.word	0x40020c00

08000e0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08e      	sub	sp, #56	; 0x38
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	4b33      	ldr	r3, [pc, #204]	; (8000ef0 <HAL_InitTick+0xe4>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	4a32      	ldr	r2, [pc, #200]	; (8000ef0 <HAL_InitTick+0xe4>)
 8000e26:	f043 0310 	orr.w	r3, r3, #16
 8000e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2c:	4b30      	ldr	r3, [pc, #192]	; (8000ef0 <HAL_InitTick+0xe4>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	f003 0310 	and.w	r3, r3, #16
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e38:	f107 0210 	add.w	r2, r7, #16
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f001 fd6a 	bl	800291c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e48:	6a3b      	ldr	r3, [r7, #32]
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d103      	bne.n	8000e5a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e52:	f001 fd3b 	bl	80028cc <HAL_RCC_GetPCLK1Freq>
 8000e56:	6378      	str	r0, [r7, #52]	; 0x34
 8000e58:	e004      	b.n	8000e64 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e5a:	f001 fd37 	bl	80028cc <HAL_RCC_GetPCLK1Freq>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e66:	4a23      	ldr	r2, [pc, #140]	; (8000ef4 <HAL_InitTick+0xe8>)
 8000e68:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6c:	0c9b      	lsrs	r3, r3, #18
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e72:	4b21      	ldr	r3, [pc, #132]	; (8000ef8 <HAL_InitTick+0xec>)
 8000e74:	4a21      	ldr	r2, [pc, #132]	; (8000efc <HAL_InitTick+0xf0>)
 8000e76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e78:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <HAL_InitTick+0xec>)
 8000e7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e7e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e80:	4a1d      	ldr	r2, [pc, #116]	; (8000ef8 <HAL_InitTick+0xec>)
 8000e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e84:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e86:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <HAL_InitTick+0xec>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <HAL_InitTick+0xec>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e92:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <HAL_InitTick+0xec>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e98:	4817      	ldr	r0, [pc, #92]	; (8000ef8 <HAL_InitTick+0xec>)
 8000e9a:	f001 fef2 	bl	8002c82 <HAL_TIM_Base_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ea4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d11b      	bne.n	8000ee4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000eac:	4812      	ldr	r0, [pc, #72]	; (8000ef8 <HAL_InitTick+0xec>)
 8000eae:	f001 ff41 	bl	8002d34 <HAL_TIM_Base_Start_IT>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000eb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d111      	bne.n	8000ee4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ec0:	2036      	movs	r0, #54	; 0x36
 8000ec2:	f000 fba3 	bl	800160c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b0f      	cmp	r3, #15
 8000eca:	d808      	bhi.n	8000ede <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	2036      	movs	r0, #54	; 0x36
 8000ed2:	f000 fb7f 	bl	80015d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <HAL_InitTick+0xf4>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	e002      	b.n	8000ee4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ee4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3738      	adds	r7, #56	; 0x38
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	431bde83 	.word	0x431bde83
 8000ef8:	20000184 	.word	0x20000184
 8000efc:	40001000 	.word	0x40001000
 8000f00:	20000028 	.word	0x20000028

08000f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <NMI_Handler+0x4>

08000f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <HardFault_Handler+0x4>

08000f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <MemManage_Handler+0x4>

08000f16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <BusFault_Handler+0x4>

08000f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <UsageFault_Handler+0x4>

08000f22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <TIM6_DAC_IRQHandler+0x10>)
 8000f36:	f001 ff6d 	bl	8002e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000184 	.word	0x20000184

08000f44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <SystemInit+0x20>)
 8000f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <SystemInit+0x20>)
 8000f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__CRCCalc>:

static xXModem1KOperatingStruct_t OperatingParams[XMODEM1KNUMBEROFOBJECTS];
static uint8_t                    OperatingParamsPosition = 0;

static uint16_t __CRCCalc( const uint8_t *pu8Data, int16_t i16Len )
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	807b      	strh	r3, [r7, #2]
  uint8_t i;
  uint16_t u16CRC = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	81bb      	strh	r3, [r7, #12]

  while( --i16Len >= 0 )
 8000f78:	e023      	b.n	8000fc2 <__CRCCalc+0x5a>
  {
    i = 8;
 8000f7a:	2308      	movs	r3, #8
 8000f7c:	73fb      	strb	r3, [r7, #15]
    u16CRC = u16CRC ^ (((uint16_t) *pu8Data++) << 8);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	1c5a      	adds	r2, r3, #1
 8000f82:	607a      	str	r2, [r7, #4]
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	b21a      	sxth	r2, r3
 8000f8a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f8e:	4053      	eors	r3, r2
 8000f90:	b21b      	sxth	r3, r3
 8000f92:	81bb      	strh	r3, [r7, #12]

    do
    {
      if( u16CRC & 0x8000 )
 8000f94:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	da09      	bge.n	8000fb0 <__CRCCalc+0x48>
      {
        u16CRC = u16CRC << 1 ^ 0x1021;
 8000f9c:	89bb      	ldrh	r3, [r7, #12]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8000fa6:	f083 0301 	eor.w	r3, r3, #1
 8000faa:	b21b      	sxth	r3, r3
 8000fac:	81bb      	strh	r3, [r7, #12]
 8000fae:	e002      	b.n	8000fb6 <__CRCCalc+0x4e>
      }
      else
      {
        u16CRC = u16CRC << 1;
 8000fb0:	89bb      	ldrh	r3, [r7, #12]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	81bb      	strh	r3, [r7, #12]
      }
    } while( --i );
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1e8      	bne.n	8000f94 <__CRCCalc+0x2c>
  while( --i16Len >= 0 )
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	807b      	strh	r3, [r7, #2]
 8000fca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	dad3      	bge.n	8000f7a <__CRCCalc+0x12>
  }
  return u16CRC;
 8000fd2:	89bb      	ldrh	r3, [r7, #12]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <XModem1KCreate>:
XModem1KHandle XModem1KCreate( XModem1KWriteMethod  write,
                               XModem1KReadMethod   read,
                               XModem1KTimerStart   timer_start,
                               XModem1KTimerKill    timer_kill,
                               XModem1KTimerExpired timer_expired  )
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b087      	sub	sp, #28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	603b      	str	r3, [r7, #0]
  xXModem1KOperatingStruct_t * new_object = (void*)0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]

  if( OperatingParamsPosition < XMODEM1KNUMBEROFOBJECTS )
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <XModem1KCreate+0x70>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d80e      	bhi.n	8001018 <XModem1KCreate+0x38>
  {
    new_object = (XModem1KHandle)(&OperatingParams[OperatingParamsPosition++]);
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <XModem1KCreate+0x70>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	b2d1      	uxtb	r1, r2
 8001002:	4a13      	ldr	r2, [pc, #76]	; (8001050 <XModem1KCreate+0x70>)
 8001004:	7011      	strb	r1, [r2, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	f240 4324 	movw	r3, #1060	; 0x424
 800100c:	fb02 f303 	mul.w	r3, r2, r3
 8001010:	4a10      	ldr	r2, [pc, #64]	; (8001054 <XModem1KCreate+0x74>)
 8001012:	4413      	add	r3, r2
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	e004      	b.n	8001022 <XModem1KCreate+0x42>
  {
    for( ;; )
    {
      // If you are here, you have allocated too many XModem1k Objects
      // Try increasing XMODEM1KNUMBEROFOBJECTS until you are not here
      new_object++;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	e7fa      	b.n	8001018 <XModem1KCreate+0x38>
    }

    new_object = (XModem1KHandle)(&OperatingParams[2]);
  }

  new_object->write         = write;
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	605a      	str	r2, [r3, #4]
  new_object->read          = read;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	609a      	str	r2, [r3, #8]
  new_object->timer_start   = timer_start;
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	60da      	str	r2, [r3, #12]
  new_object->timer_kill    = timer_kill;
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	611a      	str	r2, [r3, #16]
  new_object->timer_expired = timer_expired;
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	6a3a      	ldr	r2, [r7, #32]
 800103e:	615a      	str	r2, [r3, #20]

  return (XModem1KHandle)new_object;
 8001040:	697b      	ldr	r3, [r7, #20]
}
 8001042:	4618      	mov	r0, r3
 8001044:	371c      	adds	r7, #28
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000a14 	.word	0x20000a14
 8001054:	200001cc 	.word	0x200001cc

08001058 <XModem1KReceiveFileInit>:

void XModem1KReceiveFileInit( XModem1KHandle handle )
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  xXModem1KOperatingStruct_t * xmodem1k_handle = (xXModem1KOperatingStruct_t*)handle;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	60fb      	str	r3, [r7, #12]

  xmodem1k_handle->byte_count   = 0;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2200      	movs	r2, #0
 8001068:	831a      	strh	r2, [r3, #24]
  xmodem1k_handle->crc          = 0;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2200      	movs	r2, #0
 800106e:	835a      	strh	r2, [r3, #26]
  xmodem1k_handle->data         = 0;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2200      	movs	r2, #0
 8001074:	775a      	strb	r2, [r3, #29]
  xmodem1k_handle->data_started = 0;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2200      	movs	r2, #0
 800107a:	779a      	strb	r2, [r3, #30]
}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <XModem1KReceiveFile>:


// TODO: Clean up the byte numbering.
uint8_t XModem1KReceiveFile( XModem1KHandle          handle,
                             XModem1KPayloadCallback payload )
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
	uint16_t crcCalc = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	81fb      	strh	r3, [r7, #14]
	xXModem1KOperatingStruct_t * xmodem1k_handle = (xXModem1KOperatingStruct_t*)handle;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	60bb      	str	r3, [r7, #8]

  XModem1KReceiveFileInit( handle );
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ffdc 	bl	8001058 <XModem1KReceiveFileInit>

  xmodem1k_handle->in_progress = 1;
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	2201      	movs	r2, #1
 80010a4:	771a      	strb	r2, [r3, #28]

  /* Send command to server indicating we are ready to receive */
  xmodem1k_handle->write( POLL );
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2043      	movs	r0, #67	; 0x43
 80010ac:	4798      	blx	r3
  xmodem1k_handle->timer_start( POLL_PERIOD_ms );
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010b6:	4798      	blx	r3


  while( xmodem1k_handle->in_progress )
 80010b8:	e129      	b.n	800130e <XModem1KReceiveFile+0x286>
  {
    /* Check if a character has been received on the UART */
	if( xmodem1k_handle->read( &xmodem1k_handle->data ) )
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	321d      	adds	r2, #29
 80010c2:	4610      	mov	r0, r2
 80010c4:	4798      	blx	r3
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 810d 	beq.w	80012e8 <XModem1KReceiveFile+0x260>
    {
      /* Position of received byte determines action we take */
      xmodem1k_handle->timer_kill();
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	4798      	blx	r3
      xmodem1k_handle->data_started = 1;
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	2201      	movs	r2, #1
 80010d8:	779a      	strb	r2, [r3, #30]

      switch( xmodem1k_handle->byte_count )
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	8b1b      	ldrh	r3, [r3, #24]
 80010de:	f240 4204 	movw	r2, #1028	; 0x404
 80010e2:	4293      	cmp	r3, r2
 80010e4:	f000 80b6 	beq.w	8001254 <XModem1KReceiveFile+0x1cc>
 80010e8:	f240 4204 	movw	r2, #1028	; 0x404
 80010ec:	4293      	cmp	r3, r2
 80010ee:	f300 80e9 	bgt.w	80012c4 <XModem1KReceiveFile+0x23c>
 80010f2:	f240 4203 	movw	r2, #1027	; 0x403
 80010f6:	4293      	cmp	r3, r2
 80010f8:	f000 80a0 	beq.w	800123c <XModem1KReceiveFile+0x1b4>
 80010fc:	f240 4203 	movw	r2, #1027	; 0x403
 8001100:	4293      	cmp	r3, r2
 8001102:	f300 80df 	bgt.w	80012c4 <XModem1KReceiveFile+0x23c>
 8001106:	2b80      	cmp	r3, #128	; 0x80
 8001108:	d05d      	beq.n	80011c6 <XModem1KReceiveFile+0x13e>
 800110a:	2b80      	cmp	r3, #128	; 0x80
 800110c:	f300 80da 	bgt.w	80012c4 <XModem1KReceiveFile+0x23c>
 8001110:	2b7f      	cmp	r3, #127	; 0x7f
 8001112:	d03c      	beq.n	800118e <XModem1KReceiveFile+0x106>
 8001114:	2b7f      	cmp	r3, #127	; 0x7f
 8001116:	f300 80d5 	bgt.w	80012c4 <XModem1KReceiveFile+0x23c>
 800111a:	2b00      	cmp	r3, #0
 800111c:	d007      	beq.n	800112e <XModem1KReceiveFile+0xa6>
 800111e:	2b00      	cmp	r3, #0
 8001120:	f2c0 80d0 	blt.w	80012c4 <XModem1KReceiveFile+0x23c>
 8001124:	3b01      	subs	r3, #1
 8001126:	2b01      	cmp	r3, #1
 8001128:	f200 80cc 	bhi.w	80012c4 <XModem1KReceiveFile+0x23c>
 800112c:	e028      	b.n	8001180 <XModem1KReceiveFile+0xf8>
      {
        case 0:
          if( xmodem1k_handle->data == STX )
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	7f5b      	ldrb	r3, [r3, #29]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d107      	bne.n	8001146 <XModem1KReceiveFile+0xbe>
          {
            xmodem1k_handle->packet_type   = XMODEM_1K;
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	2201      	movs	r2, #1
 800113a:	f883 2020 	strb.w	r2, [r3, #32]
            xmodem1k_handle->byte_count = 1;
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	2201      	movs	r2, #1
 8001142:	831a      	strh	r2, [r3, #24]
          }
          else
          {
            while( 1 );
          }
          break;
 8001144:	e0e3      	b.n	800130e <XModem1KReceiveFile+0x286>
          else if( xmodem1k_handle->data == SOH )
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	7f5b      	ldrb	r3, [r3, #29]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d107      	bne.n	800115e <XModem1KReceiveFile+0xd6>
            xmodem1k_handle->packet_type   = XMODEM_STANDARD;
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2020 	strb.w	r2, [r3, #32]
            xmodem1k_handle->byte_count = 1;
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	2201      	movs	r2, #1
 800115a:	831a      	strh	r2, [r3, #24]
          break;
 800115c:	e0d7      	b.n	800130e <XModem1KReceiveFile+0x286>
          else if( xmodem1k_handle->data == EOT || xmodem1k_handle->data == SUB )
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	7f5b      	ldrb	r3, [r3, #29]
 8001162:	2b04      	cmp	r3, #4
 8001164:	d003      	beq.n	800116e <XModem1KReceiveFile+0xe6>
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	7f5b      	ldrb	r3, [r3, #29]
 800116a:	2b1a      	cmp	r3, #26
 800116c:	d107      	bne.n	800117e <XModem1KReceiveFile+0xf6>
            xmodem1k_handle->write( ACK );
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2006      	movs	r0, #6
 8001174:	4798      	blx	r3
            xmodem1k_handle->in_progress = 0;
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	2200      	movs	r2, #0
 800117a:	771a      	strb	r2, [r3, #28]
          break;
 800117c:	e0c7      	b.n	800130e <XModem1KReceiveFile+0x286>
            while( 1 );
 800117e:	e7fe      	b.n	800117e <XModem1KReceiveFile+0xf6>
        case 1:
          /* Byte 1 is the packet number - should be different from last one we received */
        case 2:
          /* Byte 2 is the packet number inverted - check for error with last byte */
          xmodem1k_handle->byte_count++;
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	8b1b      	ldrh	r3, [r3, #24]
 8001184:	3301      	adds	r3, #1
 8001186:	b29a      	uxth	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	831a      	strh	r2, [r3, #24]
          break;
 800118c:	e0bf      	b.n	800130e <XModem1KReceiveFile+0x286>
        case 127:
          if( XMODEM_STANDARD == xmodem1k_handle->packet_type )
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d105      	bne.n	80011a4 <XModem1KReceiveFile+0x11c>
          {
            xmodem1k_handle->crc = xmodem1k_handle->data;
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	7f5b      	ldrb	r3, [r3, #29]
 800119c:	b29a      	uxth	r2, r3
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	835a      	strh	r2, [r3, #26]
 80011a2:	e009      	b.n	80011b8 <XModem1KReceiveFile+0x130>
          }
          else
          {
            // Stuff byte into received array
            xmodem1k_handle->buffer[xmodem1k_handle->byte_count - PACKET_HEADER_LEN] =
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	8b1b      	ldrh	r3, [r3, #24]
 80011a8:	3b03      	subs	r3, #3
                xmodem1k_handle->data;
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	7f51      	ldrb	r1, [r2, #29]
            xmodem1k_handle->buffer[xmodem1k_handle->byte_count - PACKET_HEADER_LEN] =
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	4413      	add	r3, r2
 80011b2:	460a      	mov	r2, r1
 80011b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          }
          xmodem1k_handle->byte_count++;
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	8b1b      	ldrh	r3, [r3, #24]
 80011bc:	3301      	adds	r3, #1
 80011be:	b29a      	uxth	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	831a      	strh	r2, [r3, #24]
          break;
 80011c4:	e0a3      	b.n	800130e <XModem1KReceiveFile+0x286>
        case 128:
          if( XMODEM_STANDARD == xmodem1k_handle->packet_type )
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d124      	bne.n	800121a <XModem1KReceiveFile+0x192>
          {
            xmodem1k_handle->crc <<= 8;
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	8b5b      	ldrh	r3, [r3, #26]
 80011d4:	021b      	lsls	r3, r3, #8
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	835a      	strh	r2, [r3, #26]
            xmodem1k_handle->crc  |= xmodem1k_handle->data;
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	8b5a      	ldrh	r2, [r3, #26]
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	7f5b      	ldrb	r3, [r3, #29]
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	4313      	orrs	r3, r2
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	835a      	strh	r2, [r3, #26]

            //if( __CRCCalc( xmodem1k_handle->buffer, 128 ) == xmodem1k_handle->crc )
            if( 1 )
            {
              if( payload( xmodem1k_handle->buffer ) != 0 )
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	4610      	mov	r0, r2
 80011f8:	4798      	blx	r3
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d004      	beq.n	800120a <XModem1KReceiveFile+0x182>
              {
                xmodem1k_handle->write( ACK );
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2006      	movs	r0, #6
 8001206:	4798      	blx	r3
 8001208:	e003      	b.n	8001212 <XModem1KReceiveFile+0x18a>
              }
              else
              {
                xmodem1k_handle->write( NAK );
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2015      	movs	r0, #21
 8001210:	4798      	blx	r3
            else /* Error CRC calculated does not match that received */
            {
              xmodem1k_handle->write( NAK );
            }

            xmodem1k_handle->byte_count = 0;
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	2200      	movs	r2, #0
 8001216:	831a      	strh	r2, [r3, #24]
            // Stuff byte into received array
            xmodem1k_handle->buffer[xmodem1k_handle->byte_count - PACKET_HEADER_LEN] =
                xmodem1k_handle->data;
            xmodem1k_handle->byte_count++;
          }
          break;
 8001218:	e079      	b.n	800130e <XModem1KReceiveFile+0x286>
            xmodem1k_handle->buffer[xmodem1k_handle->byte_count - PACKET_HEADER_LEN] =
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	8b1b      	ldrh	r3, [r3, #24]
 800121e:	3b03      	subs	r3, #3
                xmodem1k_handle->data;
 8001220:	68ba      	ldr	r2, [r7, #8]
 8001222:	7f51      	ldrb	r1, [r2, #29]
            xmodem1k_handle->buffer[xmodem1k_handle->byte_count - PACKET_HEADER_LEN] =
 8001224:	68ba      	ldr	r2, [r7, #8]
 8001226:	4413      	add	r3, r2
 8001228:	460a      	mov	r2, r1
 800122a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            xmodem1k_handle->byte_count++;
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	8b1b      	ldrh	r3, [r3, #24]
 8001232:	3301      	adds	r3, #1
 8001234:	b29a      	uxth	r2, r3
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	831a      	strh	r2, [r3, #24]
          break;
 800123a:	e068      	b.n	800130e <XModem1KReceiveFile+0x286>
        case 1027:
          xmodem1k_handle->crc = xmodem1k_handle->data;
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	7f5b      	ldrb	r3, [r3, #29]
 8001240:	b29a      	uxth	r2, r3
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	835a      	strh	r2, [r3, #26]
          xmodem1k_handle->byte_count++;
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	8b1b      	ldrh	r3, [r3, #24]
 800124a:	3301      	adds	r3, #1
 800124c:	b29a      	uxth	r2, r3
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	831a      	strh	r2, [r3, #24]
          break;
 8001252:	e05c      	b.n	800130e <XModem1KReceiveFile+0x286>
        case 1028:
          xmodem1k_handle->crc <<= 8;
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	8b5b      	ldrh	r3, [r3, #26]
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	b29a      	uxth	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	835a      	strh	r2, [r3, #26]
          xmodem1k_handle->crc  |= xmodem1k_handle->data;
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	8b5a      	ldrh	r2, [r3, #26]
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	7f5b      	ldrb	r3, [r3, #29]
 8001268:	b29b      	uxth	r3, r3
 800126a:	4313      	orrs	r3, r2
 800126c:	b29a      	uxth	r2, r3
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	835a      	strh	r2, [r3, #26]

          crcCalc =  __CRCCalc( xmodem1k_handle->buffer, 1024 );
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	3324      	adds	r3, #36	; 0x24
 8001276:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fe74 	bl	8000f68 <__CRCCalc>
 8001280:	4603      	mov	r3, r0
 8001282:	81fb      	strh	r3, [r7, #14]
          if( crcCalc == xmodem1k_handle->crc )
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	8b5b      	ldrh	r3, [r3, #26]
 8001288:	89fa      	ldrh	r2, [r7, #14]
 800128a:	429a      	cmp	r2, r3
 800128c:	d112      	bne.n	80012b4 <XModem1KReceiveFile+0x22c>
          {
            if( payload( xmodem1k_handle->buffer ) != 0 )
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	4610      	mov	r0, r2
 8001298:	4798      	blx	r3
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d004      	beq.n	80012aa <XModem1KReceiveFile+0x222>
            {
              xmodem1k_handle->write( ACK );
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2006      	movs	r0, #6
 80012a6:	4798      	blx	r3
 80012a8:	e008      	b.n	80012bc <XModem1KReceiveFile+0x234>
            }
            else
            {
              xmodem1k_handle->write( NAK );
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2015      	movs	r0, #21
 80012b0:	4798      	blx	r3
 80012b2:	e003      	b.n	80012bc <XModem1KReceiveFile+0x234>
            }
          }
          else /* Error CRC calculated does not match that received */
          {
            xmodem1k_handle->write( NAK );
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2015      	movs	r0, #21
 80012ba:	4798      	blx	r3
          }

          xmodem1k_handle->byte_count = 0;
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	2200      	movs	r2, #0
 80012c0:	831a      	strh	r2, [r3, #24]

          break;
 80012c2:	e024      	b.n	800130e <XModem1KReceiveFile+0x286>
        default:
          // Stuff byte into received array
          xmodem1k_handle->buffer[xmodem1k_handle->byte_count - PACKET_HEADER_LEN] =
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	8b1b      	ldrh	r3, [r3, #24]
 80012c8:	3b03      	subs	r3, #3
              xmodem1k_handle->data;
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	7f51      	ldrb	r1, [r2, #29]
          xmodem1k_handle->buffer[xmodem1k_handle->byte_count - PACKET_HEADER_LEN] =
 80012ce:	68ba      	ldr	r2, [r7, #8]
 80012d0:	4413      	add	r3, r2
 80012d2:	460a      	mov	r2, r1
 80012d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          xmodem1k_handle->byte_count++;
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	8b1b      	ldrh	r3, [r3, #24]
 80012dc:	3301      	adds	r3, #1
 80012de:	b29a      	uxth	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	831a      	strh	r2, [r3, #24]
          break;
 80012e4:	bf00      	nop
 80012e6:	e012      	b.n	800130e <XModem1KReceiveFile+0x286>
      }
    }
    else
    {
      // Writes a 'C' to file sender to trigger a write if available
      if( xmodem1k_handle->timer_expired() && ( 0 == xmodem1k_handle->data_started  ) )
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	4798      	blx	r3
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00c      	beq.n	800130e <XModem1KReceiveFile+0x286>
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	7f9b      	ldrb	r3, [r3, #30]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d108      	bne.n	800130e <XModem1KReceiveFile+0x286>
      {
        xmodem1k_handle->write( POLL );
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2043      	movs	r0, #67	; 0x43
 8001302:	4798      	blx	r3
        xmodem1k_handle->timer_start( POLL_PERIOD_ms );
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800130c:	4798      	blx	r3
  while( xmodem1k_handle->in_progress )
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	7f1b      	ldrb	r3, [r3, #28]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f47f aed1 	bne.w	80010ba <XModem1KReceiveFile+0x32>
      }
    }
  }

  // TODO: Implement failure modes
  return 1;
 8001318:	2301      	movs	r3, #1
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001324:	f8df d034 	ldr.w	sp, [pc, #52]	; 800135c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001328:	480d      	ldr	r0, [pc, #52]	; (8001360 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800132a:	490e      	ldr	r1, [pc, #56]	; (8001364 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800132c:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001330:	e002      	b.n	8001338 <LoopCopyDataInit>

08001332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001336:	3304      	adds	r3, #4

08001338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800133c:	d3f9      	bcc.n	8001332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133e:	4a0b      	ldr	r2, [pc, #44]	; (800136c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001340:	4c0b      	ldr	r4, [pc, #44]	; (8001370 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001344:	e001      	b.n	800134a <LoopFillZerobss>

08001346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001348:	3204      	adds	r2, #4

0800134a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800134c:	d3fb      	bcc.n	8001346 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800134e:	f7ff fdf9 	bl	8000f44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001352:	f004 fd6d 	bl	8005e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001356:	f7ff fad3 	bl	8000900 <main>
  bx  lr    
 800135a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800135c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001364:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001368:	0800610c 	.word	0x0800610c
  ldr r2, =_sbss
 800136c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001370:	2000184c 	.word	0x2000184c

08001374 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001374:	e7fe      	b.n	8001374 <ADC_IRQHandler>
	...

08001378 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_Init+0x40>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a0d      	ldr	r2, [pc, #52]	; (80013b8 <HAL_Init+0x40>)
 8001382:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001386:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <HAL_Init+0x40>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <HAL_Init+0x40>)
 800138e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001392:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <HAL_Init+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a07      	ldr	r2, [pc, #28]	; (80013b8 <HAL_Init+0x40>)
 800139a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a0:	2003      	movs	r0, #3
 80013a2:	f000 f90c 	bl	80015be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013a6:	200f      	movs	r0, #15
 80013a8:	f7ff fd30 	bl	8000e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ac:	f7ff fc52 	bl	8000c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40023c00 	.word	0x40023c00

080013bc <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <HAL_DeInit+0x54>)
 80013c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013c6:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <HAL_DeInit+0x54>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <HAL_DeInit+0x54>)
 80013d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013d4:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <HAL_DeInit+0x54>)
 80013d8:	2200      	movs	r2, #0
 80013da:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <HAL_DeInit+0x54>)
 80013de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013e2:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_DeInit+0x54>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_DeInit+0x54>)
 80013ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013f0:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <HAL_DeInit+0x54>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <HAL_DeInit+0x54>)
 80013fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013fe:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_DeInit+0x54>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001406:	f000 f805 	bl	8001414 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40023800 	.word	0x40023800

08001414 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_IncTick+0x20>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_IncTick+0x24>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4413      	add	r3, r2
 8001434:	4a04      	ldr	r2, [pc, #16]	; (8001448 <HAL_IncTick+0x24>)
 8001436:	6013      	str	r3, [r2, #0]
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	2000002c 	.word	0x2000002c
 8001448:	20000a18 	.word	0x20000a18

0800144c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return uwTick;
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <HAL_GetTick+0x14>)
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000a18 	.word	0x20000a18

08001464 <__NVIC_SetPriorityGrouping>:
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001480:	4013      	ands	r3, r2
 8001482:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800148c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001496:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	60d3      	str	r3, [r2, #12]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_GetPriorityGrouping>:
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <__NVIC_GetPriorityGrouping+0x18>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	f003 0307 	and.w	r3, r3, #7
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_EnableIRQ>:
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	db0b      	blt.n	80014f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	f003 021f 	and.w	r2, r3, #31
 80014e0:	4907      	ldr	r1, [pc, #28]	; (8001500 <__NVIC_EnableIRQ+0x38>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	095b      	lsrs	r3, r3, #5
 80014e8:	2001      	movs	r0, #1
 80014ea:	fa00 f202 	lsl.w	r2, r0, r2
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000e100 	.word	0xe000e100

08001504 <__NVIC_SetPriority>:
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	2b00      	cmp	r3, #0
 8001516:	db0a      	blt.n	800152e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	490c      	ldr	r1, [pc, #48]	; (8001550 <__NVIC_SetPriority+0x4c>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	0112      	lsls	r2, r2, #4
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	440b      	add	r3, r1
 8001528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800152c:	e00a      	b.n	8001544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4908      	ldr	r1, [pc, #32]	; (8001554 <__NVIC_SetPriority+0x50>)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	3b04      	subs	r3, #4
 800153c:	0112      	lsls	r2, r2, #4
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	440b      	add	r3, r1
 8001542:	761a      	strb	r2, [r3, #24]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000e100 	.word	0xe000e100
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	; 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f1c3 0307 	rsb	r3, r3, #7
 8001572:	2b04      	cmp	r3, #4
 8001574:	bf28      	it	cs
 8001576:	2304      	movcs	r3, #4
 8001578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3304      	adds	r3, #4
 800157e:	2b06      	cmp	r3, #6
 8001580:	d902      	bls.n	8001588 <NVIC_EncodePriority+0x30>
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3b03      	subs	r3, #3
 8001586:	e000      	b.n	800158a <NVIC_EncodePriority+0x32>
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	401a      	ands	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	43d9      	mvns	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	4313      	orrs	r3, r2
         );
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3724      	adds	r7, #36	; 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ff4c 	bl	8001464 <__NVIC_SetPriorityGrouping>
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
 80015e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e6:	f7ff ff61 	bl	80014ac <__NVIC_GetPriorityGrouping>
 80015ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	68b9      	ldr	r1, [r7, #8]
 80015f0:	6978      	ldr	r0, [r7, #20]
 80015f2:	f7ff ffb1 	bl	8001558 <NVIC_EncodePriority>
 80015f6:	4602      	mov	r2, r0
 80015f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fc:	4611      	mov	r1, r2
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ff80 	bl	8001504 <__NVIC_SetPriority>
}
 8001604:	bf00      	nop
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ff54 	bl	80014c8 <__NVIC_EnableIRQ>
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800163a:	4b23      	ldr	r3, [pc, #140]	; (80016c8 <HAL_FLASH_Program+0xa0>)
 800163c:	7e1b      	ldrb	r3, [r3, #24]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d101      	bne.n	8001646 <HAL_FLASH_Program+0x1e>
 8001642:	2302      	movs	r3, #2
 8001644:	e03b      	b.n	80016be <HAL_FLASH_Program+0x96>
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <HAL_FLASH_Program+0xa0>)
 8001648:	2201      	movs	r2, #1
 800164a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800164c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001650:	f000 f870 	bl	8001734 <FLASH_WaitForLastOperation>
 8001654:	4603      	mov	r3, r0
 8001656:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001658:	7dfb      	ldrb	r3, [r7, #23]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d12b      	bne.n	80016b6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d105      	bne.n	8001670 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001664:	783b      	ldrb	r3, [r7, #0]
 8001666:	4619      	mov	r1, r3
 8001668:	68b8      	ldr	r0, [r7, #8]
 800166a:	f000 f91b 	bl	80018a4 <FLASH_Program_Byte>
 800166e:	e016      	b.n	800169e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d105      	bne.n	8001682 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001676:	883b      	ldrh	r3, [r7, #0]
 8001678:	4619      	mov	r1, r3
 800167a:	68b8      	ldr	r0, [r7, #8]
 800167c:	f000 f8ee 	bl	800185c <FLASH_Program_HalfWord>
 8001680:	e00d      	b.n	800169e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d105      	bne.n	8001694 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	4619      	mov	r1, r3
 800168c:	68b8      	ldr	r0, [r7, #8]
 800168e:	f000 f8c3 	bl	8001818 <FLASH_Program_Word>
 8001692:	e004      	b.n	800169e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001698:	68b8      	ldr	r0, [r7, #8]
 800169a:	f000 f88b 	bl	80017b4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800169e:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016a2:	f000 f847 	bl	8001734 <FLASH_WaitForLastOperation>
 80016a6:	4603      	mov	r3, r0
 80016a8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <HAL_FLASH_Program+0xa4>)
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	4a07      	ldr	r2, [pc, #28]	; (80016cc <HAL_FLASH_Program+0xa4>)
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80016b6:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <HAL_FLASH_Program+0xa0>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	761a      	strb	r2, [r3, #24]
  
  return status;
 80016bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000a1c 	.word	0x20000a1c
 80016cc:	40023c00 	.word	0x40023c00

080016d0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <HAL_FLASH_Unlock+0x38>)
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	da0b      	bge.n	80016fa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <HAL_FLASH_Unlock+0x38>)
 80016e4:	4a09      	ldr	r2, [pc, #36]	; (800170c <HAL_FLASH_Unlock+0x3c>)
 80016e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80016e8:	4b07      	ldr	r3, [pc, #28]	; (8001708 <HAL_FLASH_Unlock+0x38>)
 80016ea:	4a09      	ldr	r2, [pc, #36]	; (8001710 <HAL_FLASH_Unlock+0x40>)
 80016ec:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <HAL_FLASH_Unlock+0x38>)
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	da01      	bge.n	80016fa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80016fa:	79fb      	ldrb	r3, [r7, #7]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	40023c00 	.word	0x40023c00
 800170c:	45670123 	.word	0x45670123
 8001710:	cdef89ab 	.word	0xcdef89ab

08001714 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <HAL_FLASH_Lock+0x1c>)
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <HAL_FLASH_Lock+0x1c>)
 800171e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001722:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	40023c00 	.word	0x40023c00

08001734 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001740:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <FLASH_WaitForLastOperation+0x78>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001746:	f7ff fe81 	bl	800144c <HAL_GetTick>
 800174a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800174c:	e010      	b.n	8001770 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001754:	d00c      	beq.n	8001770 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d007      	beq.n	800176c <FLASH_WaitForLastOperation+0x38>
 800175c:	f7ff fe76 	bl	800144c <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	429a      	cmp	r2, r3
 800176a:	d201      	bcs.n	8001770 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e019      	b.n	80017a4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <FLASH_WaitForLastOperation+0x7c>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1e8      	bne.n	800174e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <FLASH_WaitForLastOperation+0x7c>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b00      	cmp	r3, #0
 8001786:	d002      	beq.n	800178e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <FLASH_WaitForLastOperation+0x7c>)
 800178a:	2201      	movs	r2, #1
 800178c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <FLASH_WaitForLastOperation+0x7c>)
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800179a:	f000 f8a5 	bl	80018e8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
  
}  
 80017a4:	4618      	mov	r0, r3
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000a1c 	.word	0x20000a1c
 80017b0:	40023c00 	.word	0x40023c00

080017b4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80017c0:	4b14      	ldr	r3, [pc, #80]	; (8001814 <FLASH_Program_DoubleWord+0x60>)
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	4a13      	ldr	r2, [pc, #76]	; (8001814 <FLASH_Program_DoubleWord+0x60>)
 80017c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <FLASH_Program_DoubleWord+0x60>)
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	4a10      	ldr	r2, [pc, #64]	; (8001814 <FLASH_Program_DoubleWord+0x60>)
 80017d2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80017d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80017d8:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <FLASH_Program_DoubleWord+0x60>)
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	4a0d      	ldr	r2, [pc, #52]	; (8001814 <FLASH_Program_DoubleWord+0x60>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80017ea:	f3bf 8f6f 	isb	sy
}
 80017ee:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80017f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	000a      	movs	r2, r1
 80017fe:	2300      	movs	r3, #0
 8001800:	68f9      	ldr	r1, [r7, #12]
 8001802:	3104      	adds	r1, #4
 8001804:	4613      	mov	r3, r2
 8001806:	600b      	str	r3, [r1, #0]
}
 8001808:	bf00      	nop
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	40023c00 	.word	0x40023c00

08001818 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001822:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <FLASH_Program_Word+0x40>)
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	4a0c      	ldr	r2, [pc, #48]	; (8001858 <FLASH_Program_Word+0x40>)
 8001828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800182c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <FLASH_Program_Word+0x40>)
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	4a09      	ldr	r2, [pc, #36]	; (8001858 <FLASH_Program_Word+0x40>)
 8001834:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001838:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <FLASH_Program_Word+0x40>)
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	4a06      	ldr	r2, [pc, #24]	; (8001858 <FLASH_Program_Word+0x40>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	601a      	str	r2, [r3, #0]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	40023c00 	.word	0x40023c00

0800185c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001868:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <FLASH_Program_HalfWord+0x44>)
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	4a0c      	ldr	r2, [pc, #48]	; (80018a0 <FLASH_Program_HalfWord+0x44>)
 800186e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001872:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001874:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <FLASH_Program_HalfWord+0x44>)
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	4a09      	ldr	r2, [pc, #36]	; (80018a0 <FLASH_Program_HalfWord+0x44>)
 800187a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001880:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <FLASH_Program_HalfWord+0x44>)
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	4a06      	ldr	r2, [pc, #24]	; (80018a0 <FLASH_Program_HalfWord+0x44>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	887a      	ldrh	r2, [r7, #2]
 8001890:	801a      	strh	r2, [r3, #0]
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40023c00 	.word	0x40023c00

080018a4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <FLASH_Program_Byte+0x40>)
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	4a0b      	ldr	r2, [pc, #44]	; (80018e4 <FLASH_Program_Byte+0x40>)
 80018b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <FLASH_Program_Byte+0x40>)
 80018be:	4a09      	ldr	r2, [pc, #36]	; (80018e4 <FLASH_Program_Byte+0x40>)
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <FLASH_Program_Byte+0x40>)
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	4a06      	ldr	r2, [pc, #24]	; (80018e4 <FLASH_Program_Byte+0x40>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	78fa      	ldrb	r2, [r7, #3]
 80018d4:	701a      	strb	r2, [r3, #0]
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40023c00 	.word	0x40023c00

080018e8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80018ec:	4b2f      	ldr	r3, [pc, #188]	; (80019ac <FLASH_SetErrorCode+0xc4>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	f003 0310 	and.w	r3, r3, #16
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d008      	beq.n	800190a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80018f8:	4b2d      	ldr	r3, [pc, #180]	; (80019b0 <FLASH_SetErrorCode+0xc8>)
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	f043 0310 	orr.w	r3, r3, #16
 8001900:	4a2b      	ldr	r2, [pc, #172]	; (80019b0 <FLASH_SetErrorCode+0xc8>)
 8001902:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001904:	4b29      	ldr	r3, [pc, #164]	; (80019ac <FLASH_SetErrorCode+0xc4>)
 8001906:	2210      	movs	r2, #16
 8001908:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800190a:	4b28      	ldr	r3, [pc, #160]	; (80019ac <FLASH_SetErrorCode+0xc4>)
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	f003 0320 	and.w	r3, r3, #32
 8001912:	2b00      	cmp	r3, #0
 8001914:	d008      	beq.n	8001928 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001916:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <FLASH_SetErrorCode+0xc8>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	f043 0308 	orr.w	r3, r3, #8
 800191e:	4a24      	ldr	r2, [pc, #144]	; (80019b0 <FLASH_SetErrorCode+0xc8>)
 8001920:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001922:	4b22      	ldr	r3, [pc, #136]	; (80019ac <FLASH_SetErrorCode+0xc4>)
 8001924:	2220      	movs	r2, #32
 8001926:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001928:	4b20      	ldr	r3, [pc, #128]	; (80019ac <FLASH_SetErrorCode+0xc4>)
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001930:	2b00      	cmp	r3, #0
 8001932:	d008      	beq.n	8001946 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001934:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <FLASH_SetErrorCode+0xc8>)
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	f043 0304 	orr.w	r3, r3, #4
 800193c:	4a1c      	ldr	r2, [pc, #112]	; (80019b0 <FLASH_SetErrorCode+0xc8>)
 800193e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001940:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <FLASH_SetErrorCode+0xc4>)
 8001942:	2240      	movs	r2, #64	; 0x40
 8001944:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001946:	4b19      	ldr	r3, [pc, #100]	; (80019ac <FLASH_SetErrorCode+0xc4>)
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194e:	2b00      	cmp	r3, #0
 8001950:	d008      	beq.n	8001964 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001952:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <FLASH_SetErrorCode+0xc8>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	f043 0302 	orr.w	r3, r3, #2
 800195a:	4a15      	ldr	r2, [pc, #84]	; (80019b0 <FLASH_SetErrorCode+0xc8>)
 800195c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800195e:	4b13      	ldr	r3, [pc, #76]	; (80019ac <FLASH_SetErrorCode+0xc4>)
 8001960:	2280      	movs	r2, #128	; 0x80
 8001962:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <FLASH_SetErrorCode+0xc4>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196c:	2b00      	cmp	r3, #0
 800196e:	d009      	beq.n	8001984 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <FLASH_SetErrorCode+0xc8>)
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	4a0d      	ldr	r2, [pc, #52]	; (80019b0 <FLASH_SetErrorCode+0xc8>)
 800197a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <FLASH_SetErrorCode+0xc4>)
 800197e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001982:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001984:	4b09      	ldr	r3, [pc, #36]	; (80019ac <FLASH_SetErrorCode+0xc4>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d008      	beq.n	80019a2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001990:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <FLASH_SetErrorCode+0xc8>)
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	f043 0320 	orr.w	r3, r3, #32
 8001998:	4a05      	ldr	r2, [pc, #20]	; (80019b0 <FLASH_SetErrorCode+0xc8>)
 800199a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <FLASH_SetErrorCode+0xc4>)
 800199e:	2202      	movs	r2, #2
 80019a0:	60da      	str	r2, [r3, #12]
  }
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	40023c00 	.word	0x40023c00
 80019b0:	20000a1c 	.word	0x20000a1c

080019b4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80019c6:	4b32      	ldr	r3, [pc, #200]	; (8001a90 <HAL_FLASHEx_Erase+0xdc>)
 80019c8:	7e1b      	ldrb	r3, [r3, #24]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_FLASHEx_Erase+0x1e>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e05a      	b.n	8001a88 <HAL_FLASHEx_Erase+0xd4>
 80019d2:	4b2f      	ldr	r3, [pc, #188]	; (8001a90 <HAL_FLASHEx_Erase+0xdc>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80019dc:	f7ff feaa 	bl	8001734 <FLASH_WaitForLastOperation>
 80019e0:	4603      	mov	r3, r0
 80019e2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d14a      	bne.n	8001a80 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019f0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d117      	bne.n	8001a2a <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	4619      	mov	r1, r3
 8001a06:	4610      	mov	r0, r2
 8001a08:	f000 f86a 	bl	8001ae0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a10:	f7ff fe90 	bl	8001734 <FLASH_WaitForLastOperation>
 8001a14:	4603      	mov	r3, r0
 8001a16:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001a18:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <HAL_FLASHEx_Erase+0xe0>)
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	4a1d      	ldr	r2, [pc, #116]	; (8001a94 <HAL_FLASHEx_Erase+0xe0>)
 8001a1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001a22:	f023 0304 	bic.w	r3, r3, #4
 8001a26:	6113      	str	r3, [r2, #16]
 8001a28:	e028      	b.n	8001a7c <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	e01c      	b.n	8001a6c <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	4619      	mov	r1, r3
 8001a3a:	68b8      	ldr	r0, [r7, #8]
 8001a3c:	f000 f88a 	bl	8001b54 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a44:	f7ff fe76 	bl	8001734 <FLASH_WaitForLastOperation>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <HAL_FLASHEx_Erase+0xe0>)
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	4a10      	ldr	r2, [pc, #64]	; (8001a94 <HAL_FLASHEx_Erase+0xe0>)
 8001a52:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001a56:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	601a      	str	r2, [r3, #0]
          break;
 8001a64:	e00a      	b.n	8001a7c <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	4413      	add	r3, r2
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d3da      	bcc.n	8001a32 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001a7c:	f000 f904 	bl	8001c88 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <HAL_FLASHEx_Erase+0xdc>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	761a      	strb	r2, [r3, #24]

  return status;
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000a1c 	.word	0x20000a1c
 8001a94:	40023c00 	.word	0x40023c00

08001a98 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	220f      	movs	r2, #15
 8001aa4:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8001aa6:	f000 f8b3 	bl	8001c10 <FLASH_OB_GetWRP>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	461a      	mov	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8001ab2:	f000 f8b9 	bl	8001c28 <FLASH_OB_GetRDP>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	461a      	mov	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8001abe:	f000 f897 	bl	8001bf0 <FLASH_OB_GetUser>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8001aca:	f000 f8cd 	bl	8001c68 <FLASH_OB_GetBOR>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	615a      	str	r2, [r3, #20]
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	6039      	str	r1, [r7, #0]
 8001aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001aec:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <FLASH_MassErase+0x70>)
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	4a17      	ldr	r2, [pc, #92]	; (8001b50 <FLASH_MassErase+0x70>)
 8001af2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001af6:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d108      	bne.n	8001b10 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8001afe:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <FLASH_MassErase+0x70>)
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	4a13      	ldr	r2, [pc, #76]	; (8001b50 <FLASH_MassErase+0x70>)
 8001b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b08:	f043 0304 	orr.w	r3, r3, #4
 8001b0c:	6113      	str	r3, [r2, #16]
 8001b0e:	e00f      	b.n	8001b30 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d106      	bne.n	8001b24 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <FLASH_MassErase+0x70>)
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	4a0d      	ldr	r2, [pc, #52]	; (8001b50 <FLASH_MassErase+0x70>)
 8001b1c:	f043 0304 	orr.w	r3, r3, #4
 8001b20:	6113      	str	r3, [r2, #16]
 8001b22:	e005      	b.n	8001b30 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8001b24:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <FLASH_MassErase+0x70>)
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <FLASH_MassErase+0x70>)
 8001b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b2e:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001b30:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <FLASH_MassErase+0x70>)
 8001b32:	691a      	ldr	r2, [r3, #16]
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	021b      	lsls	r3, r3, #8
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <FLASH_MassErase+0x70>)
 8001b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b40:	6113      	str	r3, [r2, #16]
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40023c00 	.word	0x40023c00

08001b54 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d102      	bne.n	8001b70 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	e010      	b.n	8001b92 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001b70:	78fb      	ldrb	r3, [r7, #3]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d103      	bne.n	8001b7e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001b76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	e009      	b.n	8001b92 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001b7e:	78fb      	ldrb	r3, [r7, #3]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d103      	bne.n	8001b8c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001b84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	e002      	b.n	8001b92 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001b8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b90:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b0b      	cmp	r3, #11
 8001b96:	d902      	bls.n	8001b9e <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <FLASH_Erase_Sector+0x98>)
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	4a12      	ldr	r2, [pc, #72]	; (8001bec <FLASH_Erase_Sector+0x98>)
 8001ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ba8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <FLASH_Erase_Sector+0x98>)
 8001bac:	691a      	ldr	r2, [r3, #16]
 8001bae:	490f      	ldr	r1, [pc, #60]	; (8001bec <FLASH_Erase_Sector+0x98>)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <FLASH_Erase_Sector+0x98>)
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	4a0c      	ldr	r2, [pc, #48]	; (8001bec <FLASH_Erase_Sector+0x98>)
 8001bbc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001bc0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <FLASH_Erase_Sector+0x98>)
 8001bc4:	691a      	ldr	r2, [r3, #16]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	4a07      	ldr	r2, [pc, #28]	; (8001bec <FLASH_Erase_Sector+0x98>)
 8001bce:	f043 0302 	orr.w	r3, r3, #2
 8001bd2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <FLASH_Erase_Sector+0x98>)
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	4a04      	ldr	r2, [pc, #16]	; (8001bec <FLASH_Erase_Sector+0x98>)
 8001bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bde:	6113      	str	r3, [r2, #16]
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	40023c00 	.word	0x40023c00

08001bf0 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <FLASH_OB_GetUser+0x1c>)
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	f023 031f 	bic.w	r3, r3, #31
 8001bfe:	b2db      	uxtb	r3, r3
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	40023c00 	.word	0x40023c00

08001c10 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8001c14:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <FLASH_OB_GetWRP+0x14>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	b29b      	uxth	r3, r3
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	40023c16 	.word	0x40023c16

08001c28 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8001c2e:	23aa      	movs	r3, #170	; 0xaa
 8001c30:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <FLASH_OB_GetRDP+0x3c>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2bcc      	cmp	r3, #204	; 0xcc
 8001c3a:	d102      	bne.n	8001c42 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8001c3c:	23cc      	movs	r3, #204	; 0xcc
 8001c3e:	71fb      	strb	r3, [r7, #7]
 8001c40:	e009      	b.n	8001c56 <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <FLASH_OB_GetRDP+0x3c>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2baa      	cmp	r3, #170	; 0xaa
 8001c4a:	d102      	bne.n	8001c52 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8001c4c:	23aa      	movs	r3, #170	; 0xaa
 8001c4e:	71fb      	strb	r3, [r7, #7]
 8001c50:	e001      	b.n	8001c56 <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 8001c52:	2355      	movs	r3, #85	; 0x55
 8001c54:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8001c56:	79fb      	ldrb	r3, [r7, #7]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	40023c15 	.word	0x40023c15

08001c68 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <FLASH_OB_GetBOR+0x1c>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	f003 030c 	and.w	r3, r3, #12
 8001c76:	b2db      	uxtb	r3, r3
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40023c14 	.word	0x40023c14

08001c88 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001c8c:	4b20      	ldr	r3, [pc, #128]	; (8001d10 <FLASH_FlushCaches+0x88>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d017      	beq.n	8001cc8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001c98:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <FLASH_FlushCaches+0x88>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1c      	ldr	r2, [pc, #112]	; (8001d10 <FLASH_FlushCaches+0x88>)
 8001c9e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ca2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001ca4:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <FLASH_FlushCaches+0x88>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a19      	ldr	r2, [pc, #100]	; (8001d10 <FLASH_FlushCaches+0x88>)
 8001caa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <FLASH_FlushCaches+0x88>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a16      	ldr	r2, [pc, #88]	; (8001d10 <FLASH_FlushCaches+0x88>)
 8001cb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001cba:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cbc:	4b14      	ldr	r3, [pc, #80]	; (8001d10 <FLASH_FlushCaches+0x88>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a13      	ldr	r2, [pc, #76]	; (8001d10 <FLASH_FlushCaches+0x88>)
 8001cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cc6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <FLASH_FlushCaches+0x88>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d017      	beq.n	8001d04 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <FLASH_FlushCaches+0x88>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	; (8001d10 <FLASH_FlushCaches+0x88>)
 8001cda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001cde:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <FLASH_FlushCaches+0x88>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <FLASH_FlushCaches+0x88>)
 8001ce6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cea:	6013      	str	r3, [r2, #0]
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <FLASH_FlushCaches+0x88>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a07      	ldr	r2, [pc, #28]	; (8001d10 <FLASH_FlushCaches+0x88>)
 8001cf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cf6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <FLASH_FlushCaches+0x88>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <FLASH_FlushCaches+0x88>)
 8001cfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d02:	6013      	str	r3, [r2, #0]
  }
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40023c00 	.word	0x40023c00

08001d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b089      	sub	sp, #36	; 0x24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
 8001d2e:	e177      	b.n	8002020 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d30:	2201      	movs	r2, #1
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	f040 8166 	bne.w	800201a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d005      	beq.n	8001d66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d130      	bne.n	8001dc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	2203      	movs	r2, #3
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	68da      	ldr	r2, [r3, #12]
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	091b      	lsrs	r3, r3, #4
 8001db2:	f003 0201 	and.w	r2, r3, #1
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d017      	beq.n	8001e04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	2203      	movs	r2, #3
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d123      	bne.n	8001e58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	08da      	lsrs	r2, r3, #3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3208      	adds	r2, #8
 8001e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	220f      	movs	r2, #15
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	691a      	ldr	r2, [r3, #16]
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	08da      	lsrs	r2, r3, #3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3208      	adds	r2, #8
 8001e52:	69b9      	ldr	r1, [r7, #24]
 8001e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	2203      	movs	r2, #3
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 0203 	and.w	r2, r3, #3
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 80c0 	beq.w	800201a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	4b66      	ldr	r3, [pc, #408]	; (8002038 <HAL_GPIO_Init+0x324>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	4a65      	ldr	r2, [pc, #404]	; (8002038 <HAL_GPIO_Init+0x324>)
 8001ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eaa:	4b63      	ldr	r3, [pc, #396]	; (8002038 <HAL_GPIO_Init+0x324>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eb6:	4a61      	ldr	r2, [pc, #388]	; (800203c <HAL_GPIO_Init+0x328>)
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	089b      	lsrs	r3, r3, #2
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	220f      	movs	r2, #15
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a58      	ldr	r2, [pc, #352]	; (8002040 <HAL_GPIO_Init+0x32c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d037      	beq.n	8001f52 <HAL_GPIO_Init+0x23e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a57      	ldr	r2, [pc, #348]	; (8002044 <HAL_GPIO_Init+0x330>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d031      	beq.n	8001f4e <HAL_GPIO_Init+0x23a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a56      	ldr	r2, [pc, #344]	; (8002048 <HAL_GPIO_Init+0x334>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d02b      	beq.n	8001f4a <HAL_GPIO_Init+0x236>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a55      	ldr	r2, [pc, #340]	; (800204c <HAL_GPIO_Init+0x338>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d025      	beq.n	8001f46 <HAL_GPIO_Init+0x232>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a54      	ldr	r2, [pc, #336]	; (8002050 <HAL_GPIO_Init+0x33c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d01f      	beq.n	8001f42 <HAL_GPIO_Init+0x22e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a53      	ldr	r2, [pc, #332]	; (8002054 <HAL_GPIO_Init+0x340>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d019      	beq.n	8001f3e <HAL_GPIO_Init+0x22a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a52      	ldr	r2, [pc, #328]	; (8002058 <HAL_GPIO_Init+0x344>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d013      	beq.n	8001f3a <HAL_GPIO_Init+0x226>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a51      	ldr	r2, [pc, #324]	; (800205c <HAL_GPIO_Init+0x348>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d00d      	beq.n	8001f36 <HAL_GPIO_Init+0x222>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a50      	ldr	r2, [pc, #320]	; (8002060 <HAL_GPIO_Init+0x34c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d007      	beq.n	8001f32 <HAL_GPIO_Init+0x21e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a4f      	ldr	r2, [pc, #316]	; (8002064 <HAL_GPIO_Init+0x350>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d101      	bne.n	8001f2e <HAL_GPIO_Init+0x21a>
 8001f2a:	2309      	movs	r3, #9
 8001f2c:	e012      	b.n	8001f54 <HAL_GPIO_Init+0x240>
 8001f2e:	230a      	movs	r3, #10
 8001f30:	e010      	b.n	8001f54 <HAL_GPIO_Init+0x240>
 8001f32:	2308      	movs	r3, #8
 8001f34:	e00e      	b.n	8001f54 <HAL_GPIO_Init+0x240>
 8001f36:	2307      	movs	r3, #7
 8001f38:	e00c      	b.n	8001f54 <HAL_GPIO_Init+0x240>
 8001f3a:	2306      	movs	r3, #6
 8001f3c:	e00a      	b.n	8001f54 <HAL_GPIO_Init+0x240>
 8001f3e:	2305      	movs	r3, #5
 8001f40:	e008      	b.n	8001f54 <HAL_GPIO_Init+0x240>
 8001f42:	2304      	movs	r3, #4
 8001f44:	e006      	b.n	8001f54 <HAL_GPIO_Init+0x240>
 8001f46:	2303      	movs	r3, #3
 8001f48:	e004      	b.n	8001f54 <HAL_GPIO_Init+0x240>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e002      	b.n	8001f54 <HAL_GPIO_Init+0x240>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <HAL_GPIO_Init+0x240>
 8001f52:	2300      	movs	r3, #0
 8001f54:	69fa      	ldr	r2, [r7, #28]
 8001f56:	f002 0203 	and.w	r2, r2, #3
 8001f5a:	0092      	lsls	r2, r2, #2
 8001f5c:	4093      	lsls	r3, r2
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f64:	4935      	ldr	r1, [pc, #212]	; (800203c <HAL_GPIO_Init+0x328>)
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	089b      	lsrs	r3, r3, #2
 8001f6a:	3302      	adds	r3, #2
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f72:	4b3d      	ldr	r3, [pc, #244]	; (8002068 <HAL_GPIO_Init+0x354>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f96:	4a34      	ldr	r2, [pc, #208]	; (8002068 <HAL_GPIO_Init+0x354>)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f9c:	4b32      	ldr	r3, [pc, #200]	; (8002068 <HAL_GPIO_Init+0x354>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fc0:	4a29      	ldr	r2, [pc, #164]	; (8002068 <HAL_GPIO_Init+0x354>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fc6:	4b28      	ldr	r3, [pc, #160]	; (8002068 <HAL_GPIO_Init+0x354>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fea:	4a1f      	ldr	r2, [pc, #124]	; (8002068 <HAL_GPIO_Init+0x354>)
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ff0:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <HAL_GPIO_Init+0x354>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002014:	4a14      	ldr	r2, [pc, #80]	; (8002068 <HAL_GPIO_Init+0x354>)
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3301      	adds	r3, #1
 800201e:	61fb      	str	r3, [r7, #28]
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	2b0f      	cmp	r3, #15
 8002024:	f67f ae84 	bls.w	8001d30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002028:	bf00      	nop
 800202a:	bf00      	nop
 800202c:	3724      	adds	r7, #36	; 0x24
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40023800 	.word	0x40023800
 800203c:	40013800 	.word	0x40013800
 8002040:	40020000 	.word	0x40020000
 8002044:	40020400 	.word	0x40020400
 8002048:	40020800 	.word	0x40020800
 800204c:	40020c00 	.word	0x40020c00
 8002050:	40021000 	.word	0x40021000
 8002054:	40021400 	.word	0x40021400
 8002058:	40021800 	.word	0x40021800
 800205c:	40021c00 	.word	0x40021c00
 8002060:	40022000 	.word	0x40022000
 8002064:	40022400 	.word	0x40022400
 8002068:	40013c00 	.word	0x40013c00

0800206c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e267      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d075      	beq.n	8002176 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800208a:	4b88      	ldr	r3, [pc, #544]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b04      	cmp	r3, #4
 8002094:	d00c      	beq.n	80020b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002096:	4b85      	ldr	r3, [pc, #532]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d112      	bne.n	80020c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020a2:	4b82      	ldr	r3, [pc, #520]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ae:	d10b      	bne.n	80020c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b0:	4b7e      	ldr	r3, [pc, #504]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d05b      	beq.n	8002174 <HAL_RCC_OscConfig+0x108>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d157      	bne.n	8002174 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e242      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d0:	d106      	bne.n	80020e0 <HAL_RCC_OscConfig+0x74>
 80020d2:	4b76      	ldr	r3, [pc, #472]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a75      	ldr	r2, [pc, #468]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 80020d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	e01d      	b.n	800211c <HAL_RCC_OscConfig+0xb0>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020e8:	d10c      	bne.n	8002104 <HAL_RCC_OscConfig+0x98>
 80020ea:	4b70      	ldr	r3, [pc, #448]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a6f      	ldr	r2, [pc, #444]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 80020f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	4b6d      	ldr	r3, [pc, #436]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a6c      	ldr	r2, [pc, #432]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 80020fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	e00b      	b.n	800211c <HAL_RCC_OscConfig+0xb0>
 8002104:	4b69      	ldr	r3, [pc, #420]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a68      	ldr	r2, [pc, #416]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 800210a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800210e:	6013      	str	r3, [r2, #0]
 8002110:	4b66      	ldr	r3, [pc, #408]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a65      	ldr	r2, [pc, #404]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 8002116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800211a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d013      	beq.n	800214c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002124:	f7ff f992 	bl	800144c <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800212c:	f7ff f98e 	bl	800144c <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b64      	cmp	r3, #100	; 0x64
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e207      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	4b5b      	ldr	r3, [pc, #364]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0f0      	beq.n	800212c <HAL_RCC_OscConfig+0xc0>
 800214a:	e014      	b.n	8002176 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214c:	f7ff f97e 	bl	800144c <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002154:	f7ff f97a 	bl	800144c <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b64      	cmp	r3, #100	; 0x64
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e1f3      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002166:	4b51      	ldr	r3, [pc, #324]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0xe8>
 8002172:	e000      	b.n	8002176 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d063      	beq.n	800224a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002182:	4b4a      	ldr	r3, [pc, #296]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00b      	beq.n	80021a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800218e:	4b47      	ldr	r3, [pc, #284]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002196:	2b08      	cmp	r3, #8
 8002198:	d11c      	bne.n	80021d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800219a:	4b44      	ldr	r3, [pc, #272]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d116      	bne.n	80021d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a6:	4b41      	ldr	r3, [pc, #260]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d005      	beq.n	80021be <HAL_RCC_OscConfig+0x152>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d001      	beq.n	80021be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e1c7      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021be:	4b3b      	ldr	r3, [pc, #236]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4937      	ldr	r1, [pc, #220]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d2:	e03a      	b.n	800224a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d020      	beq.n	800221e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021dc:	4b34      	ldr	r3, [pc, #208]	; (80022b0 <HAL_RCC_OscConfig+0x244>)
 80021de:	2201      	movs	r2, #1
 80021e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e2:	f7ff f933 	bl	800144c <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ea:	f7ff f92f 	bl	800144c <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e1a8      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fc:	4b2b      	ldr	r3, [pc, #172]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0f0      	beq.n	80021ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002208:	4b28      	ldr	r3, [pc, #160]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4925      	ldr	r1, [pc, #148]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 8002218:	4313      	orrs	r3, r2
 800221a:	600b      	str	r3, [r1, #0]
 800221c:	e015      	b.n	800224a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800221e:	4b24      	ldr	r3, [pc, #144]	; (80022b0 <HAL_RCC_OscConfig+0x244>)
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002224:	f7ff f912 	bl	800144c <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800222c:	f7ff f90e 	bl	800144c <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e187      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223e:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b00      	cmp	r3, #0
 8002254:	d036      	beq.n	80022c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d016      	beq.n	800228c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800225e:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <HAL_RCC_OscConfig+0x248>)
 8002260:	2201      	movs	r2, #1
 8002262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002264:	f7ff f8f2 	bl	800144c <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800226c:	f7ff f8ee 	bl	800144c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e167      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227e:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_OscConfig+0x240>)
 8002280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0x200>
 800228a:	e01b      	b.n	80022c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800228c:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <HAL_RCC_OscConfig+0x248>)
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002292:	f7ff f8db 	bl	800144c <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002298:	e00e      	b.n	80022b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800229a:	f7ff f8d7 	bl	800144c <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d907      	bls.n	80022b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e150      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
 80022ac:	40023800 	.word	0x40023800
 80022b0:	42470000 	.word	0x42470000
 80022b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b8:	4b88      	ldr	r3, [pc, #544]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 80022ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1ea      	bne.n	800229a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 8097 	beq.w	8002400 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022d2:	2300      	movs	r3, #0
 80022d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022d6:	4b81      	ldr	r3, [pc, #516]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10f      	bne.n	8002302 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	4b7d      	ldr	r3, [pc, #500]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	4a7c      	ldr	r2, [pc, #496]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 80022ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f0:	6413      	str	r3, [r2, #64]	; 0x40
 80022f2:	4b7a      	ldr	r3, [pc, #488]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022fe:	2301      	movs	r3, #1
 8002300:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002302:	4b77      	ldr	r3, [pc, #476]	; (80024e0 <HAL_RCC_OscConfig+0x474>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230a:	2b00      	cmp	r3, #0
 800230c:	d118      	bne.n	8002340 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800230e:	4b74      	ldr	r3, [pc, #464]	; (80024e0 <HAL_RCC_OscConfig+0x474>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a73      	ldr	r2, [pc, #460]	; (80024e0 <HAL_RCC_OscConfig+0x474>)
 8002314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800231a:	f7ff f897 	bl	800144c <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002322:	f7ff f893 	bl	800144c <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e10c      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002334:	4b6a      	ldr	r3, [pc, #424]	; (80024e0 <HAL_RCC_OscConfig+0x474>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d106      	bne.n	8002356 <HAL_RCC_OscConfig+0x2ea>
 8002348:	4b64      	ldr	r3, [pc, #400]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 800234a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234c:	4a63      	ldr	r2, [pc, #396]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	6713      	str	r3, [r2, #112]	; 0x70
 8002354:	e01c      	b.n	8002390 <HAL_RCC_OscConfig+0x324>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	2b05      	cmp	r3, #5
 800235c:	d10c      	bne.n	8002378 <HAL_RCC_OscConfig+0x30c>
 800235e:	4b5f      	ldr	r3, [pc, #380]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 8002360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002362:	4a5e      	ldr	r2, [pc, #376]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 8002364:	f043 0304 	orr.w	r3, r3, #4
 8002368:	6713      	str	r3, [r2, #112]	; 0x70
 800236a:	4b5c      	ldr	r3, [pc, #368]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 800236c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236e:	4a5b      	ldr	r2, [pc, #364]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6713      	str	r3, [r2, #112]	; 0x70
 8002376:	e00b      	b.n	8002390 <HAL_RCC_OscConfig+0x324>
 8002378:	4b58      	ldr	r3, [pc, #352]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 800237a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237c:	4a57      	ldr	r2, [pc, #348]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 800237e:	f023 0301 	bic.w	r3, r3, #1
 8002382:	6713      	str	r3, [r2, #112]	; 0x70
 8002384:	4b55      	ldr	r3, [pc, #340]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 8002386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002388:	4a54      	ldr	r2, [pc, #336]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 800238a:	f023 0304 	bic.w	r3, r3, #4
 800238e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d015      	beq.n	80023c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002398:	f7ff f858 	bl	800144c <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239e:	e00a      	b.n	80023b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023a0:	f7ff f854 	bl	800144c <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e0cb      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b6:	4b49      	ldr	r3, [pc, #292]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 80023b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0ee      	beq.n	80023a0 <HAL_RCC_OscConfig+0x334>
 80023c2:	e014      	b.n	80023ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c4:	f7ff f842 	bl	800144c <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ca:	e00a      	b.n	80023e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023cc:	f7ff f83e 	bl	800144c <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e0b5      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e2:	4b3e      	ldr	r3, [pc, #248]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 80023e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1ee      	bne.n	80023cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023ee:	7dfb      	ldrb	r3, [r7, #23]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d105      	bne.n	8002400 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f4:	4b39      	ldr	r3, [pc, #228]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	4a38      	ldr	r2, [pc, #224]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 80023fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 80a1 	beq.w	800254c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800240a:	4b34      	ldr	r3, [pc, #208]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b08      	cmp	r3, #8
 8002414:	d05c      	beq.n	80024d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d141      	bne.n	80024a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241e:	4b31      	ldr	r3, [pc, #196]	; (80024e4 <HAL_RCC_OscConfig+0x478>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7ff f812 	bl	800144c <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800242c:	f7ff f80e 	bl	800144c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e087      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243e:	4b27      	ldr	r3, [pc, #156]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69da      	ldr	r2, [r3, #28]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	019b      	lsls	r3, r3, #6
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002460:	085b      	lsrs	r3, r3, #1
 8002462:	3b01      	subs	r3, #1
 8002464:	041b      	lsls	r3, r3, #16
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	061b      	lsls	r3, r3, #24
 800246e:	491b      	ldr	r1, [pc, #108]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 8002470:	4313      	orrs	r3, r2
 8002472:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002474:	4b1b      	ldr	r3, [pc, #108]	; (80024e4 <HAL_RCC_OscConfig+0x478>)
 8002476:	2201      	movs	r2, #1
 8002478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247a:	f7fe ffe7 	bl	800144c <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002482:	f7fe ffe3 	bl	800144c <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e05c      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002494:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0f0      	beq.n	8002482 <HAL_RCC_OscConfig+0x416>
 80024a0:	e054      	b.n	800254c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a2:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <HAL_RCC_OscConfig+0x478>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a8:	f7fe ffd0 	bl	800144c <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b0:	f7fe ffcc 	bl	800144c <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e045      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_RCC_OscConfig+0x470>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x444>
 80024ce:	e03d      	b.n	800254c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d107      	bne.n	80024e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e038      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40007000 	.word	0x40007000
 80024e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024e8:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_RCC_OscConfig+0x4ec>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d028      	beq.n	8002548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002500:	429a      	cmp	r2, r3
 8002502:	d121      	bne.n	8002548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d11a      	bne.n	8002548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002518:	4013      	ands	r3, r2
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800251e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002520:	4293      	cmp	r3, r2
 8002522:	d111      	bne.n	8002548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252e:	085b      	lsrs	r3, r3, #1
 8002530:	3b01      	subs	r3, #1
 8002532:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002534:	429a      	cmp	r2, r3
 8002536:	d107      	bne.n	8002548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002544:	429a      	cmp	r2, r3
 8002546:	d001      	beq.n	800254c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800

0800255c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0cc      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002570:	4b68      	ldr	r3, [pc, #416]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d90c      	bls.n	8002598 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b65      	ldr	r3, [pc, #404]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002586:	4b63      	ldr	r3, [pc, #396]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d001      	beq.n	8002598 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0b8      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d020      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b0:	4b59      	ldr	r3, [pc, #356]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	4a58      	ldr	r2, [pc, #352]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025c8:	4b53      	ldr	r3, [pc, #332]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	4a52      	ldr	r2, [pc, #328]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d4:	4b50      	ldr	r3, [pc, #320]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	494d      	ldr	r1, [pc, #308]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d044      	beq.n	800267c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d107      	bne.n	800260a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	4b47      	ldr	r3, [pc, #284]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d119      	bne.n	800263a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e07f      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d003      	beq.n	800261a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002616:	2b03      	cmp	r3, #3
 8002618:	d107      	bne.n	800262a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261a:	4b3f      	ldr	r3, [pc, #252]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d109      	bne.n	800263a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e06f      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262a:	4b3b      	ldr	r3, [pc, #236]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e067      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263a:	4b37      	ldr	r3, [pc, #220]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f023 0203 	bic.w	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4934      	ldr	r1, [pc, #208]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 8002648:	4313      	orrs	r3, r2
 800264a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800264c:	f7fe fefe 	bl	800144c <HAL_GetTick>
 8002650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002652:	e00a      	b.n	800266a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002654:	f7fe fefa 	bl	800144c <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e04f      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266a:	4b2b      	ldr	r3, [pc, #172]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 020c 	and.w	r2, r3, #12
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	429a      	cmp	r2, r3
 800267a:	d1eb      	bne.n	8002654 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800267c:	4b25      	ldr	r3, [pc, #148]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 030f 	and.w	r3, r3, #15
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d20c      	bcs.n	80026a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b22      	ldr	r3, [pc, #136]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002692:	4b20      	ldr	r3, [pc, #128]	; (8002714 <HAL_RCC_ClockConfig+0x1b8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e032      	b.n	800270a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b0:	4b19      	ldr	r3, [pc, #100]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	4916      	ldr	r1, [pc, #88]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d009      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	490e      	ldr	r1, [pc, #56]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026e2:	f000 f821 	bl	8002728 <HAL_RCC_GetSysClockFreq>
 80026e6:	4602      	mov	r2, r0
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	490a      	ldr	r1, [pc, #40]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	5ccb      	ldrb	r3, [r1, r3]
 80026f6:	fa22 f303 	lsr.w	r3, r2, r3
 80026fa:	4a09      	ldr	r2, [pc, #36]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026fe:	4b09      	ldr	r3, [pc, #36]	; (8002724 <HAL_RCC_ClockConfig+0x1c8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7fe fb82 	bl	8000e0c <HAL_InitTick>

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40023c00 	.word	0x40023c00
 8002718:	40023800 	.word	0x40023800
 800271c:	08006084 	.word	0x08006084
 8002720:	20000024 	.word	0x20000024
 8002724:	20000028 	.word	0x20000028

08002728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800272c:	b090      	sub	sp, #64	; 0x40
 800272e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	637b      	str	r3, [r7, #52]	; 0x34
 8002734:	2300      	movs	r3, #0
 8002736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002738:	2300      	movs	r3, #0
 800273a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002740:	4b59      	ldr	r3, [pc, #356]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 030c 	and.w	r3, r3, #12
 8002748:	2b08      	cmp	r3, #8
 800274a:	d00d      	beq.n	8002768 <HAL_RCC_GetSysClockFreq+0x40>
 800274c:	2b08      	cmp	r3, #8
 800274e:	f200 80a1 	bhi.w	8002894 <HAL_RCC_GetSysClockFreq+0x16c>
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <HAL_RCC_GetSysClockFreq+0x34>
 8002756:	2b04      	cmp	r3, #4
 8002758:	d003      	beq.n	8002762 <HAL_RCC_GetSysClockFreq+0x3a>
 800275a:	e09b      	b.n	8002894 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800275c:	4b53      	ldr	r3, [pc, #332]	; (80028ac <HAL_RCC_GetSysClockFreq+0x184>)
 800275e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002760:	e09b      	b.n	800289a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002762:	4b53      	ldr	r3, [pc, #332]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002764:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002766:	e098      	b.n	800289a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002768:	4b4f      	ldr	r3, [pc, #316]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002770:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002772:	4b4d      	ldr	r3, [pc, #308]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d028      	beq.n	80027d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800277e:	4b4a      	ldr	r3, [pc, #296]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	099b      	lsrs	r3, r3, #6
 8002784:	2200      	movs	r2, #0
 8002786:	623b      	str	r3, [r7, #32]
 8002788:	627a      	str	r2, [r7, #36]	; 0x24
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002790:	2100      	movs	r1, #0
 8002792:	4b47      	ldr	r3, [pc, #284]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002794:	fb03 f201 	mul.w	r2, r3, r1
 8002798:	2300      	movs	r3, #0
 800279a:	fb00 f303 	mul.w	r3, r0, r3
 800279e:	4413      	add	r3, r2
 80027a0:	4a43      	ldr	r2, [pc, #268]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80027a2:	fba0 1202 	umull	r1, r2, r0, r2
 80027a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027a8:	460a      	mov	r2, r1
 80027aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80027ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ae:	4413      	add	r3, r2
 80027b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b4:	2200      	movs	r2, #0
 80027b6:	61bb      	str	r3, [r7, #24]
 80027b8:	61fa      	str	r2, [r7, #28]
 80027ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80027c2:	f7fd fd1d 	bl	8000200 <__aeabi_uldivmod>
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	4613      	mov	r3, r2
 80027cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027ce:	e053      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027d0:	4b35      	ldr	r3, [pc, #212]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	099b      	lsrs	r3, r3, #6
 80027d6:	2200      	movs	r2, #0
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	617a      	str	r2, [r7, #20]
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80027e2:	f04f 0b00 	mov.w	fp, #0
 80027e6:	4652      	mov	r2, sl
 80027e8:	465b      	mov	r3, fp
 80027ea:	f04f 0000 	mov.w	r0, #0
 80027ee:	f04f 0100 	mov.w	r1, #0
 80027f2:	0159      	lsls	r1, r3, #5
 80027f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027f8:	0150      	lsls	r0, r2, #5
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	ebb2 080a 	subs.w	r8, r2, sl
 8002802:	eb63 090b 	sbc.w	r9, r3, fp
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002812:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002816:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800281a:	ebb2 0408 	subs.w	r4, r2, r8
 800281e:	eb63 0509 	sbc.w	r5, r3, r9
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	f04f 0300 	mov.w	r3, #0
 800282a:	00eb      	lsls	r3, r5, #3
 800282c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002830:	00e2      	lsls	r2, r4, #3
 8002832:	4614      	mov	r4, r2
 8002834:	461d      	mov	r5, r3
 8002836:	eb14 030a 	adds.w	r3, r4, sl
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	eb45 030b 	adc.w	r3, r5, fp
 8002840:	607b      	str	r3, [r7, #4]
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800284e:	4629      	mov	r1, r5
 8002850:	028b      	lsls	r3, r1, #10
 8002852:	4621      	mov	r1, r4
 8002854:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002858:	4621      	mov	r1, r4
 800285a:	028a      	lsls	r2, r1, #10
 800285c:	4610      	mov	r0, r2
 800285e:	4619      	mov	r1, r3
 8002860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002862:	2200      	movs	r2, #0
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	60fa      	str	r2, [r7, #12]
 8002868:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800286c:	f7fd fcc8 	bl	8000200 <__aeabi_uldivmod>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4613      	mov	r3, r2
 8002876:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002878:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	0c1b      	lsrs	r3, r3, #16
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	3301      	adds	r3, #1
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002888:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800288a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002890:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002892:	e002      	b.n	800289a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <HAL_RCC_GetSysClockFreq+0x184>)
 8002896:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800289a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800289c:	4618      	mov	r0, r3
 800289e:	3740      	adds	r7, #64	; 0x40
 80028a0:	46bd      	mov	sp, r7
 80028a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028a6:	bf00      	nop
 80028a8:	40023800 	.word	0x40023800
 80028ac:	00f42400 	.word	0x00f42400
 80028b0:	017d7840 	.word	0x017d7840

080028b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b8:	4b03      	ldr	r3, [pc, #12]	; (80028c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028ba:	681b      	ldr	r3, [r3, #0]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	20000024 	.word	0x20000024

080028cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028d0:	f7ff fff0 	bl	80028b4 <HAL_RCC_GetHCLKFreq>
 80028d4:	4602      	mov	r2, r0
 80028d6:	4b05      	ldr	r3, [pc, #20]	; (80028ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	0a9b      	lsrs	r3, r3, #10
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	4903      	ldr	r1, [pc, #12]	; (80028f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028e2:	5ccb      	ldrb	r3, [r1, r3]
 80028e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40023800 	.word	0x40023800
 80028f0:	08006094 	.word	0x08006094

080028f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028f8:	f7ff ffdc 	bl	80028b4 <HAL_RCC_GetHCLKFreq>
 80028fc:	4602      	mov	r2, r0
 80028fe:	4b05      	ldr	r3, [pc, #20]	; (8002914 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	0b5b      	lsrs	r3, r3, #13
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	4903      	ldr	r1, [pc, #12]	; (8002918 <HAL_RCC_GetPCLK2Freq+0x24>)
 800290a:	5ccb      	ldrb	r3, [r1, r3]
 800290c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002910:	4618      	mov	r0, r3
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40023800 	.word	0x40023800
 8002918:	08006094 	.word	0x08006094

0800291c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	220f      	movs	r2, #15
 800292a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800292c:	4b12      	ldr	r3, [pc, #72]	; (8002978 <HAL_RCC_GetClockConfig+0x5c>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 0203 	and.w	r2, r3, #3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002938:	4b0f      	ldr	r3, [pc, #60]	; (8002978 <HAL_RCC_GetClockConfig+0x5c>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002944:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <HAL_RCC_GetClockConfig+0x5c>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002950:	4b09      	ldr	r3, [pc, #36]	; (8002978 <HAL_RCC_GetClockConfig+0x5c>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	08db      	lsrs	r3, r3, #3
 8002956:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800295e:	4b07      	ldr	r3, [pc, #28]	; (800297c <HAL_RCC_GetClockConfig+0x60>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 020f 	and.w	r2, r3, #15
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	601a      	str	r2, [r3, #0]
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40023800 	.word	0x40023800
 800297c:	40023c00 	.word	0x40023c00

08002980 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002986:	f7fe fd61 	bl	800144c <HAL_GetTick>
 800298a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800298c:	4b72      	ldr	r3, [pc, #456]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a71      	ldr	r2, [pc, #452]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002998:	e008      	b.n	80029ac <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800299a:	f7fe fd57 	bl	800144c <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e0d0      	b.n	8002b4e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80029ac:	4b6a      	ldr	r3, [pc, #424]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f0      	beq.n	800299a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80029b8:	4b67      	ldr	r3, [pc, #412]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a66      	ldr	r2, [pc, #408]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 80029be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80029c4:	f7fe fd42 	bl	800144c <HAL_GetTick>
 80029c8:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80029ca:	4b63      	ldr	r3, [pc, #396]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80029d0:	e00a      	b.n	80029e8 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d2:	f7fe fd3b 	bl	800144c <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e0b2      	b.n	8002b4e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80029e8:	4b5b      	ldr	r3, [pc, #364]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 030c 	and.w	r3, r3, #12
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1ee      	bne.n	80029d2 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80029f4:	f7fe fd2a 	bl	800144c <HAL_GetTick>
 80029f8:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80029fa:	4b57      	ldr	r3, [pc, #348]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a56      	ldr	r2, [pc, #344]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002a00:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8002a04:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a08:	f7fe fd20 	bl	800144c <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b64      	cmp	r3, #100	; 0x64
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e099      	b.n	8002b4e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002a1a:	4b4f      	ldr	r3, [pc, #316]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002a26:	f7fe fd11 	bl	800144c <HAL_GetTick>
 8002a2a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002a2c:	4b4a      	ldr	r3, [pc, #296]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a49      	ldr	r2, [pc, #292]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002a32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a36:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3a:	f7fe fd07 	bl	800144c <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e080      	b.n	8002b4e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002a4c:	4b42      	ldr	r3, [pc, #264]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1f0      	bne.n	8002a3a <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002a58:	f7fe fcf8 	bl	800144c <HAL_GetTick>
 8002a5c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002a5e:	4b3e      	ldr	r3, [pc, #248]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a3d      	ldr	r2, [pc, #244]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002a64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a68:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a6c:	f7fe fcee 	bl	800144c <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e067      	b.n	8002b4e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002a7e:	4b36      	ldr	r3, [pc, #216]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002a8a:	f7fe fcdf 	bl	800144c <HAL_GetTick>
 8002a8e:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8002a90:	4b31      	ldr	r3, [pc, #196]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a30      	ldr	r2, [pc, #192]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a9a:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a9e:	f7fe fcd5 	bl	800144c <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e04e      	b.n	8002b4e <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002ab0:	4b29      	ldr	r3, [pc, #164]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1f0      	bne.n	8002a9e <HAL_RCC_DeInit+0x11e>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8002abc:	4b26      	ldr	r3, [pc, #152]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002abe:	4a27      	ldr	r2, [pc, #156]	; (8002b5c <HAL_RCC_DeInit+0x1dc>)
 8002ac0:	605a      	str	r2, [r3, #4]
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002ac2:	4b25      	ldr	r3, [pc, #148]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002ac4:	4a26      	ldr	r2, [pc, #152]	; (8002b60 <HAL_RCC_DeInit+0x1e0>)
 8002ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
 8002aca:	4b23      	ldr	r3, [pc, #140]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002acc:	4a24      	ldr	r2, [pc, #144]	; (8002b60 <HAL_RCC_DeInit+0x1e0>)
 8002ace:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002ad2:	4b21      	ldr	r3, [pc, #132]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	4a20      	ldr	r2, [pc, #128]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002ad8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002adc:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002ade:	4b1e      	ldr	r3, [pc, #120]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	4a1d      	ldr	r2, [pc, #116]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002ae4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ae8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8002aea:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	4a1a      	ldr	r2, [pc, #104]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002af0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002af4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8002af6:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	4a17      	ldr	r2, [pc, #92]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002afc:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8002b00:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002b02:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	4a14      	ldr	r2, [pc, #80]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002b08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b0c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8002b0e:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	4a11      	ldr	r2, [pc, #68]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002b14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b18:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002b1a:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1e:	4a0e      	ldr	r2, [pc, #56]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002b20:	f023 0301 	bic.w	r3, r3, #1
 8002b24:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002b26:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2a:	4a0b      	ldr	r2, [pc, #44]	; (8002b58 <HAL_RCC_DeInit+0x1d8>)
 8002b2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b30:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002b32:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <HAL_RCC_DeInit+0x1e4>)
 8002b34:	4a0c      	ldr	r2, [pc, #48]	; (8002b68 <HAL_RCC_DeInit+0x1e8>)
 8002b36:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <HAL_RCC_DeInit+0x1ec>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fe f965 	bl	8000e0c <HAL_InitTick>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
  }
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	04003010 	.word	0x04003010
 8002b60:	24003000 	.word	0x24003000
 8002b64:	20000024 	.word	0x20000024
 8002b68:	00f42400 	.word	0x00f42400
 8002b6c:	20000028 	.word	0x20000028

08002b70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e07b      	b.n	8002c7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d108      	bne.n	8002b9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b92:	d009      	beq.n	8002ba8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	61da      	str	r2, [r3, #28]
 8002b9a:	e005      	b.n	8002ba8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d106      	bne.n	8002bc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7fe f872 	bl	8000cac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	431a      	orrs	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2c:	ea42 0103 	orr.w	r1, r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	0c1b      	lsrs	r3, r3, #16
 8002c46:	f003 0104 	and.w	r1, r3, #4
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	f003 0210 	and.w	r2, r3, #16
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	69da      	ldr	r2, [r3, #28]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e041      	b.n	8002d18 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d106      	bne.n	8002cae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f839 	bl	8002d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	f000 f9d7 	bl	8003074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d001      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e04e      	b.n	8002dea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0201 	orr.w	r2, r2, #1
 8002d62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a23      	ldr	r2, [pc, #140]	; (8002df8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d022      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x80>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d76:	d01d      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x80>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a1f      	ldr	r2, [pc, #124]	; (8002dfc <HAL_TIM_Base_Start_IT+0xc8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d018      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x80>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a1e      	ldr	r2, [pc, #120]	; (8002e00 <HAL_TIM_Base_Start_IT+0xcc>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d013      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x80>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a1c      	ldr	r2, [pc, #112]	; (8002e04 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d00e      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x80>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d009      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x80>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a19      	ldr	r2, [pc, #100]	; (8002e0c <HAL_TIM_Base_Start_IT+0xd8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d004      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x80>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a18      	ldr	r2, [pc, #96]	; (8002e10 <HAL_TIM_Base_Start_IT+0xdc>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d111      	bne.n	8002dd8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b06      	cmp	r3, #6
 8002dc4:	d010      	beq.n	8002de8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 0201 	orr.w	r2, r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd6:	e007      	b.n	8002de8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40010000 	.word	0x40010000
 8002dfc:	40000400 	.word	0x40000400
 8002e00:	40000800 	.word	0x40000800
 8002e04:	40000c00 	.word	0x40000c00
 8002e08:	40010400 	.word	0x40010400
 8002e0c:	40014000 	.word	0x40014000
 8002e10:	40001800 	.word	0x40001800

08002e14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d122      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d11b      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f06f 0202 	mvn.w	r2, #2
 8002e40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f8ee 	bl	8003038 <HAL_TIM_IC_CaptureCallback>
 8002e5c:	e005      	b.n	8002e6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f8e0 	bl	8003024 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f8f1 	bl	800304c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d122      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d11b      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f06f 0204 	mvn.w	r2, #4
 8002e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2202      	movs	r2, #2
 8002e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f8c4 	bl	8003038 <HAL_TIM_IC_CaptureCallback>
 8002eb0:	e005      	b.n	8002ebe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f8b6 	bl	8003024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f8c7 	bl	800304c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d122      	bne.n	8002f18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d11b      	bne.n	8002f18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f06f 0208 	mvn.w	r2, #8
 8002ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2204      	movs	r2, #4
 8002eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f89a 	bl	8003038 <HAL_TIM_IC_CaptureCallback>
 8002f04:	e005      	b.n	8002f12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f88c 	bl	8003024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f89d 	bl	800304c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f003 0310 	and.w	r3, r3, #16
 8002f22:	2b10      	cmp	r3, #16
 8002f24:	d122      	bne.n	8002f6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f003 0310 	and.w	r3, r3, #16
 8002f30:	2b10      	cmp	r3, #16
 8002f32:	d11b      	bne.n	8002f6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f06f 0210 	mvn.w	r2, #16
 8002f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2208      	movs	r2, #8
 8002f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f870 	bl	8003038 <HAL_TIM_IC_CaptureCallback>
 8002f58:	e005      	b.n	8002f66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f862 	bl	8003024 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f873 	bl	800304c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d10e      	bne.n	8002f98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d107      	bne.n	8002f98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f06f 0201 	mvn.w	r2, #1
 8002f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7fd fe46 	bl	8000c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa2:	2b80      	cmp	r3, #128	; 0x80
 8002fa4:	d10e      	bne.n	8002fc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb0:	2b80      	cmp	r3, #128	; 0x80
 8002fb2:	d107      	bne.n	8002fc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f902 	bl	80031c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fce:	2b40      	cmp	r3, #64	; 0x40
 8002fd0:	d10e      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fdc:	2b40      	cmp	r3, #64	; 0x40
 8002fde:	d107      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f838 	bl	8003060 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f003 0320 	and.w	r3, r3, #32
 8002ffa:	2b20      	cmp	r3, #32
 8002ffc:	d10e      	bne.n	800301c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 0320 	and.w	r3, r3, #32
 8003008:	2b20      	cmp	r3, #32
 800300a:	d107      	bne.n	800301c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0220 	mvn.w	r2, #32
 8003014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f8cc 	bl	80031b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800301c:	bf00      	nop
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a40      	ldr	r2, [pc, #256]	; (8003188 <TIM_Base_SetConfig+0x114>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d013      	beq.n	80030b4 <TIM_Base_SetConfig+0x40>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003092:	d00f      	beq.n	80030b4 <TIM_Base_SetConfig+0x40>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a3d      	ldr	r2, [pc, #244]	; (800318c <TIM_Base_SetConfig+0x118>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d00b      	beq.n	80030b4 <TIM_Base_SetConfig+0x40>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a3c      	ldr	r2, [pc, #240]	; (8003190 <TIM_Base_SetConfig+0x11c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d007      	beq.n	80030b4 <TIM_Base_SetConfig+0x40>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a3b      	ldr	r2, [pc, #236]	; (8003194 <TIM_Base_SetConfig+0x120>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d003      	beq.n	80030b4 <TIM_Base_SetConfig+0x40>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a3a      	ldr	r2, [pc, #232]	; (8003198 <TIM_Base_SetConfig+0x124>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d108      	bne.n	80030c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a2f      	ldr	r2, [pc, #188]	; (8003188 <TIM_Base_SetConfig+0x114>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d02b      	beq.n	8003126 <TIM_Base_SetConfig+0xb2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d4:	d027      	beq.n	8003126 <TIM_Base_SetConfig+0xb2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a2c      	ldr	r2, [pc, #176]	; (800318c <TIM_Base_SetConfig+0x118>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d023      	beq.n	8003126 <TIM_Base_SetConfig+0xb2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a2b      	ldr	r2, [pc, #172]	; (8003190 <TIM_Base_SetConfig+0x11c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d01f      	beq.n	8003126 <TIM_Base_SetConfig+0xb2>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a2a      	ldr	r2, [pc, #168]	; (8003194 <TIM_Base_SetConfig+0x120>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d01b      	beq.n	8003126 <TIM_Base_SetConfig+0xb2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a29      	ldr	r2, [pc, #164]	; (8003198 <TIM_Base_SetConfig+0x124>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d017      	beq.n	8003126 <TIM_Base_SetConfig+0xb2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a28      	ldr	r2, [pc, #160]	; (800319c <TIM_Base_SetConfig+0x128>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d013      	beq.n	8003126 <TIM_Base_SetConfig+0xb2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a27      	ldr	r2, [pc, #156]	; (80031a0 <TIM_Base_SetConfig+0x12c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00f      	beq.n	8003126 <TIM_Base_SetConfig+0xb2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a26      	ldr	r2, [pc, #152]	; (80031a4 <TIM_Base_SetConfig+0x130>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d00b      	beq.n	8003126 <TIM_Base_SetConfig+0xb2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a25      	ldr	r2, [pc, #148]	; (80031a8 <TIM_Base_SetConfig+0x134>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d007      	beq.n	8003126 <TIM_Base_SetConfig+0xb2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a24      	ldr	r2, [pc, #144]	; (80031ac <TIM_Base_SetConfig+0x138>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d003      	beq.n	8003126 <TIM_Base_SetConfig+0xb2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a23      	ldr	r2, [pc, #140]	; (80031b0 <TIM_Base_SetConfig+0x13c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d108      	bne.n	8003138 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800312c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	4313      	orrs	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	4313      	orrs	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a0a      	ldr	r2, [pc, #40]	; (8003188 <TIM_Base_SetConfig+0x114>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d003      	beq.n	800316c <TIM_Base_SetConfig+0xf8>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a0c      	ldr	r2, [pc, #48]	; (8003198 <TIM_Base_SetConfig+0x124>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d103      	bne.n	8003174 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	615a      	str	r2, [r3, #20]
}
 800317a:	bf00      	nop
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40010000 	.word	0x40010000
 800318c:	40000400 	.word	0x40000400
 8003190:	40000800 	.word	0x40000800
 8003194:	40000c00 	.word	0x40000c00
 8003198:	40010400 	.word	0x40010400
 800319c:	40014000 	.word	0x40014000
 80031a0:	40014400 	.word	0x40014400
 80031a4:	40014800 	.word	0x40014800
 80031a8:	40001800 	.word	0x40001800
 80031ac:	40001c00 	.word	0x40001c00
 80031b0:	40002000 	.word	0x40002000

080031b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e03f      	b.n	800326e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d106      	bne.n	8003208 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7fd fd9a 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2224      	movs	r2, #36	; 0x24
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800321e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f829 	bl	8003278 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003234:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695a      	ldr	r2, [r3, #20]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003244:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003254:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2220      	movs	r2, #32
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
	...

08003278 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800327c:	b0c0      	sub	sp, #256	; 0x100
 800327e:	af00      	add	r7, sp, #0
 8003280:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003294:	68d9      	ldr	r1, [r3, #12]
 8003296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	ea40 0301 	orr.w	r3, r0, r1
 80032a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80032c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80032d0:	f021 010c 	bic.w	r1, r1, #12
 80032d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032de:	430b      	orrs	r3, r1
 80032e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80032ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f2:	6999      	ldr	r1, [r3, #24]
 80032f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	ea40 0301 	orr.w	r3, r0, r1
 80032fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	4b8f      	ldr	r3, [pc, #572]	; (8003544 <UART_SetConfig+0x2cc>)
 8003308:	429a      	cmp	r2, r3
 800330a:	d005      	beq.n	8003318 <UART_SetConfig+0xa0>
 800330c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	4b8d      	ldr	r3, [pc, #564]	; (8003548 <UART_SetConfig+0x2d0>)
 8003314:	429a      	cmp	r2, r3
 8003316:	d104      	bne.n	8003322 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003318:	f7ff faec 	bl	80028f4 <HAL_RCC_GetPCLK2Freq>
 800331c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003320:	e003      	b.n	800332a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003322:	f7ff fad3 	bl	80028cc <HAL_RCC_GetPCLK1Freq>
 8003326:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800332a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003334:	f040 810c 	bne.w	8003550 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003338:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800333c:	2200      	movs	r2, #0
 800333e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003342:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003346:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800334a:	4622      	mov	r2, r4
 800334c:	462b      	mov	r3, r5
 800334e:	1891      	adds	r1, r2, r2
 8003350:	65b9      	str	r1, [r7, #88]	; 0x58
 8003352:	415b      	adcs	r3, r3
 8003354:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003356:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800335a:	4621      	mov	r1, r4
 800335c:	eb12 0801 	adds.w	r8, r2, r1
 8003360:	4629      	mov	r1, r5
 8003362:	eb43 0901 	adc.w	r9, r3, r1
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003372:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003376:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800337a:	4690      	mov	r8, r2
 800337c:	4699      	mov	r9, r3
 800337e:	4623      	mov	r3, r4
 8003380:	eb18 0303 	adds.w	r3, r8, r3
 8003384:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003388:	462b      	mov	r3, r5
 800338a:	eb49 0303 	adc.w	r3, r9, r3
 800338e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800339e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80033a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80033a6:	460b      	mov	r3, r1
 80033a8:	18db      	adds	r3, r3, r3
 80033aa:	653b      	str	r3, [r7, #80]	; 0x50
 80033ac:	4613      	mov	r3, r2
 80033ae:	eb42 0303 	adc.w	r3, r2, r3
 80033b2:	657b      	str	r3, [r7, #84]	; 0x54
 80033b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80033b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80033bc:	f7fc ff20 	bl	8000200 <__aeabi_uldivmod>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4b61      	ldr	r3, [pc, #388]	; (800354c <UART_SetConfig+0x2d4>)
 80033c6:	fba3 2302 	umull	r2, r3, r3, r2
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	011c      	lsls	r4, r3, #4
 80033ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033d2:	2200      	movs	r2, #0
 80033d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80033dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80033e0:	4642      	mov	r2, r8
 80033e2:	464b      	mov	r3, r9
 80033e4:	1891      	adds	r1, r2, r2
 80033e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80033e8:	415b      	adcs	r3, r3
 80033ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80033f0:	4641      	mov	r1, r8
 80033f2:	eb12 0a01 	adds.w	sl, r2, r1
 80033f6:	4649      	mov	r1, r9
 80033f8:	eb43 0b01 	adc.w	fp, r3, r1
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003408:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800340c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003410:	4692      	mov	sl, r2
 8003412:	469b      	mov	fp, r3
 8003414:	4643      	mov	r3, r8
 8003416:	eb1a 0303 	adds.w	r3, sl, r3
 800341a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800341e:	464b      	mov	r3, r9
 8003420:	eb4b 0303 	adc.w	r3, fp, r3
 8003424:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003434:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003438:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800343c:	460b      	mov	r3, r1
 800343e:	18db      	adds	r3, r3, r3
 8003440:	643b      	str	r3, [r7, #64]	; 0x40
 8003442:	4613      	mov	r3, r2
 8003444:	eb42 0303 	adc.w	r3, r2, r3
 8003448:	647b      	str	r3, [r7, #68]	; 0x44
 800344a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800344e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003452:	f7fc fed5 	bl	8000200 <__aeabi_uldivmod>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	4611      	mov	r1, r2
 800345c:	4b3b      	ldr	r3, [pc, #236]	; (800354c <UART_SetConfig+0x2d4>)
 800345e:	fba3 2301 	umull	r2, r3, r3, r1
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	2264      	movs	r2, #100	; 0x64
 8003466:	fb02 f303 	mul.w	r3, r2, r3
 800346a:	1acb      	subs	r3, r1, r3
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003472:	4b36      	ldr	r3, [pc, #216]	; (800354c <UART_SetConfig+0x2d4>)
 8003474:	fba3 2302 	umull	r2, r3, r3, r2
 8003478:	095b      	lsrs	r3, r3, #5
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003480:	441c      	add	r4, r3
 8003482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003486:	2200      	movs	r2, #0
 8003488:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800348c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003490:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003494:	4642      	mov	r2, r8
 8003496:	464b      	mov	r3, r9
 8003498:	1891      	adds	r1, r2, r2
 800349a:	63b9      	str	r1, [r7, #56]	; 0x38
 800349c:	415b      	adcs	r3, r3
 800349e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034a4:	4641      	mov	r1, r8
 80034a6:	1851      	adds	r1, r2, r1
 80034a8:	6339      	str	r1, [r7, #48]	; 0x30
 80034aa:	4649      	mov	r1, r9
 80034ac:	414b      	adcs	r3, r1
 80034ae:	637b      	str	r3, [r7, #52]	; 0x34
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80034bc:	4659      	mov	r1, fp
 80034be:	00cb      	lsls	r3, r1, #3
 80034c0:	4651      	mov	r1, sl
 80034c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034c6:	4651      	mov	r1, sl
 80034c8:	00ca      	lsls	r2, r1, #3
 80034ca:	4610      	mov	r0, r2
 80034cc:	4619      	mov	r1, r3
 80034ce:	4603      	mov	r3, r0
 80034d0:	4642      	mov	r2, r8
 80034d2:	189b      	adds	r3, r3, r2
 80034d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034d8:	464b      	mov	r3, r9
 80034da:	460a      	mov	r2, r1
 80034dc:	eb42 0303 	adc.w	r3, r2, r3
 80034e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80034f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80034f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80034f8:	460b      	mov	r3, r1
 80034fa:	18db      	adds	r3, r3, r3
 80034fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80034fe:	4613      	mov	r3, r2
 8003500:	eb42 0303 	adc.w	r3, r2, r3
 8003504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003506:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800350a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800350e:	f7fc fe77 	bl	8000200 <__aeabi_uldivmod>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4b0d      	ldr	r3, [pc, #52]	; (800354c <UART_SetConfig+0x2d4>)
 8003518:	fba3 1302 	umull	r1, r3, r3, r2
 800351c:	095b      	lsrs	r3, r3, #5
 800351e:	2164      	movs	r1, #100	; 0x64
 8003520:	fb01 f303 	mul.w	r3, r1, r3
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	3332      	adds	r3, #50	; 0x32
 800352a:	4a08      	ldr	r2, [pc, #32]	; (800354c <UART_SetConfig+0x2d4>)
 800352c:	fba2 2303 	umull	r2, r3, r2, r3
 8003530:	095b      	lsrs	r3, r3, #5
 8003532:	f003 0207 	and.w	r2, r3, #7
 8003536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4422      	add	r2, r4
 800353e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003540:	e105      	b.n	800374e <UART_SetConfig+0x4d6>
 8003542:	bf00      	nop
 8003544:	40011000 	.word	0x40011000
 8003548:	40011400 	.word	0x40011400
 800354c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003550:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003554:	2200      	movs	r2, #0
 8003556:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800355a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800355e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003562:	4642      	mov	r2, r8
 8003564:	464b      	mov	r3, r9
 8003566:	1891      	adds	r1, r2, r2
 8003568:	6239      	str	r1, [r7, #32]
 800356a:	415b      	adcs	r3, r3
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
 800356e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003572:	4641      	mov	r1, r8
 8003574:	1854      	adds	r4, r2, r1
 8003576:	4649      	mov	r1, r9
 8003578:	eb43 0501 	adc.w	r5, r3, r1
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	f04f 0300 	mov.w	r3, #0
 8003584:	00eb      	lsls	r3, r5, #3
 8003586:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800358a:	00e2      	lsls	r2, r4, #3
 800358c:	4614      	mov	r4, r2
 800358e:	461d      	mov	r5, r3
 8003590:	4643      	mov	r3, r8
 8003592:	18e3      	adds	r3, r4, r3
 8003594:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003598:	464b      	mov	r3, r9
 800359a:	eb45 0303 	adc.w	r3, r5, r3
 800359e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80035be:	4629      	mov	r1, r5
 80035c0:	008b      	lsls	r3, r1, #2
 80035c2:	4621      	mov	r1, r4
 80035c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035c8:	4621      	mov	r1, r4
 80035ca:	008a      	lsls	r2, r1, #2
 80035cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80035d0:	f7fc fe16 	bl	8000200 <__aeabi_uldivmod>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4b60      	ldr	r3, [pc, #384]	; (800375c <UART_SetConfig+0x4e4>)
 80035da:	fba3 2302 	umull	r2, r3, r3, r2
 80035de:	095b      	lsrs	r3, r3, #5
 80035e0:	011c      	lsls	r4, r3, #4
 80035e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035e6:	2200      	movs	r2, #0
 80035e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80035f4:	4642      	mov	r2, r8
 80035f6:	464b      	mov	r3, r9
 80035f8:	1891      	adds	r1, r2, r2
 80035fa:	61b9      	str	r1, [r7, #24]
 80035fc:	415b      	adcs	r3, r3
 80035fe:	61fb      	str	r3, [r7, #28]
 8003600:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003604:	4641      	mov	r1, r8
 8003606:	1851      	adds	r1, r2, r1
 8003608:	6139      	str	r1, [r7, #16]
 800360a:	4649      	mov	r1, r9
 800360c:	414b      	adcs	r3, r1
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800361c:	4659      	mov	r1, fp
 800361e:	00cb      	lsls	r3, r1, #3
 8003620:	4651      	mov	r1, sl
 8003622:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003626:	4651      	mov	r1, sl
 8003628:	00ca      	lsls	r2, r1, #3
 800362a:	4610      	mov	r0, r2
 800362c:	4619      	mov	r1, r3
 800362e:	4603      	mov	r3, r0
 8003630:	4642      	mov	r2, r8
 8003632:	189b      	adds	r3, r3, r2
 8003634:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003638:	464b      	mov	r3, r9
 800363a:	460a      	mov	r2, r1
 800363c:	eb42 0303 	adc.w	r3, r2, r3
 8003640:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	67bb      	str	r3, [r7, #120]	; 0x78
 800364e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800365c:	4649      	mov	r1, r9
 800365e:	008b      	lsls	r3, r1, #2
 8003660:	4641      	mov	r1, r8
 8003662:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003666:	4641      	mov	r1, r8
 8003668:	008a      	lsls	r2, r1, #2
 800366a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800366e:	f7fc fdc7 	bl	8000200 <__aeabi_uldivmod>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	4b39      	ldr	r3, [pc, #228]	; (800375c <UART_SetConfig+0x4e4>)
 8003678:	fba3 1302 	umull	r1, r3, r3, r2
 800367c:	095b      	lsrs	r3, r3, #5
 800367e:	2164      	movs	r1, #100	; 0x64
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	3332      	adds	r3, #50	; 0x32
 800368a:	4a34      	ldr	r2, [pc, #208]	; (800375c <UART_SetConfig+0x4e4>)
 800368c:	fba2 2303 	umull	r2, r3, r2, r3
 8003690:	095b      	lsrs	r3, r3, #5
 8003692:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003696:	441c      	add	r4, r3
 8003698:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800369c:	2200      	movs	r2, #0
 800369e:	673b      	str	r3, [r7, #112]	; 0x70
 80036a0:	677a      	str	r2, [r7, #116]	; 0x74
 80036a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036a6:	4642      	mov	r2, r8
 80036a8:	464b      	mov	r3, r9
 80036aa:	1891      	adds	r1, r2, r2
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	415b      	adcs	r3, r3
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036b6:	4641      	mov	r1, r8
 80036b8:	1851      	adds	r1, r2, r1
 80036ba:	6039      	str	r1, [r7, #0]
 80036bc:	4649      	mov	r1, r9
 80036be:	414b      	adcs	r3, r1
 80036c0:	607b      	str	r3, [r7, #4]
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036ce:	4659      	mov	r1, fp
 80036d0:	00cb      	lsls	r3, r1, #3
 80036d2:	4651      	mov	r1, sl
 80036d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036d8:	4651      	mov	r1, sl
 80036da:	00ca      	lsls	r2, r1, #3
 80036dc:	4610      	mov	r0, r2
 80036de:	4619      	mov	r1, r3
 80036e0:	4603      	mov	r3, r0
 80036e2:	4642      	mov	r2, r8
 80036e4:	189b      	adds	r3, r3, r2
 80036e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80036e8:	464b      	mov	r3, r9
 80036ea:	460a      	mov	r2, r1
 80036ec:	eb42 0303 	adc.w	r3, r2, r3
 80036f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	663b      	str	r3, [r7, #96]	; 0x60
 80036fc:	667a      	str	r2, [r7, #100]	; 0x64
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800370a:	4649      	mov	r1, r9
 800370c:	008b      	lsls	r3, r1, #2
 800370e:	4641      	mov	r1, r8
 8003710:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003714:	4641      	mov	r1, r8
 8003716:	008a      	lsls	r2, r1, #2
 8003718:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800371c:	f7fc fd70 	bl	8000200 <__aeabi_uldivmod>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4b0d      	ldr	r3, [pc, #52]	; (800375c <UART_SetConfig+0x4e4>)
 8003726:	fba3 1302 	umull	r1, r3, r3, r2
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	2164      	movs	r1, #100	; 0x64
 800372e:	fb01 f303 	mul.w	r3, r1, r3
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	3332      	adds	r3, #50	; 0x32
 8003738:	4a08      	ldr	r2, [pc, #32]	; (800375c <UART_SetConfig+0x4e4>)
 800373a:	fba2 2303 	umull	r2, r3, r2, r3
 800373e:	095b      	lsrs	r3, r3, #5
 8003740:	f003 020f 	and.w	r2, r3, #15
 8003744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4422      	add	r2, r4
 800374c:	609a      	str	r2, [r3, #8]
}
 800374e:	bf00      	nop
 8003750:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003754:	46bd      	mov	sp, r7
 8003756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800375a:	bf00      	nop
 800375c:	51eb851f 	.word	0x51eb851f

08003760 <__NVIC_SetPriority>:
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	4603      	mov	r3, r0
 8003768:	6039      	str	r1, [r7, #0]
 800376a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800376c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003770:	2b00      	cmp	r3, #0
 8003772:	db0a      	blt.n	800378a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	b2da      	uxtb	r2, r3
 8003778:	490c      	ldr	r1, [pc, #48]	; (80037ac <__NVIC_SetPriority+0x4c>)
 800377a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377e:	0112      	lsls	r2, r2, #4
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	440b      	add	r3, r1
 8003784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003788:	e00a      	b.n	80037a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	b2da      	uxtb	r2, r3
 800378e:	4908      	ldr	r1, [pc, #32]	; (80037b0 <__NVIC_SetPriority+0x50>)
 8003790:	79fb      	ldrb	r3, [r7, #7]
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	3b04      	subs	r3, #4
 8003798:	0112      	lsls	r2, r2, #4
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	440b      	add	r3, r1
 800379e:	761a      	strb	r2, [r3, #24]
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	e000e100 	.word	0xe000e100
 80037b0:	e000ed00 	.word	0xe000ed00

080037b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <SysTick_Handler+0x1c>)
 80037ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80037bc:	f001 fc02 	bl	8004fc4 <xTaskGetSchedulerState>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d001      	beq.n	80037ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80037c6:	f002 f9e7 	bl	8005b98 <xPortSysTickHandler>
  }
}
 80037ca:	bf00      	nop
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	e000e010 	.word	0xe000e010

080037d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80037d8:	2100      	movs	r1, #0
 80037da:	f06f 0004 	mvn.w	r0, #4
 80037de:	f7ff ffbf 	bl	8003760 <__NVIC_SetPriority>
#endif
}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037ee:	f3ef 8305 	mrs	r3, IPSR
 80037f2:	603b      	str	r3, [r7, #0]
  return(result);
 80037f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80037fa:	f06f 0305 	mvn.w	r3, #5
 80037fe:	607b      	str	r3, [r7, #4]
 8003800:	e00c      	b.n	800381c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003802:	4b0a      	ldr	r3, [pc, #40]	; (800382c <osKernelInitialize+0x44>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d105      	bne.n	8003816 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800380a:	4b08      	ldr	r3, [pc, #32]	; (800382c <osKernelInitialize+0x44>)
 800380c:	2201      	movs	r2, #1
 800380e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003810:	2300      	movs	r3, #0
 8003812:	607b      	str	r3, [r7, #4]
 8003814:	e002      	b.n	800381c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003816:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800381a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800381c:	687b      	ldr	r3, [r7, #4]
}
 800381e:	4618      	mov	r0, r3
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	20000a3c 	.word	0x20000a3c

08003830 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003836:	f3ef 8305 	mrs	r3, IPSR
 800383a:	603b      	str	r3, [r7, #0]
  return(result);
 800383c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003842:	f06f 0305 	mvn.w	r3, #5
 8003846:	607b      	str	r3, [r7, #4]
 8003848:	e010      	b.n	800386c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800384a:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <osKernelStart+0x48>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d109      	bne.n	8003866 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003852:	f7ff ffbf 	bl	80037d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003856:	4b08      	ldr	r3, [pc, #32]	; (8003878 <osKernelStart+0x48>)
 8003858:	2202      	movs	r2, #2
 800385a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800385c:	f000 ff56 	bl	800470c <vTaskStartScheduler>
      stat = osOK;
 8003860:	2300      	movs	r3, #0
 8003862:	607b      	str	r3, [r7, #4]
 8003864:	e002      	b.n	800386c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800386a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800386c:	687b      	ldr	r3, [r7, #4]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20000a3c 	.word	0x20000a3c

0800387c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4a07      	ldr	r2, [pc, #28]	; (80038a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800388c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	4a06      	ldr	r2, [pc, #24]	; (80038ac <vApplicationGetIdleTaskMemory+0x30>)
 8003892:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2280      	movs	r2, #128	; 0x80
 8003898:	601a      	str	r2, [r3, #0]
}
 800389a:	bf00      	nop
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	20000a40 	.word	0x20000a40
 80038ac:	20000afc 	.word	0x20000afc

080038b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4a07      	ldr	r2, [pc, #28]	; (80038dc <vApplicationGetTimerTaskMemory+0x2c>)
 80038c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	4a06      	ldr	r2, [pc, #24]	; (80038e0 <vApplicationGetTimerTaskMemory+0x30>)
 80038c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038ce:	601a      	str	r2, [r3, #0]
}
 80038d0:	bf00      	nop
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	20000cfc 	.word	0x20000cfc
 80038e0:	20000db8 	.word	0x20000db8

080038e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f103 0208 	add.w	r2, r3, #8
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f103 0208 	add.w	r2, r3, #8
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f103 0208 	add.w	r2, r3, #8
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800393e:	b480      	push	{r7}
 8003940:	b085      	sub	sp, #20
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	601a      	str	r2, [r3, #0]
}
 800397a:	bf00      	nop
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003986:	b480      	push	{r7}
 8003988:	b085      	sub	sp, #20
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800399c:	d103      	bne.n	80039a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	e00c      	b.n	80039c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3308      	adds	r3, #8
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	e002      	b.n	80039b4 <vListInsert+0x2e>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d2f6      	bcs.n	80039ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	601a      	str	r2, [r3, #0]
}
 80039ec:	bf00      	nop
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6892      	ldr	r2, [r2, #8]
 8003a0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6852      	ldr	r2, [r2, #4]
 8003a18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d103      	bne.n	8003a2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	1e5a      	subs	r2, r3, #1
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10a      	bne.n	8003a76 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a64:	f383 8811 	msr	BASEPRI, r3
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003a72:	bf00      	nop
 8003a74:	e7fe      	b.n	8003a74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003a76:	f001 fffd 	bl	8005a74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a82:	68f9      	ldr	r1, [r7, #12]
 8003a84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a86:	fb01 f303 	mul.w	r3, r1, r3
 8003a8a:	441a      	add	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	68f9      	ldr	r1, [r7, #12]
 8003aaa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003aac:	fb01 f303 	mul.w	r3, r1, r3
 8003ab0:	441a      	add	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	22ff      	movs	r2, #255	; 0xff
 8003aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	22ff      	movs	r2, #255	; 0xff
 8003ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d114      	bne.n	8003af6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d01a      	beq.n	8003b0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	3310      	adds	r3, #16
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f001 f8b1 	bl	8004c40 <xTaskRemoveFromEventList>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d012      	beq.n	8003b0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <xQueueGenericReset+0xcc>)
 8003ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	f3bf 8f6f 	isb	sy
 8003af4:	e009      	b.n	8003b0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	3310      	adds	r3, #16
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff fef2 	bl	80038e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	3324      	adds	r3, #36	; 0x24
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff feed 	bl	80038e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003b0a:	f001 ffe3 	bl	8005ad4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003b0e:	2301      	movs	r3, #1
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	e000ed04 	.word	0xe000ed04

08003b1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08e      	sub	sp, #56	; 0x38
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b42:	bf00      	nop
 8003b44:	e7fe      	b.n	8003b44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10a      	bne.n	8003b62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b50:	f383 8811 	msr	BASEPRI, r3
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b5e:	bf00      	nop
 8003b60:	e7fe      	b.n	8003b60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <xQueueGenericCreateStatic+0x52>
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <xQueueGenericCreateStatic+0x56>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <xQueueGenericCreateStatic+0x58>
 8003b72:	2300      	movs	r3, #0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10a      	bne.n	8003b8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	623b      	str	r3, [r7, #32]
}
 8003b8a:	bf00      	nop
 8003b8c:	e7fe      	b.n	8003b8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d102      	bne.n	8003b9a <xQueueGenericCreateStatic+0x7e>
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <xQueueGenericCreateStatic+0x82>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <xQueueGenericCreateStatic+0x84>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10a      	bne.n	8003bba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba8:	f383 8811 	msr	BASEPRI, r3
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	61fb      	str	r3, [r7, #28]
}
 8003bb6:	bf00      	nop
 8003bb8:	e7fe      	b.n	8003bb8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003bba:	2350      	movs	r3, #80	; 0x50
 8003bbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2b50      	cmp	r3, #80	; 0x50
 8003bc2:	d00a      	beq.n	8003bda <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	61bb      	str	r3, [r7, #24]
}
 8003bd6:	bf00      	nop
 8003bd8:	e7fe      	b.n	8003bd8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003bda:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00d      	beq.n	8003c02 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003bee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	68b9      	ldr	r1, [r7, #8]
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 f805 	bl	8003c0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3730      	adds	r7, #48	; 0x30
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d103      	bne.n	8003c28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	e002      	b.n	8003c2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	69b8      	ldr	r0, [r7, #24]
 8003c3e:	f7ff ff05 	bl	8003a4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	78fa      	ldrb	r2, [r7, #3]
 8003c46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003c4a:	bf00      	nop
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
	...

08003c54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08e      	sub	sp, #56	; 0x38
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c62:	2300      	movs	r3, #0
 8003c64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10a      	bne.n	8003c86 <xQueueGenericSend+0x32>
	__asm volatile
 8003c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c82:	bf00      	nop
 8003c84:	e7fe      	b.n	8003c84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d103      	bne.n	8003c94 <xQueueGenericSend+0x40>
 8003c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <xQueueGenericSend+0x44>
 8003c94:	2301      	movs	r3, #1
 8003c96:	e000      	b.n	8003c9a <xQueueGenericSend+0x46>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10a      	bne.n	8003cb4 <xQueueGenericSend+0x60>
	__asm volatile
 8003c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003cb0:	bf00      	nop
 8003cb2:	e7fe      	b.n	8003cb2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d103      	bne.n	8003cc2 <xQueueGenericSend+0x6e>
 8003cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <xQueueGenericSend+0x72>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <xQueueGenericSend+0x74>
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10a      	bne.n	8003ce2 <xQueueGenericSend+0x8e>
	__asm volatile
 8003ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	623b      	str	r3, [r7, #32]
}
 8003cde:	bf00      	nop
 8003ce0:	e7fe      	b.n	8003ce0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ce2:	f001 f96f 	bl	8004fc4 <xTaskGetSchedulerState>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d102      	bne.n	8003cf2 <xQueueGenericSend+0x9e>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <xQueueGenericSend+0xa2>
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e000      	b.n	8003cf8 <xQueueGenericSend+0xa4>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10a      	bne.n	8003d12 <xQueueGenericSend+0xbe>
	__asm volatile
 8003cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d00:	f383 8811 	msr	BASEPRI, r3
 8003d04:	f3bf 8f6f 	isb	sy
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	61fb      	str	r3, [r7, #28]
}
 8003d0e:	bf00      	nop
 8003d10:	e7fe      	b.n	8003d10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d12:	f001 feaf 	bl	8005a74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d302      	bcc.n	8003d28 <xQueueGenericSend+0xd4>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d129      	bne.n	8003d7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	68b9      	ldr	r1, [r7, #8]
 8003d2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d2e:	f000 fa0b 	bl	8004148 <prvCopyDataToQueue>
 8003d32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d010      	beq.n	8003d5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3e:	3324      	adds	r3, #36	; 0x24
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 ff7d 	bl	8004c40 <xTaskRemoveFromEventList>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d013      	beq.n	8003d74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d4c:	4b3f      	ldr	r3, [pc, #252]	; (8003e4c <xQueueGenericSend+0x1f8>)
 8003d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	f3bf 8f6f 	isb	sy
 8003d5c:	e00a      	b.n	8003d74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d007      	beq.n	8003d74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d64:	4b39      	ldr	r3, [pc, #228]	; (8003e4c <xQueueGenericSend+0x1f8>)
 8003d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d74:	f001 feae 	bl	8005ad4 <vPortExitCritical>
				return pdPASS;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e063      	b.n	8003e44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d103      	bne.n	8003d8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d82:	f001 fea7 	bl	8005ad4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	e05c      	b.n	8003e44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d106      	bne.n	8003d9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d90:	f107 0314 	add.w	r3, r7, #20
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 ffb7 	bl	8004d08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d9e:	f001 fe99 	bl	8005ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003da2:	f000 fd23 	bl	80047ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003da6:	f001 fe65 	bl	8005a74 <vPortEnterCritical>
 8003daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003db0:	b25b      	sxtb	r3, r3
 8003db2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003db6:	d103      	bne.n	8003dc0 <xQueueGenericSend+0x16c>
 8003db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dc6:	b25b      	sxtb	r3, r3
 8003dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dcc:	d103      	bne.n	8003dd6 <xQueueGenericSend+0x182>
 8003dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dd6:	f001 fe7d 	bl	8005ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003dda:	1d3a      	adds	r2, r7, #4
 8003ddc:	f107 0314 	add.w	r3, r7, #20
 8003de0:	4611      	mov	r1, r2
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 ffa6 	bl	8004d34 <xTaskCheckForTimeOut>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d124      	bne.n	8003e38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003dee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003df0:	f000 faa2 	bl	8004338 <prvIsQueueFull>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d018      	beq.n	8003e2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfc:	3310      	adds	r3, #16
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	4611      	mov	r1, r2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fecc 	bl	8004ba0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003e08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e0a:	f000 fa2d 	bl	8004268 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003e0e:	f000 fcfb 	bl	8004808 <xTaskResumeAll>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f47f af7c 	bne.w	8003d12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003e1a:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <xQueueGenericSend+0x1f8>)
 8003e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	f3bf 8f4f 	dsb	sy
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	e772      	b.n	8003d12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e2e:	f000 fa1b 	bl	8004268 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e32:	f000 fce9 	bl	8004808 <xTaskResumeAll>
 8003e36:	e76c      	b.n	8003d12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003e38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e3a:	f000 fa15 	bl	8004268 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e3e:	f000 fce3 	bl	8004808 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003e42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3738      	adds	r7, #56	; 0x38
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	e000ed04 	.word	0xe000ed04

08003e50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b090      	sub	sp, #64	; 0x40
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10a      	bne.n	8003e7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6c:	f383 8811 	msr	BASEPRI, r3
 8003e70:	f3bf 8f6f 	isb	sy
 8003e74:	f3bf 8f4f 	dsb	sy
 8003e78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e7a:	bf00      	nop
 8003e7c:	e7fe      	b.n	8003e7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d103      	bne.n	8003e8c <xQueueGenericSendFromISR+0x3c>
 8003e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <xQueueGenericSendFromISR+0x40>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e000      	b.n	8003e92 <xQueueGenericSendFromISR+0x42>
 8003e90:	2300      	movs	r3, #0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10a      	bne.n	8003eac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ea8:	bf00      	nop
 8003eaa:	e7fe      	b.n	8003eaa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d103      	bne.n	8003eba <xQueueGenericSendFromISR+0x6a>
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <xQueueGenericSendFromISR+0x6e>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <xQueueGenericSendFromISR+0x70>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10a      	bne.n	8003eda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	623b      	str	r3, [r7, #32]
}
 8003ed6:	bf00      	nop
 8003ed8:	e7fe      	b.n	8003ed8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003eda:	f001 fead 	bl	8005c38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003ede:	f3ef 8211 	mrs	r2, BASEPRI
 8003ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee6:	f383 8811 	msr	BASEPRI, r3
 8003eea:	f3bf 8f6f 	isb	sy
 8003eee:	f3bf 8f4f 	dsb	sy
 8003ef2:	61fa      	str	r2, [r7, #28]
 8003ef4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003ef6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ef8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d302      	bcc.n	8003f0c <xQueueGenericSendFromISR+0xbc>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d12f      	bne.n	8003f6c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	68b9      	ldr	r1, [r7, #8]
 8003f20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003f22:	f000 f911 	bl	8004148 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003f26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003f2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f2e:	d112      	bne.n	8003f56 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d016      	beq.n	8003f66 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3a:	3324      	adds	r3, #36	; 0x24
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 fe7f 	bl	8004c40 <xTaskRemoveFromEventList>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00e      	beq.n	8003f66 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00b      	beq.n	8003f66 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	e007      	b.n	8003f66 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	b25a      	sxtb	r2, r3
 8003f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003f66:	2301      	movs	r3, #1
 8003f68:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003f6a:	e001      	b.n	8003f70 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f72:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003f7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3740      	adds	r7, #64	; 0x40
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08c      	sub	sp, #48	; 0x30
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003f94:	2300      	movs	r3, #0
 8003f96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10a      	bne.n	8003fb8 <xQueueReceive+0x30>
	__asm volatile
 8003fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa6:	f383 8811 	msr	BASEPRI, r3
 8003faa:	f3bf 8f6f 	isb	sy
 8003fae:	f3bf 8f4f 	dsb	sy
 8003fb2:	623b      	str	r3, [r7, #32]
}
 8003fb4:	bf00      	nop
 8003fb6:	e7fe      	b.n	8003fb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d103      	bne.n	8003fc6 <xQueueReceive+0x3e>
 8003fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <xQueueReceive+0x42>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <xQueueReceive+0x44>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10a      	bne.n	8003fe6 <xQueueReceive+0x5e>
	__asm volatile
 8003fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	61fb      	str	r3, [r7, #28]
}
 8003fe2:	bf00      	nop
 8003fe4:	e7fe      	b.n	8003fe4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fe6:	f000 ffed 	bl	8004fc4 <xTaskGetSchedulerState>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d102      	bne.n	8003ff6 <xQueueReceive+0x6e>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <xQueueReceive+0x72>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <xQueueReceive+0x74>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10a      	bne.n	8004016 <xQueueReceive+0x8e>
	__asm volatile
 8004000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	61bb      	str	r3, [r7, #24]
}
 8004012:	bf00      	nop
 8004014:	e7fe      	b.n	8004014 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004016:	f001 fd2d 	bl	8005a74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	2b00      	cmp	r3, #0
 8004024:	d01f      	beq.n	8004066 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800402a:	f000 f8f7 	bl	800421c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	1e5a      	subs	r2, r3, #1
 8004032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004034:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00f      	beq.n	800405e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800403e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004040:	3310      	adds	r3, #16
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fdfc 	bl	8004c40 <xTaskRemoveFromEventList>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d007      	beq.n	800405e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800404e:	4b3d      	ldr	r3, [pc, #244]	; (8004144 <xQueueReceive+0x1bc>)
 8004050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800405e:	f001 fd39 	bl	8005ad4 <vPortExitCritical>
				return pdPASS;
 8004062:	2301      	movs	r3, #1
 8004064:	e069      	b.n	800413a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d103      	bne.n	8004074 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800406c:	f001 fd32 	bl	8005ad4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004070:	2300      	movs	r3, #0
 8004072:	e062      	b.n	800413a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800407a:	f107 0310 	add.w	r3, r7, #16
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fe42 	bl	8004d08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004084:	2301      	movs	r3, #1
 8004086:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004088:	f001 fd24 	bl	8005ad4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800408c:	f000 fbae 	bl	80047ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004090:	f001 fcf0 	bl	8005a74 <vPortEnterCritical>
 8004094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004096:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800409a:	b25b      	sxtb	r3, r3
 800409c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040a0:	d103      	bne.n	80040aa <xQueueReceive+0x122>
 80040a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040b0:	b25b      	sxtb	r3, r3
 80040b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040b6:	d103      	bne.n	80040c0 <xQueueReceive+0x138>
 80040b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040c0:	f001 fd08 	bl	8005ad4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040c4:	1d3a      	adds	r2, r7, #4
 80040c6:	f107 0310 	add.w	r3, r7, #16
 80040ca:	4611      	mov	r1, r2
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 fe31 	bl	8004d34 <xTaskCheckForTimeOut>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d123      	bne.n	8004120 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040da:	f000 f917 	bl	800430c <prvIsQueueEmpty>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d017      	beq.n	8004114 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e6:	3324      	adds	r3, #36	; 0x24
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	4611      	mov	r1, r2
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 fd57 	bl	8004ba0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80040f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040f4:	f000 f8b8 	bl	8004268 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80040f8:	f000 fb86 	bl	8004808 <xTaskResumeAll>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d189      	bne.n	8004016 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004102:	4b10      	ldr	r3, [pc, #64]	; (8004144 <xQueueReceive+0x1bc>)
 8004104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	e780      	b.n	8004016 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004116:	f000 f8a7 	bl	8004268 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800411a:	f000 fb75 	bl	8004808 <xTaskResumeAll>
 800411e:	e77a      	b.n	8004016 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004122:	f000 f8a1 	bl	8004268 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004126:	f000 fb6f 	bl	8004808 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800412a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800412c:	f000 f8ee 	bl	800430c <prvIsQueueEmpty>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	f43f af6f 	beq.w	8004016 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004138:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800413a:	4618      	mov	r0, r3
 800413c:	3730      	adds	r7, #48	; 0x30
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	e000ed04 	.word	0xe000ed04

08004148 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004154:	2300      	movs	r3, #0
 8004156:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10d      	bne.n	8004182 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d14d      	bne.n	800420a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	4618      	mov	r0, r3
 8004174:	f000 ff44 	bl	8005000 <xTaskPriorityDisinherit>
 8004178:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	609a      	str	r2, [r3, #8]
 8004180:	e043      	b.n	800420a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d119      	bne.n	80041bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6858      	ldr	r0, [r3, #4]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004190:	461a      	mov	r2, r3
 8004192:	68b9      	ldr	r1, [r7, #8]
 8004194:	f001 fe72 	bl	8005e7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	441a      	add	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d32b      	bcc.n	800420a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	605a      	str	r2, [r3, #4]
 80041ba:	e026      	b.n	800420a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	68d8      	ldr	r0, [r3, #12]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	461a      	mov	r2, r3
 80041c6:	68b9      	ldr	r1, [r7, #8]
 80041c8:	f001 fe58 	bl	8005e7c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	425b      	negs	r3, r3
 80041d6:	441a      	add	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d207      	bcs.n	80041f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	425b      	negs	r3, r3
 80041f2:	441a      	add	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d105      	bne.n	800420a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	3b01      	subs	r3, #1
 8004208:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004212:	697b      	ldr	r3, [r7, #20]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	2b00      	cmp	r3, #0
 800422c:	d018      	beq.n	8004260 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	441a      	add	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	429a      	cmp	r2, r3
 8004246:	d303      	bcc.n	8004250 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68d9      	ldr	r1, [r3, #12]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	461a      	mov	r2, r3
 800425a:	6838      	ldr	r0, [r7, #0]
 800425c:	f001 fe0e 	bl	8005e7c <memcpy>
	}
}
 8004260:	bf00      	nop
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004270:	f001 fc00 	bl	8005a74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800427a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800427c:	e011      	b.n	80042a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	2b00      	cmp	r3, #0
 8004284:	d012      	beq.n	80042ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3324      	adds	r3, #36	; 0x24
 800428a:	4618      	mov	r0, r3
 800428c:	f000 fcd8 	bl	8004c40 <xTaskRemoveFromEventList>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004296:	f000 fdaf 	bl	8004df8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800429a:	7bfb      	ldrb	r3, [r7, #15]
 800429c:	3b01      	subs	r3, #1
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	dce9      	bgt.n	800427e <prvUnlockQueue+0x16>
 80042aa:	e000      	b.n	80042ae <prvUnlockQueue+0x46>
					break;
 80042ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	22ff      	movs	r2, #255	; 0xff
 80042b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80042b6:	f001 fc0d 	bl	8005ad4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80042ba:	f001 fbdb 	bl	8005a74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042c6:	e011      	b.n	80042ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d012      	beq.n	80042f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3310      	adds	r3, #16
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 fcb3 	bl	8004c40 <xTaskRemoveFromEventList>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80042e0:	f000 fd8a 	bl	8004df8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80042e4:	7bbb      	ldrb	r3, [r7, #14]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	dce9      	bgt.n	80042c8 <prvUnlockQueue+0x60>
 80042f4:	e000      	b.n	80042f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80042f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	22ff      	movs	r2, #255	; 0xff
 80042fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004300:	f001 fbe8 	bl	8005ad4 <vPortExitCritical>
}
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004314:	f001 fbae 	bl	8005a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431c:	2b00      	cmp	r3, #0
 800431e:	d102      	bne.n	8004326 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004320:	2301      	movs	r3, #1
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	e001      	b.n	800432a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800432a:	f001 fbd3 	bl	8005ad4 <vPortExitCritical>

	return xReturn;
 800432e:	68fb      	ldr	r3, [r7, #12]
}
 8004330:	4618      	mov	r0, r3
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004340:	f001 fb98 	bl	8005a74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434c:	429a      	cmp	r2, r3
 800434e:	d102      	bne.n	8004356 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004350:	2301      	movs	r3, #1
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	e001      	b.n	800435a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800435a:	f001 fbbb 	bl	8005ad4 <vPortExitCritical>

	return xReturn;
 800435e:	68fb      	ldr	r3, [r7, #12]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	e014      	b.n	80043a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004378:	4a0f      	ldr	r2, [pc, #60]	; (80043b8 <vQueueAddToRegistry+0x50>)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10b      	bne.n	800439c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004384:	490c      	ldr	r1, [pc, #48]	; (80043b8 <vQueueAddToRegistry+0x50>)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800438e:	4a0a      	ldr	r2, [pc, #40]	; (80043b8 <vQueueAddToRegistry+0x50>)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	4413      	add	r3, r2
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800439a:	e006      	b.n	80043aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3301      	adds	r3, #1
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2b07      	cmp	r3, #7
 80043a6:	d9e7      	bls.n	8004378 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80043a8:	bf00      	nop
 80043aa:	bf00      	nop
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	200011b8 	.word	0x200011b8

080043bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80043cc:	f001 fb52 	bl	8005a74 <vPortEnterCritical>
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043d6:	b25b      	sxtb	r3, r3
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043dc:	d103      	bne.n	80043e6 <vQueueWaitForMessageRestricted+0x2a>
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043ec:	b25b      	sxtb	r3, r3
 80043ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043f2:	d103      	bne.n	80043fc <vQueueWaitForMessageRestricted+0x40>
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043fc:	f001 fb6a 	bl	8005ad4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	2b00      	cmp	r3, #0
 8004406:	d106      	bne.n	8004416 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	3324      	adds	r3, #36	; 0x24
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	68b9      	ldr	r1, [r7, #8]
 8004410:	4618      	mov	r0, r3
 8004412:	f000 fbe9 	bl	8004be8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004416:	6978      	ldr	r0, [r7, #20]
 8004418:	f7ff ff26 	bl	8004268 <prvUnlockQueue>
	}
 800441c:	bf00      	nop
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004424:	b580      	push	{r7, lr}
 8004426:	b08e      	sub	sp, #56	; 0x38
 8004428:	af04      	add	r7, sp, #16
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
 8004430:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10a      	bne.n	800444e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	623b      	str	r3, [r7, #32]
}
 800444a:	bf00      	nop
 800444c:	e7fe      	b.n	800444c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800444e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10a      	bne.n	800446a <xTaskCreateStatic+0x46>
	__asm volatile
 8004454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004458:	f383 8811 	msr	BASEPRI, r3
 800445c:	f3bf 8f6f 	isb	sy
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	61fb      	str	r3, [r7, #28]
}
 8004466:	bf00      	nop
 8004468:	e7fe      	b.n	8004468 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800446a:	23bc      	movs	r3, #188	; 0xbc
 800446c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	2bbc      	cmp	r3, #188	; 0xbc
 8004472:	d00a      	beq.n	800448a <xTaskCreateStatic+0x66>
	__asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	61bb      	str	r3, [r7, #24]
}
 8004486:	bf00      	nop
 8004488:	e7fe      	b.n	8004488 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800448a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800448c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448e:	2b00      	cmp	r3, #0
 8004490:	d01e      	beq.n	80044d0 <xTaskCreateStatic+0xac>
 8004492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01b      	beq.n	80044d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	2202      	movs	r2, #2
 80044a6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80044aa:	2300      	movs	r3, #0
 80044ac:	9303      	str	r3, [sp, #12]
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	9302      	str	r3, [sp, #8]
 80044b2:	f107 0314 	add.w	r3, r7, #20
 80044b6:	9301      	str	r3, [sp, #4]
 80044b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	68b9      	ldr	r1, [r7, #8]
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 f80c 	bl	80044e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044ca:	f000 f8af 	bl	800462c <prvAddNewTaskToReadyList>
 80044ce:	e001      	b.n	80044d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80044d4:	697b      	ldr	r3, [r7, #20]
	}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3728      	adds	r7, #40	; 0x28
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b088      	sub	sp, #32
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
 80044ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80044ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	461a      	mov	r2, r3
 80044f8:	21a5      	movs	r1, #165	; 0xa5
 80044fa:	f001 fccd 	bl	8005e98 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004508:	3b01      	subs	r3, #1
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	f023 0307 	bic.w	r3, r3, #7
 8004516:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	617b      	str	r3, [r7, #20]
}
 8004534:	bf00      	nop
 8004536:	e7fe      	b.n	8004536 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d01f      	beq.n	800457e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800453e:	2300      	movs	r3, #0
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	e012      	b.n	800456a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	4413      	add	r3, r2
 800454a:	7819      	ldrb	r1, [r3, #0]
 800454c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	4413      	add	r3, r2
 8004552:	3334      	adds	r3, #52	; 0x34
 8004554:	460a      	mov	r2, r1
 8004556:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	4413      	add	r3, r2
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d006      	beq.n	8004572 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	3301      	adds	r3, #1
 8004568:	61fb      	str	r3, [r7, #28]
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	2b0f      	cmp	r3, #15
 800456e:	d9e9      	bls.n	8004544 <prvInitialiseNewTask+0x64>
 8004570:	e000      	b.n	8004574 <prvInitialiseNewTask+0x94>
			{
				break;
 8004572:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800457c:	e003      	b.n	8004586 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800457e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004588:	2b37      	cmp	r3, #55	; 0x37
 800458a:	d901      	bls.n	8004590 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800458c:	2337      	movs	r3, #55	; 0x37
 800458e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004594:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800459a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459e:	2200      	movs	r2, #0
 80045a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80045a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a4:	3304      	adds	r3, #4
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7ff f9bc 	bl	8003924 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	3318      	adds	r3, #24
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff f9b7 	bl	8003924 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80045b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80045c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80045c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80045cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ce:	2200      	movs	r2, #0
 80045d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80045dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045de:	3354      	adds	r3, #84	; 0x54
 80045e0:	2260      	movs	r2, #96	; 0x60
 80045e2:	2100      	movs	r1, #0
 80045e4:	4618      	mov	r0, r3
 80045e6:	f001 fc57 	bl	8005e98 <memset>
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	4a0c      	ldr	r2, [pc, #48]	; (8004620 <prvInitialiseNewTask+0x140>)
 80045ee:	659a      	str	r2, [r3, #88]	; 0x58
 80045f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f2:	4a0c      	ldr	r2, [pc, #48]	; (8004624 <prvInitialiseNewTask+0x144>)
 80045f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	4a0b      	ldr	r2, [pc, #44]	; (8004628 <prvInitialiseNewTask+0x148>)
 80045fa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	68f9      	ldr	r1, [r7, #12]
 8004600:	69b8      	ldr	r0, [r7, #24]
 8004602:	f001 f90d 	bl	8005820 <pxPortInitialiseStack>
 8004606:	4602      	mov	r2, r0
 8004608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800460c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004616:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004618:	bf00      	nop
 800461a:	3720      	adds	r7, #32
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	080060bc 	.word	0x080060bc
 8004624:	080060dc 	.word	0x080060dc
 8004628:	0800609c 	.word	0x0800609c

0800462c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004634:	f001 fa1e 	bl	8005a74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004638:	4b2d      	ldr	r3, [pc, #180]	; (80046f0 <prvAddNewTaskToReadyList+0xc4>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	3301      	adds	r3, #1
 800463e:	4a2c      	ldr	r2, [pc, #176]	; (80046f0 <prvAddNewTaskToReadyList+0xc4>)
 8004640:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004642:	4b2c      	ldr	r3, [pc, #176]	; (80046f4 <prvAddNewTaskToReadyList+0xc8>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d109      	bne.n	800465e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800464a:	4a2a      	ldr	r2, [pc, #168]	; (80046f4 <prvAddNewTaskToReadyList+0xc8>)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004650:	4b27      	ldr	r3, [pc, #156]	; (80046f0 <prvAddNewTaskToReadyList+0xc4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d110      	bne.n	800467a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004658:	f000 fbf2 	bl	8004e40 <prvInitialiseTaskLists>
 800465c:	e00d      	b.n	800467a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800465e:	4b26      	ldr	r3, [pc, #152]	; (80046f8 <prvAddNewTaskToReadyList+0xcc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d109      	bne.n	800467a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004666:	4b23      	ldr	r3, [pc, #140]	; (80046f4 <prvAddNewTaskToReadyList+0xc8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	429a      	cmp	r2, r3
 8004672:	d802      	bhi.n	800467a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004674:	4a1f      	ldr	r2, [pc, #124]	; (80046f4 <prvAddNewTaskToReadyList+0xc8>)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800467a:	4b20      	ldr	r3, [pc, #128]	; (80046fc <prvAddNewTaskToReadyList+0xd0>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3301      	adds	r3, #1
 8004680:	4a1e      	ldr	r2, [pc, #120]	; (80046fc <prvAddNewTaskToReadyList+0xd0>)
 8004682:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004684:	4b1d      	ldr	r3, [pc, #116]	; (80046fc <prvAddNewTaskToReadyList+0xd0>)
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004690:	4b1b      	ldr	r3, [pc, #108]	; (8004700 <prvAddNewTaskToReadyList+0xd4>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	d903      	bls.n	80046a0 <prvAddNewTaskToReadyList+0x74>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	4a18      	ldr	r2, [pc, #96]	; (8004700 <prvAddNewTaskToReadyList+0xd4>)
 800469e:	6013      	str	r3, [r2, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a4:	4613      	mov	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4a15      	ldr	r2, [pc, #84]	; (8004704 <prvAddNewTaskToReadyList+0xd8>)
 80046ae:	441a      	add	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	3304      	adds	r3, #4
 80046b4:	4619      	mov	r1, r3
 80046b6:	4610      	mov	r0, r2
 80046b8:	f7ff f941 	bl	800393e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80046bc:	f001 fa0a 	bl	8005ad4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80046c0:	4b0d      	ldr	r3, [pc, #52]	; (80046f8 <prvAddNewTaskToReadyList+0xcc>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00e      	beq.n	80046e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80046c8:	4b0a      	ldr	r3, [pc, #40]	; (80046f4 <prvAddNewTaskToReadyList+0xc8>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d207      	bcs.n	80046e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80046d6:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <prvAddNewTaskToReadyList+0xdc>)
 80046d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046e6:	bf00      	nop
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	200016cc 	.word	0x200016cc
 80046f4:	200011f8 	.word	0x200011f8
 80046f8:	200016d8 	.word	0x200016d8
 80046fc:	200016e8 	.word	0x200016e8
 8004700:	200016d4 	.word	0x200016d4
 8004704:	200011fc 	.word	0x200011fc
 8004708:	e000ed04 	.word	0xe000ed04

0800470c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08a      	sub	sp, #40	; 0x28
 8004710:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004712:	2300      	movs	r3, #0
 8004714:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004716:	2300      	movs	r3, #0
 8004718:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800471a:	463a      	mov	r2, r7
 800471c:	1d39      	adds	r1, r7, #4
 800471e:	f107 0308 	add.w	r3, r7, #8
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff f8aa 	bl	800387c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004728:	6839      	ldr	r1, [r7, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	9202      	str	r2, [sp, #8]
 8004730:	9301      	str	r3, [sp, #4]
 8004732:	2300      	movs	r3, #0
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	2300      	movs	r3, #0
 8004738:	460a      	mov	r2, r1
 800473a:	4924      	ldr	r1, [pc, #144]	; (80047cc <vTaskStartScheduler+0xc0>)
 800473c:	4824      	ldr	r0, [pc, #144]	; (80047d0 <vTaskStartScheduler+0xc4>)
 800473e:	f7ff fe71 	bl	8004424 <xTaskCreateStatic>
 8004742:	4603      	mov	r3, r0
 8004744:	4a23      	ldr	r2, [pc, #140]	; (80047d4 <vTaskStartScheduler+0xc8>)
 8004746:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004748:	4b22      	ldr	r3, [pc, #136]	; (80047d4 <vTaskStartScheduler+0xc8>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004750:	2301      	movs	r3, #1
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	e001      	b.n	800475a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004756:	2300      	movs	r3, #0
 8004758:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d102      	bne.n	8004766 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004760:	f000 fd10 	bl	8005184 <xTimerCreateTimerTask>
 8004764:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d11b      	bne.n	80047a4 <vTaskStartScheduler+0x98>
	__asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	613b      	str	r3, [r7, #16]
}
 800477e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004780:	4b15      	ldr	r3, [pc, #84]	; (80047d8 <vTaskStartScheduler+0xcc>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3354      	adds	r3, #84	; 0x54
 8004786:	4a15      	ldr	r2, [pc, #84]	; (80047dc <vTaskStartScheduler+0xd0>)
 8004788:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800478a:	4b15      	ldr	r3, [pc, #84]	; (80047e0 <vTaskStartScheduler+0xd4>)
 800478c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004790:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004792:	4b14      	ldr	r3, [pc, #80]	; (80047e4 <vTaskStartScheduler+0xd8>)
 8004794:	2201      	movs	r2, #1
 8004796:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004798:	4b13      	ldr	r3, [pc, #76]	; (80047e8 <vTaskStartScheduler+0xdc>)
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800479e:	f001 f8c7 	bl	8005930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80047a2:	e00e      	b.n	80047c2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047aa:	d10a      	bne.n	80047c2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	60fb      	str	r3, [r7, #12]
}
 80047be:	bf00      	nop
 80047c0:	e7fe      	b.n	80047c0 <vTaskStartScheduler+0xb4>
}
 80047c2:	bf00      	nop
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	0800606c 	.word	0x0800606c
 80047d0:	08004e11 	.word	0x08004e11
 80047d4:	200016f0 	.word	0x200016f0
 80047d8:	200011f8 	.word	0x200011f8
 80047dc:	20000034 	.word	0x20000034
 80047e0:	200016ec 	.word	0x200016ec
 80047e4:	200016d8 	.word	0x200016d8
 80047e8:	200016d0 	.word	0x200016d0

080047ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80047f0:	4b04      	ldr	r3, [pc, #16]	; (8004804 <vTaskSuspendAll+0x18>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3301      	adds	r3, #1
 80047f6:	4a03      	ldr	r2, [pc, #12]	; (8004804 <vTaskSuspendAll+0x18>)
 80047f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80047fa:	bf00      	nop
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	200016f4 	.word	0x200016f4

08004808 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004812:	2300      	movs	r3, #0
 8004814:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004816:	4b42      	ldr	r3, [pc, #264]	; (8004920 <xTaskResumeAll+0x118>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10a      	bne.n	8004834 <xTaskResumeAll+0x2c>
	__asm volatile
 800481e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	603b      	str	r3, [r7, #0]
}
 8004830:	bf00      	nop
 8004832:	e7fe      	b.n	8004832 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004834:	f001 f91e 	bl	8005a74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004838:	4b39      	ldr	r3, [pc, #228]	; (8004920 <xTaskResumeAll+0x118>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3b01      	subs	r3, #1
 800483e:	4a38      	ldr	r2, [pc, #224]	; (8004920 <xTaskResumeAll+0x118>)
 8004840:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004842:	4b37      	ldr	r3, [pc, #220]	; (8004920 <xTaskResumeAll+0x118>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d162      	bne.n	8004910 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800484a:	4b36      	ldr	r3, [pc, #216]	; (8004924 <xTaskResumeAll+0x11c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d05e      	beq.n	8004910 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004852:	e02f      	b.n	80048b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004854:	4b34      	ldr	r3, [pc, #208]	; (8004928 <xTaskResumeAll+0x120>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	3318      	adds	r3, #24
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff f8c9 	bl	80039f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	3304      	adds	r3, #4
 800486a:	4618      	mov	r0, r3
 800486c:	f7ff f8c4 	bl	80039f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004874:	4b2d      	ldr	r3, [pc, #180]	; (800492c <xTaskResumeAll+0x124>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d903      	bls.n	8004884 <xTaskResumeAll+0x7c>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	4a2a      	ldr	r2, [pc, #168]	; (800492c <xTaskResumeAll+0x124>)
 8004882:	6013      	str	r3, [r2, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004888:	4613      	mov	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4a27      	ldr	r2, [pc, #156]	; (8004930 <xTaskResumeAll+0x128>)
 8004892:	441a      	add	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	3304      	adds	r3, #4
 8004898:	4619      	mov	r1, r3
 800489a:	4610      	mov	r0, r2
 800489c:	f7ff f84f 	bl	800393e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a4:	4b23      	ldr	r3, [pc, #140]	; (8004934 <xTaskResumeAll+0x12c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d302      	bcc.n	80048b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80048ae:	4b22      	ldr	r3, [pc, #136]	; (8004938 <xTaskResumeAll+0x130>)
 80048b0:	2201      	movs	r2, #1
 80048b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048b4:	4b1c      	ldr	r3, [pc, #112]	; (8004928 <xTaskResumeAll+0x120>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1cb      	bne.n	8004854 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048c2:	f000 fb5f 	bl	8004f84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80048c6:	4b1d      	ldr	r3, [pc, #116]	; (800493c <xTaskResumeAll+0x134>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d010      	beq.n	80048f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048d2:	f000 f847 	bl	8004964 <xTaskIncrementTick>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80048dc:	4b16      	ldr	r3, [pc, #88]	; (8004938 <xTaskResumeAll+0x130>)
 80048de:	2201      	movs	r2, #1
 80048e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	3b01      	subs	r3, #1
 80048e6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1f1      	bne.n	80048d2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80048ee:	4b13      	ldr	r3, [pc, #76]	; (800493c <xTaskResumeAll+0x134>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048f4:	4b10      	ldr	r3, [pc, #64]	; (8004938 <xTaskResumeAll+0x130>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d009      	beq.n	8004910 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80048fc:	2301      	movs	r3, #1
 80048fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004900:	4b0f      	ldr	r3, [pc, #60]	; (8004940 <xTaskResumeAll+0x138>)
 8004902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004910:	f001 f8e0 	bl	8005ad4 <vPortExitCritical>

	return xAlreadyYielded;
 8004914:	68bb      	ldr	r3, [r7, #8]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	200016f4 	.word	0x200016f4
 8004924:	200016cc 	.word	0x200016cc
 8004928:	2000168c 	.word	0x2000168c
 800492c:	200016d4 	.word	0x200016d4
 8004930:	200011fc 	.word	0x200011fc
 8004934:	200011f8 	.word	0x200011f8
 8004938:	200016e0 	.word	0x200016e0
 800493c:	200016dc 	.word	0x200016dc
 8004940:	e000ed04 	.word	0xe000ed04

08004944 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800494a:	4b05      	ldr	r3, [pc, #20]	; (8004960 <xTaskGetTickCount+0x1c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004950:	687b      	ldr	r3, [r7, #4]
}
 8004952:	4618      	mov	r0, r3
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	200016d0 	.word	0x200016d0

08004964 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800496a:	2300      	movs	r3, #0
 800496c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800496e:	4b4f      	ldr	r3, [pc, #316]	; (8004aac <xTaskIncrementTick+0x148>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	f040 808f 	bne.w	8004a96 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004978:	4b4d      	ldr	r3, [pc, #308]	; (8004ab0 <xTaskIncrementTick+0x14c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3301      	adds	r3, #1
 800497e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004980:	4a4b      	ldr	r2, [pc, #300]	; (8004ab0 <xTaskIncrementTick+0x14c>)
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d120      	bne.n	80049ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800498c:	4b49      	ldr	r3, [pc, #292]	; (8004ab4 <xTaskIncrementTick+0x150>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <xTaskIncrementTick+0x48>
	__asm volatile
 8004996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499a:	f383 8811 	msr	BASEPRI, r3
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	603b      	str	r3, [r7, #0]
}
 80049a8:	bf00      	nop
 80049aa:	e7fe      	b.n	80049aa <xTaskIncrementTick+0x46>
 80049ac:	4b41      	ldr	r3, [pc, #260]	; (8004ab4 <xTaskIncrementTick+0x150>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	60fb      	str	r3, [r7, #12]
 80049b2:	4b41      	ldr	r3, [pc, #260]	; (8004ab8 <xTaskIncrementTick+0x154>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a3f      	ldr	r2, [pc, #252]	; (8004ab4 <xTaskIncrementTick+0x150>)
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	4a3f      	ldr	r2, [pc, #252]	; (8004ab8 <xTaskIncrementTick+0x154>)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6013      	str	r3, [r2, #0]
 80049c0:	4b3e      	ldr	r3, [pc, #248]	; (8004abc <xTaskIncrementTick+0x158>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3301      	adds	r3, #1
 80049c6:	4a3d      	ldr	r2, [pc, #244]	; (8004abc <xTaskIncrementTick+0x158>)
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	f000 fadb 	bl	8004f84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049ce:	4b3c      	ldr	r3, [pc, #240]	; (8004ac0 <xTaskIncrementTick+0x15c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d349      	bcc.n	8004a6c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049d8:	4b36      	ldr	r3, [pc, #216]	; (8004ab4 <xTaskIncrementTick+0x150>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d104      	bne.n	80049ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049e2:	4b37      	ldr	r3, [pc, #220]	; (8004ac0 <xTaskIncrementTick+0x15c>)
 80049e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049e8:	601a      	str	r2, [r3, #0]
					break;
 80049ea:	e03f      	b.n	8004a6c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049ec:	4b31      	ldr	r3, [pc, #196]	; (8004ab4 <xTaskIncrementTick+0x150>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d203      	bcs.n	8004a0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a04:	4a2e      	ldr	r2, [pc, #184]	; (8004ac0 <xTaskIncrementTick+0x15c>)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a0a:	e02f      	b.n	8004a6c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fe fff1 	bl	80039f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d004      	beq.n	8004a28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	3318      	adds	r3, #24
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fe ffe8 	bl	80039f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2c:	4b25      	ldr	r3, [pc, #148]	; (8004ac4 <xTaskIncrementTick+0x160>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d903      	bls.n	8004a3c <xTaskIncrementTick+0xd8>
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	4a22      	ldr	r2, [pc, #136]	; (8004ac4 <xTaskIncrementTick+0x160>)
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4a1f      	ldr	r2, [pc, #124]	; (8004ac8 <xTaskIncrementTick+0x164>)
 8004a4a:	441a      	add	r2, r3
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f7fe ff73 	bl	800393e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a5c:	4b1b      	ldr	r3, [pc, #108]	; (8004acc <xTaskIncrementTick+0x168>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d3b8      	bcc.n	80049d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004a66:	2301      	movs	r3, #1
 8004a68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a6a:	e7b5      	b.n	80049d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a6c:	4b17      	ldr	r3, [pc, #92]	; (8004acc <xTaskIncrementTick+0x168>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a72:	4915      	ldr	r1, [pc, #84]	; (8004ac8 <xTaskIncrementTick+0x164>)
 8004a74:	4613      	mov	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d901      	bls.n	8004a88 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004a84:	2301      	movs	r3, #1
 8004a86:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a88:	4b11      	ldr	r3, [pc, #68]	; (8004ad0 <xTaskIncrementTick+0x16c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d007      	beq.n	8004aa0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004a90:	2301      	movs	r3, #1
 8004a92:	617b      	str	r3, [r7, #20]
 8004a94:	e004      	b.n	8004aa0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004a96:	4b0f      	ldr	r3, [pc, #60]	; (8004ad4 <xTaskIncrementTick+0x170>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	4a0d      	ldr	r2, [pc, #52]	; (8004ad4 <xTaskIncrementTick+0x170>)
 8004a9e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004aa0:	697b      	ldr	r3, [r7, #20]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	200016f4 	.word	0x200016f4
 8004ab0:	200016d0 	.word	0x200016d0
 8004ab4:	20001684 	.word	0x20001684
 8004ab8:	20001688 	.word	0x20001688
 8004abc:	200016e4 	.word	0x200016e4
 8004ac0:	200016ec 	.word	0x200016ec
 8004ac4:	200016d4 	.word	0x200016d4
 8004ac8:	200011fc 	.word	0x200011fc
 8004acc:	200011f8 	.word	0x200011f8
 8004ad0:	200016e0 	.word	0x200016e0
 8004ad4:	200016dc 	.word	0x200016dc

08004ad8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ade:	4b2a      	ldr	r3, [pc, #168]	; (8004b88 <vTaskSwitchContext+0xb0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ae6:	4b29      	ldr	r3, [pc, #164]	; (8004b8c <vTaskSwitchContext+0xb4>)
 8004ae8:	2201      	movs	r2, #1
 8004aea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004aec:	e046      	b.n	8004b7c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004aee:	4b27      	ldr	r3, [pc, #156]	; (8004b8c <vTaskSwitchContext+0xb4>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004af4:	4b26      	ldr	r3, [pc, #152]	; (8004b90 <vTaskSwitchContext+0xb8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	e010      	b.n	8004b1e <vTaskSwitchContext+0x46>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10a      	bne.n	8004b18 <vTaskSwitchContext+0x40>
	__asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	607b      	str	r3, [r7, #4]
}
 8004b14:	bf00      	nop
 8004b16:	e7fe      	b.n	8004b16 <vTaskSwitchContext+0x3e>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	491d      	ldr	r1, [pc, #116]	; (8004b94 <vTaskSwitchContext+0xbc>)
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	4613      	mov	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	440b      	add	r3, r1
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d0e4      	beq.n	8004afc <vTaskSwitchContext+0x24>
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4613      	mov	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4a15      	ldr	r2, [pc, #84]	; (8004b94 <vTaskSwitchContext+0xbc>)
 8004b3e:	4413      	add	r3, r2
 8004b40:	60bb      	str	r3, [r7, #8]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	605a      	str	r2, [r3, #4]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	3308      	adds	r3, #8
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d104      	bne.n	8004b62 <vTaskSwitchContext+0x8a>
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	605a      	str	r2, [r3, #4]
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	4a0b      	ldr	r2, [pc, #44]	; (8004b98 <vTaskSwitchContext+0xc0>)
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	4a08      	ldr	r2, [pc, #32]	; (8004b90 <vTaskSwitchContext+0xb8>)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b72:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <vTaskSwitchContext+0xc0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3354      	adds	r3, #84	; 0x54
 8004b78:	4a08      	ldr	r2, [pc, #32]	; (8004b9c <vTaskSwitchContext+0xc4>)
 8004b7a:	6013      	str	r3, [r2, #0]
}
 8004b7c:	bf00      	nop
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	200016f4 	.word	0x200016f4
 8004b8c:	200016e0 	.word	0x200016e0
 8004b90:	200016d4 	.word	0x200016d4
 8004b94:	200011fc 	.word	0x200011fc
 8004b98:	200011f8 	.word	0x200011f8
 8004b9c:	20000034 	.word	0x20000034

08004ba0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10a      	bne.n	8004bc6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	60fb      	str	r3, [r7, #12]
}
 8004bc2:	bf00      	nop
 8004bc4:	e7fe      	b.n	8004bc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bc6:	4b07      	ldr	r3, [pc, #28]	; (8004be4 <vTaskPlaceOnEventList+0x44>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3318      	adds	r3, #24
 8004bcc:	4619      	mov	r1, r3
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7fe fed9 	bl	8003986 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	6838      	ldr	r0, [r7, #0]
 8004bd8:	f000 fa80 	bl	80050dc <prvAddCurrentTaskToDelayedList>
}
 8004bdc:	bf00      	nop
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	200011f8 	.word	0x200011f8

08004be8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10a      	bne.n	8004c10 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	617b      	str	r3, [r7, #20]
}
 8004c0c:	bf00      	nop
 8004c0e:	e7fe      	b.n	8004c0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c10:	4b0a      	ldr	r3, [pc, #40]	; (8004c3c <vTaskPlaceOnEventListRestricted+0x54>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3318      	adds	r3, #24
 8004c16:	4619      	mov	r1, r3
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f7fe fe90 	bl	800393e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	68b8      	ldr	r0, [r7, #8]
 8004c2e:	f000 fa55 	bl	80050dc <prvAddCurrentTaskToDelayedList>
	}
 8004c32:	bf00      	nop
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	200011f8 	.word	0x200011f8

08004c40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10a      	bne.n	8004c6c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	60fb      	str	r3, [r7, #12]
}
 8004c68:	bf00      	nop
 8004c6a:	e7fe      	b.n	8004c6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	3318      	adds	r3, #24
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7fe fec1 	bl	80039f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c76:	4b1e      	ldr	r3, [pc, #120]	; (8004cf0 <xTaskRemoveFromEventList+0xb0>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d11d      	bne.n	8004cba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	3304      	adds	r3, #4
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fe feb8 	bl	80039f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c8c:	4b19      	ldr	r3, [pc, #100]	; (8004cf4 <xTaskRemoveFromEventList+0xb4>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d903      	bls.n	8004c9c <xTaskRemoveFromEventList+0x5c>
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c98:	4a16      	ldr	r2, [pc, #88]	; (8004cf4 <xTaskRemoveFromEventList+0xb4>)
 8004c9a:	6013      	str	r3, [r2, #0]
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4a13      	ldr	r2, [pc, #76]	; (8004cf8 <xTaskRemoveFromEventList+0xb8>)
 8004caa:	441a      	add	r2, r3
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	f7fe fe43 	bl	800393e <vListInsertEnd>
 8004cb8:	e005      	b.n	8004cc6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	3318      	adds	r3, #24
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	480e      	ldr	r0, [pc, #56]	; (8004cfc <xTaskRemoveFromEventList+0xbc>)
 8004cc2:	f7fe fe3c 	bl	800393e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cca:	4b0d      	ldr	r3, [pc, #52]	; (8004d00 <xTaskRemoveFromEventList+0xc0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d905      	bls.n	8004ce0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004cd8:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <xTaskRemoveFromEventList+0xc4>)
 8004cda:	2201      	movs	r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	e001      	b.n	8004ce4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004ce4:	697b      	ldr	r3, [r7, #20]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3718      	adds	r7, #24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	200016f4 	.word	0x200016f4
 8004cf4:	200016d4 	.word	0x200016d4
 8004cf8:	200011fc 	.word	0x200011fc
 8004cfc:	2000168c 	.word	0x2000168c
 8004d00:	200011f8 	.word	0x200011f8
 8004d04:	200016e0 	.word	0x200016e0

08004d08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d10:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <vTaskInternalSetTimeOutState+0x24>)
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d18:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <vTaskInternalSetTimeOutState+0x28>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	605a      	str	r2, [r3, #4]
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	200016e4 	.word	0x200016e4
 8004d30:	200016d0 	.word	0x200016d0

08004d34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b088      	sub	sp, #32
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10a      	bne.n	8004d5a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d48:	f383 8811 	msr	BASEPRI, r3
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	613b      	str	r3, [r7, #16]
}
 8004d56:	bf00      	nop
 8004d58:	e7fe      	b.n	8004d58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	60fb      	str	r3, [r7, #12]
}
 8004d72:	bf00      	nop
 8004d74:	e7fe      	b.n	8004d74 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004d76:	f000 fe7d 	bl	8005a74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d7a:	4b1d      	ldr	r3, [pc, #116]	; (8004df0 <xTaskCheckForTimeOut+0xbc>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d92:	d102      	bne.n	8004d9a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d94:	2300      	movs	r3, #0
 8004d96:	61fb      	str	r3, [r7, #28]
 8004d98:	e023      	b.n	8004de2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	4b15      	ldr	r3, [pc, #84]	; (8004df4 <xTaskCheckForTimeOut+0xc0>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d007      	beq.n	8004db6 <xTaskCheckForTimeOut+0x82>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	69ba      	ldr	r2, [r7, #24]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d302      	bcc.n	8004db6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004db0:	2301      	movs	r3, #1
 8004db2:	61fb      	str	r3, [r7, #28]
 8004db4:	e015      	b.n	8004de2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d20b      	bcs.n	8004dd8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	1ad2      	subs	r2, r2, r3
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7ff ff9b 	bl	8004d08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	61fb      	str	r3, [r7, #28]
 8004dd6:	e004      	b.n	8004de2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004dde:	2301      	movs	r3, #1
 8004de0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004de2:	f000 fe77 	bl	8005ad4 <vPortExitCritical>

	return xReturn;
 8004de6:	69fb      	ldr	r3, [r7, #28]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3720      	adds	r7, #32
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	200016d0 	.word	0x200016d0
 8004df4:	200016e4 	.word	0x200016e4

08004df8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004dfc:	4b03      	ldr	r3, [pc, #12]	; (8004e0c <vTaskMissedYield+0x14>)
 8004dfe:	2201      	movs	r2, #1
 8004e00:	601a      	str	r2, [r3, #0]
}
 8004e02:	bf00      	nop
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	200016e0 	.word	0x200016e0

08004e10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e18:	f000 f852 	bl	8004ec0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e1c:	4b06      	ldr	r3, [pc, #24]	; (8004e38 <prvIdleTask+0x28>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d9f9      	bls.n	8004e18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e24:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <prvIdleTask+0x2c>)
 8004e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e34:	e7f0      	b.n	8004e18 <prvIdleTask+0x8>
 8004e36:	bf00      	nop
 8004e38:	200011fc 	.word	0x200011fc
 8004e3c:	e000ed04 	.word	0xe000ed04

08004e40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e46:	2300      	movs	r3, #0
 8004e48:	607b      	str	r3, [r7, #4]
 8004e4a:	e00c      	b.n	8004e66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	4413      	add	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4a12      	ldr	r2, [pc, #72]	; (8004ea0 <prvInitialiseTaskLists+0x60>)
 8004e58:	4413      	add	r3, r2
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fe fd42 	bl	80038e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3301      	adds	r3, #1
 8004e64:	607b      	str	r3, [r7, #4]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b37      	cmp	r3, #55	; 0x37
 8004e6a:	d9ef      	bls.n	8004e4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e6c:	480d      	ldr	r0, [pc, #52]	; (8004ea4 <prvInitialiseTaskLists+0x64>)
 8004e6e:	f7fe fd39 	bl	80038e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e72:	480d      	ldr	r0, [pc, #52]	; (8004ea8 <prvInitialiseTaskLists+0x68>)
 8004e74:	f7fe fd36 	bl	80038e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e78:	480c      	ldr	r0, [pc, #48]	; (8004eac <prvInitialiseTaskLists+0x6c>)
 8004e7a:	f7fe fd33 	bl	80038e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e7e:	480c      	ldr	r0, [pc, #48]	; (8004eb0 <prvInitialiseTaskLists+0x70>)
 8004e80:	f7fe fd30 	bl	80038e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e84:	480b      	ldr	r0, [pc, #44]	; (8004eb4 <prvInitialiseTaskLists+0x74>)
 8004e86:	f7fe fd2d 	bl	80038e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e8a:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <prvInitialiseTaskLists+0x78>)
 8004e8c:	4a05      	ldr	r2, [pc, #20]	; (8004ea4 <prvInitialiseTaskLists+0x64>)
 8004e8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e90:	4b0a      	ldr	r3, [pc, #40]	; (8004ebc <prvInitialiseTaskLists+0x7c>)
 8004e92:	4a05      	ldr	r2, [pc, #20]	; (8004ea8 <prvInitialiseTaskLists+0x68>)
 8004e94:	601a      	str	r2, [r3, #0]
}
 8004e96:	bf00      	nop
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	200011fc 	.word	0x200011fc
 8004ea4:	2000165c 	.word	0x2000165c
 8004ea8:	20001670 	.word	0x20001670
 8004eac:	2000168c 	.word	0x2000168c
 8004eb0:	200016a0 	.word	0x200016a0
 8004eb4:	200016b8 	.word	0x200016b8
 8004eb8:	20001684 	.word	0x20001684
 8004ebc:	20001688 	.word	0x20001688

08004ec0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ec6:	e019      	b.n	8004efc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ec8:	f000 fdd4 	bl	8005a74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ecc:	4b10      	ldr	r3, [pc, #64]	; (8004f10 <prvCheckTasksWaitingTermination+0x50>)
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3304      	adds	r3, #4
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7fe fd8d 	bl	80039f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ede:	4b0d      	ldr	r3, [pc, #52]	; (8004f14 <prvCheckTasksWaitingTermination+0x54>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	4a0b      	ldr	r2, [pc, #44]	; (8004f14 <prvCheckTasksWaitingTermination+0x54>)
 8004ee6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ee8:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <prvCheckTasksWaitingTermination+0x58>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3b01      	subs	r3, #1
 8004eee:	4a0a      	ldr	r2, [pc, #40]	; (8004f18 <prvCheckTasksWaitingTermination+0x58>)
 8004ef0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ef2:	f000 fdef 	bl	8005ad4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f810 	bl	8004f1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004efc:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <prvCheckTasksWaitingTermination+0x58>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1e1      	bne.n	8004ec8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f04:	bf00      	nop
 8004f06:	bf00      	nop
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	200016a0 	.word	0x200016a0
 8004f14:	200016cc 	.word	0x200016cc
 8004f18:	200016b4 	.word	0x200016b4

08004f1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3354      	adds	r3, #84	; 0x54
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 ffcb 	bl	8005ec4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d108      	bne.n	8004f4a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 febb 	bl	8005cb8 <vPortFree>
				vPortFree( pxTCB );
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 feb8 	bl	8005cb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f48:	e018      	b.n	8004f7c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d103      	bne.n	8004f5c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 feaf 	bl	8005cb8 <vPortFree>
	}
 8004f5a:	e00f      	b.n	8004f7c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d00a      	beq.n	8004f7c <prvDeleteTCB+0x60>
	__asm volatile
 8004f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	60fb      	str	r3, [r7, #12]
}
 8004f78:	bf00      	nop
 8004f7a:	e7fe      	b.n	8004f7a <prvDeleteTCB+0x5e>
	}
 8004f7c:	bf00      	nop
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f8a:	4b0c      	ldr	r3, [pc, #48]	; (8004fbc <prvResetNextTaskUnblockTime+0x38>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d104      	bne.n	8004f9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f94:	4b0a      	ldr	r3, [pc, #40]	; (8004fc0 <prvResetNextTaskUnblockTime+0x3c>)
 8004f96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f9c:	e008      	b.n	8004fb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f9e:	4b07      	ldr	r3, [pc, #28]	; (8004fbc <prvResetNextTaskUnblockTime+0x38>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	4a04      	ldr	r2, [pc, #16]	; (8004fc0 <prvResetNextTaskUnblockTime+0x3c>)
 8004fae:	6013      	str	r3, [r2, #0]
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	20001684 	.word	0x20001684
 8004fc0:	200016ec 	.word	0x200016ec

08004fc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004fca:	4b0b      	ldr	r3, [pc, #44]	; (8004ff8 <xTaskGetSchedulerState+0x34>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d102      	bne.n	8004fd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	607b      	str	r3, [r7, #4]
 8004fd6:	e008      	b.n	8004fea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fd8:	4b08      	ldr	r3, [pc, #32]	; (8004ffc <xTaskGetSchedulerState+0x38>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d102      	bne.n	8004fe6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	607b      	str	r3, [r7, #4]
 8004fe4:	e001      	b.n	8004fea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004fea:	687b      	ldr	r3, [r7, #4]
	}
 8004fec:	4618      	mov	r0, r3
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	200016d8 	.word	0x200016d8
 8004ffc:	200016f4 	.word	0x200016f4

08005000 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800500c:	2300      	movs	r3, #0
 800500e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d056      	beq.n	80050c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005016:	4b2e      	ldr	r3, [pc, #184]	; (80050d0 <xTaskPriorityDisinherit+0xd0>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	429a      	cmp	r2, r3
 800501e:	d00a      	beq.n	8005036 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	60fb      	str	r3, [r7, #12]
}
 8005032:	bf00      	nop
 8005034:	e7fe      	b.n	8005034 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10a      	bne.n	8005054 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800503e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	60bb      	str	r3, [r7, #8]
}
 8005050:	bf00      	nop
 8005052:	e7fe      	b.n	8005052 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005058:	1e5a      	subs	r2, r3, #1
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005066:	429a      	cmp	r2, r3
 8005068:	d02c      	beq.n	80050c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800506e:	2b00      	cmp	r3, #0
 8005070:	d128      	bne.n	80050c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	3304      	adds	r3, #4
 8005076:	4618      	mov	r0, r3
 8005078:	f7fe fcbe 	bl	80039f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005094:	4b0f      	ldr	r3, [pc, #60]	; (80050d4 <xTaskPriorityDisinherit+0xd4>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	429a      	cmp	r2, r3
 800509a:	d903      	bls.n	80050a4 <xTaskPriorityDisinherit+0xa4>
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a0:	4a0c      	ldr	r2, [pc, #48]	; (80050d4 <xTaskPriorityDisinherit+0xd4>)
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a8:	4613      	mov	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4a09      	ldr	r2, [pc, #36]	; (80050d8 <xTaskPriorityDisinherit+0xd8>)
 80050b2:	441a      	add	r2, r3
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	3304      	adds	r3, #4
 80050b8:	4619      	mov	r1, r3
 80050ba:	4610      	mov	r0, r2
 80050bc:	f7fe fc3f 	bl	800393e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80050c0:	2301      	movs	r3, #1
 80050c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050c4:	697b      	ldr	r3, [r7, #20]
	}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	200011f8 	.word	0x200011f8
 80050d4:	200016d4 	.word	0x200016d4
 80050d8:	200011fc 	.word	0x200011fc

080050dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050e6:	4b21      	ldr	r3, [pc, #132]	; (800516c <prvAddCurrentTaskToDelayedList+0x90>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050ec:	4b20      	ldr	r3, [pc, #128]	; (8005170 <prvAddCurrentTaskToDelayedList+0x94>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3304      	adds	r3, #4
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fe fc80 	bl	80039f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050fe:	d10a      	bne.n	8005116 <prvAddCurrentTaskToDelayedList+0x3a>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d007      	beq.n	8005116 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005106:	4b1a      	ldr	r3, [pc, #104]	; (8005170 <prvAddCurrentTaskToDelayedList+0x94>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	3304      	adds	r3, #4
 800510c:	4619      	mov	r1, r3
 800510e:	4819      	ldr	r0, [pc, #100]	; (8005174 <prvAddCurrentTaskToDelayedList+0x98>)
 8005110:	f7fe fc15 	bl	800393e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005114:	e026      	b.n	8005164 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4413      	add	r3, r2
 800511c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800511e:	4b14      	ldr	r3, [pc, #80]	; (8005170 <prvAddCurrentTaskToDelayedList+0x94>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	429a      	cmp	r2, r3
 800512c:	d209      	bcs.n	8005142 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800512e:	4b12      	ldr	r3, [pc, #72]	; (8005178 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	4b0f      	ldr	r3, [pc, #60]	; (8005170 <prvAddCurrentTaskToDelayedList+0x94>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	3304      	adds	r3, #4
 8005138:	4619      	mov	r1, r3
 800513a:	4610      	mov	r0, r2
 800513c:	f7fe fc23 	bl	8003986 <vListInsert>
}
 8005140:	e010      	b.n	8005164 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005142:	4b0e      	ldr	r3, [pc, #56]	; (800517c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	4b0a      	ldr	r3, [pc, #40]	; (8005170 <prvAddCurrentTaskToDelayedList+0x94>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3304      	adds	r3, #4
 800514c:	4619      	mov	r1, r3
 800514e:	4610      	mov	r0, r2
 8005150:	f7fe fc19 	bl	8003986 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005154:	4b0a      	ldr	r3, [pc, #40]	; (8005180 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	429a      	cmp	r2, r3
 800515c:	d202      	bcs.n	8005164 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800515e:	4a08      	ldr	r2, [pc, #32]	; (8005180 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	6013      	str	r3, [r2, #0]
}
 8005164:	bf00      	nop
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	200016d0 	.word	0x200016d0
 8005170:	200011f8 	.word	0x200011f8
 8005174:	200016b8 	.word	0x200016b8
 8005178:	20001688 	.word	0x20001688
 800517c:	20001684 	.word	0x20001684
 8005180:	200016ec 	.word	0x200016ec

08005184 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08a      	sub	sp, #40	; 0x28
 8005188:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800518a:	2300      	movs	r3, #0
 800518c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800518e:	f000 fb07 	bl	80057a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005192:	4b1c      	ldr	r3, [pc, #112]	; (8005204 <xTimerCreateTimerTask+0x80>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d021      	beq.n	80051de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800519a:	2300      	movs	r3, #0
 800519c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800519e:	2300      	movs	r3, #0
 80051a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80051a2:	1d3a      	adds	r2, r7, #4
 80051a4:	f107 0108 	add.w	r1, r7, #8
 80051a8:	f107 030c 	add.w	r3, r7, #12
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7fe fb7f 	bl	80038b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	9202      	str	r2, [sp, #8]
 80051ba:	9301      	str	r3, [sp, #4]
 80051bc:	2302      	movs	r3, #2
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	2300      	movs	r3, #0
 80051c2:	460a      	mov	r2, r1
 80051c4:	4910      	ldr	r1, [pc, #64]	; (8005208 <xTimerCreateTimerTask+0x84>)
 80051c6:	4811      	ldr	r0, [pc, #68]	; (800520c <xTimerCreateTimerTask+0x88>)
 80051c8:	f7ff f92c 	bl	8004424 <xTaskCreateStatic>
 80051cc:	4603      	mov	r3, r0
 80051ce:	4a10      	ldr	r2, [pc, #64]	; (8005210 <xTimerCreateTimerTask+0x8c>)
 80051d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80051d2:	4b0f      	ldr	r3, [pc, #60]	; (8005210 <xTimerCreateTimerTask+0x8c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80051da:	2301      	movs	r3, #1
 80051dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10a      	bne.n	80051fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	613b      	str	r3, [r7, #16]
}
 80051f6:	bf00      	nop
 80051f8:	e7fe      	b.n	80051f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80051fa:	697b      	ldr	r3, [r7, #20]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	20001728 	.word	0x20001728
 8005208:	08006074 	.word	0x08006074
 800520c:	08005349 	.word	0x08005349
 8005210:	2000172c 	.word	0x2000172c

08005214 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08a      	sub	sp, #40	; 0x28
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
 8005220:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005222:	2300      	movs	r3, #0
 8005224:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10a      	bne.n	8005242 <xTimerGenericCommand+0x2e>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	623b      	str	r3, [r7, #32]
}
 800523e:	bf00      	nop
 8005240:	e7fe      	b.n	8005240 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005242:	4b1a      	ldr	r3, [pc, #104]	; (80052ac <xTimerGenericCommand+0x98>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d02a      	beq.n	80052a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2b05      	cmp	r3, #5
 800525a:	dc18      	bgt.n	800528e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800525c:	f7ff feb2 	bl	8004fc4 <xTaskGetSchedulerState>
 8005260:	4603      	mov	r3, r0
 8005262:	2b02      	cmp	r3, #2
 8005264:	d109      	bne.n	800527a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005266:	4b11      	ldr	r3, [pc, #68]	; (80052ac <xTimerGenericCommand+0x98>)
 8005268:	6818      	ldr	r0, [r3, #0]
 800526a:	f107 0110 	add.w	r1, r7, #16
 800526e:	2300      	movs	r3, #0
 8005270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005272:	f7fe fcef 	bl	8003c54 <xQueueGenericSend>
 8005276:	6278      	str	r0, [r7, #36]	; 0x24
 8005278:	e012      	b.n	80052a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800527a:	4b0c      	ldr	r3, [pc, #48]	; (80052ac <xTimerGenericCommand+0x98>)
 800527c:	6818      	ldr	r0, [r3, #0]
 800527e:	f107 0110 	add.w	r1, r7, #16
 8005282:	2300      	movs	r3, #0
 8005284:	2200      	movs	r2, #0
 8005286:	f7fe fce5 	bl	8003c54 <xQueueGenericSend>
 800528a:	6278      	str	r0, [r7, #36]	; 0x24
 800528c:	e008      	b.n	80052a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800528e:	4b07      	ldr	r3, [pc, #28]	; (80052ac <xTimerGenericCommand+0x98>)
 8005290:	6818      	ldr	r0, [r3, #0]
 8005292:	f107 0110 	add.w	r1, r7, #16
 8005296:	2300      	movs	r3, #0
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	f7fe fdd9 	bl	8003e50 <xQueueGenericSendFromISR>
 800529e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3728      	adds	r7, #40	; 0x28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	20001728 	.word	0x20001728

080052b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b088      	sub	sp, #32
 80052b4:	af02      	add	r7, sp, #8
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ba:	4b22      	ldr	r3, [pc, #136]	; (8005344 <prvProcessExpiredTimer+0x94>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	3304      	adds	r3, #4
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7fe fb95 	bl	80039f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d022      	beq.n	8005322 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	699a      	ldr	r2, [r3, #24]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	18d1      	adds	r1, r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	6978      	ldr	r0, [r7, #20]
 80052ea:	f000 f8d1 	bl	8005490 <prvInsertTimerInActiveList>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d01f      	beq.n	8005334 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052f4:	2300      	movs	r3, #0
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	2300      	movs	r3, #0
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	2100      	movs	r1, #0
 80052fe:	6978      	ldr	r0, [r7, #20]
 8005300:	f7ff ff88 	bl	8005214 <xTimerGenericCommand>
 8005304:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d113      	bne.n	8005334 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800530c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	60fb      	str	r3, [r7, #12]
}
 800531e:	bf00      	nop
 8005320:	e7fe      	b.n	8005320 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005328:	f023 0301 	bic.w	r3, r3, #1
 800532c:	b2da      	uxtb	r2, r3
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	6978      	ldr	r0, [r7, #20]
 800533a:	4798      	blx	r3
}
 800533c:	bf00      	nop
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	20001720 	.word	0x20001720

08005348 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005350:	f107 0308 	add.w	r3, r7, #8
 8005354:	4618      	mov	r0, r3
 8005356:	f000 f857 	bl	8005408 <prvGetNextExpireTime>
 800535a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	4619      	mov	r1, r3
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 f803 	bl	800536c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005366:	f000 f8d5 	bl	8005514 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800536a:	e7f1      	b.n	8005350 <prvTimerTask+0x8>

0800536c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005376:	f7ff fa39 	bl	80047ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800537a:	f107 0308 	add.w	r3, r7, #8
 800537e:	4618      	mov	r0, r3
 8005380:	f000 f866 	bl	8005450 <prvSampleTimeNow>
 8005384:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d130      	bne.n	80053ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10a      	bne.n	80053a8 <prvProcessTimerOrBlockTask+0x3c>
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	429a      	cmp	r2, r3
 8005398:	d806      	bhi.n	80053a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800539a:	f7ff fa35 	bl	8004808 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800539e:	68f9      	ldr	r1, [r7, #12]
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7ff ff85 	bl	80052b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80053a6:	e024      	b.n	80053f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d008      	beq.n	80053c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80053ae:	4b13      	ldr	r3, [pc, #76]	; (80053fc <prvProcessTimerOrBlockTask+0x90>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <prvProcessTimerOrBlockTask+0x50>
 80053b8:	2301      	movs	r3, #1
 80053ba:	e000      	b.n	80053be <prvProcessTimerOrBlockTask+0x52>
 80053bc:	2300      	movs	r3, #0
 80053be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80053c0:	4b0f      	ldr	r3, [pc, #60]	; (8005400 <prvProcessTimerOrBlockTask+0x94>)
 80053c2:	6818      	ldr	r0, [r3, #0]
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	4619      	mov	r1, r3
 80053ce:	f7fe fff5 	bl	80043bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80053d2:	f7ff fa19 	bl	8004808 <xTaskResumeAll>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10a      	bne.n	80053f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80053dc:	4b09      	ldr	r3, [pc, #36]	; (8005404 <prvProcessTimerOrBlockTask+0x98>)
 80053de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	f3bf 8f6f 	isb	sy
}
 80053ec:	e001      	b.n	80053f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80053ee:	f7ff fa0b 	bl	8004808 <xTaskResumeAll>
}
 80053f2:	bf00      	nop
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	20001724 	.word	0x20001724
 8005400:	20001728 	.word	0x20001728
 8005404:	e000ed04 	.word	0xe000ed04

08005408 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005410:	4b0e      	ldr	r3, [pc, #56]	; (800544c <prvGetNextExpireTime+0x44>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <prvGetNextExpireTime+0x16>
 800541a:	2201      	movs	r2, #1
 800541c:	e000      	b.n	8005420 <prvGetNextExpireTime+0x18>
 800541e:	2200      	movs	r2, #0
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d105      	bne.n	8005438 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800542c:	4b07      	ldr	r3, [pc, #28]	; (800544c <prvGetNextExpireTime+0x44>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	60fb      	str	r3, [r7, #12]
 8005436:	e001      	b.n	800543c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800543c:	68fb      	ldr	r3, [r7, #12]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	20001720 	.word	0x20001720

08005450 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005458:	f7ff fa74 	bl	8004944 <xTaskGetTickCount>
 800545c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800545e:	4b0b      	ldr	r3, [pc, #44]	; (800548c <prvSampleTimeNow+0x3c>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	429a      	cmp	r2, r3
 8005466:	d205      	bcs.n	8005474 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005468:	f000 f936 	bl	80056d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	e002      	b.n	800547a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800547a:	4a04      	ldr	r2, [pc, #16]	; (800548c <prvSampleTimeNow+0x3c>)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005480:	68fb      	ldr	r3, [r7, #12]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20001730 	.word	0x20001730

08005490 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800549e:	2300      	movs	r3, #0
 80054a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d812      	bhi.n	80054dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	1ad2      	subs	r2, r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d302      	bcc.n	80054ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80054c4:	2301      	movs	r3, #1
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	e01b      	b.n	8005502 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80054ca:	4b10      	ldr	r3, [pc, #64]	; (800550c <prvInsertTimerInActiveList+0x7c>)
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3304      	adds	r3, #4
 80054d2:	4619      	mov	r1, r3
 80054d4:	4610      	mov	r0, r2
 80054d6:	f7fe fa56 	bl	8003986 <vListInsert>
 80054da:	e012      	b.n	8005502 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d206      	bcs.n	80054f2 <prvInsertTimerInActiveList+0x62>
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d302      	bcc.n	80054f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80054ec:	2301      	movs	r3, #1
 80054ee:	617b      	str	r3, [r7, #20]
 80054f0:	e007      	b.n	8005502 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054f2:	4b07      	ldr	r3, [pc, #28]	; (8005510 <prvInsertTimerInActiveList+0x80>)
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	3304      	adds	r3, #4
 80054fa:	4619      	mov	r1, r3
 80054fc:	4610      	mov	r0, r2
 80054fe:	f7fe fa42 	bl	8003986 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005502:	697b      	ldr	r3, [r7, #20]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3718      	adds	r7, #24
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	20001724 	.word	0x20001724
 8005510:	20001720 	.word	0x20001720

08005514 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b08e      	sub	sp, #56	; 0x38
 8005518:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800551a:	e0ca      	b.n	80056b2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	da18      	bge.n	8005554 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005522:	1d3b      	adds	r3, r7, #4
 8005524:	3304      	adds	r3, #4
 8005526:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10a      	bne.n	8005544 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800552e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	61fb      	str	r3, [r7, #28]
}
 8005540:	bf00      	nop
 8005542:	e7fe      	b.n	8005542 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800554a:	6850      	ldr	r0, [r2, #4]
 800554c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800554e:	6892      	ldr	r2, [r2, #8]
 8005550:	4611      	mov	r1, r2
 8005552:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	f2c0 80aa 	blt.w	80056b0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d004      	beq.n	8005572 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556a:	3304      	adds	r3, #4
 800556c:	4618      	mov	r0, r3
 800556e:	f7fe fa43 	bl	80039f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005572:	463b      	mov	r3, r7
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff ff6b 	bl	8005450 <prvSampleTimeNow>
 800557a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b09      	cmp	r3, #9
 8005580:	f200 8097 	bhi.w	80056b2 <prvProcessReceivedCommands+0x19e>
 8005584:	a201      	add	r2, pc, #4	; (adr r2, 800558c <prvProcessReceivedCommands+0x78>)
 8005586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558a:	bf00      	nop
 800558c:	080055b5 	.word	0x080055b5
 8005590:	080055b5 	.word	0x080055b5
 8005594:	080055b5 	.word	0x080055b5
 8005598:	08005629 	.word	0x08005629
 800559c:	0800563d 	.word	0x0800563d
 80055a0:	08005687 	.word	0x08005687
 80055a4:	080055b5 	.word	0x080055b5
 80055a8:	080055b5 	.word	0x080055b5
 80055ac:	08005629 	.word	0x08005629
 80055b0:	0800563d 	.word	0x0800563d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055ba:	f043 0301 	orr.w	r3, r3, #1
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	18d1      	adds	r1, r2, r3
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055d4:	f7ff ff5c 	bl	8005490 <prvInsertTimerInActiveList>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d069      	beq.n	80056b2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d05e      	beq.n	80056b2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	441a      	add	r2, r3
 80055fc:	2300      	movs	r3, #0
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	2300      	movs	r3, #0
 8005602:	2100      	movs	r1, #0
 8005604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005606:	f7ff fe05 	bl	8005214 <xTimerGenericCommand>
 800560a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d14f      	bne.n	80056b2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	61bb      	str	r3, [r7, #24]
}
 8005624:	bf00      	nop
 8005626:	e7fe      	b.n	8005626 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800562e:	f023 0301 	bic.w	r3, r3, #1
 8005632:	b2da      	uxtb	r2, r3
 8005634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005636:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800563a:	e03a      	b.n	80056b2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800563c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005642:	f043 0301 	orr.w	r3, r3, #1
 8005646:	b2da      	uxtb	r2, r3
 8005648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005652:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10a      	bne.n	8005672 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800565c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005660:	f383 8811 	msr	BASEPRI, r3
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	617b      	str	r3, [r7, #20]
}
 800566e:	bf00      	nop
 8005670:	e7fe      	b.n	8005670 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005674:	699a      	ldr	r2, [r3, #24]
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	18d1      	adds	r1, r2, r3
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800567e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005680:	f7ff ff06 	bl	8005490 <prvInsertTimerInActiveList>
					break;
 8005684:	e015      	b.n	80056b2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005688:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d103      	bne.n	800569c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005696:	f000 fb0f 	bl	8005cb8 <vPortFree>
 800569a:	e00a      	b.n	80056b2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800569c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056a2:	f023 0301 	bic.w	r3, r3, #1
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80056ae:	e000      	b.n	80056b2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80056b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056b2:	4b08      	ldr	r3, [pc, #32]	; (80056d4 <prvProcessReceivedCommands+0x1c0>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	1d39      	adds	r1, r7, #4
 80056b8:	2200      	movs	r2, #0
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fe fc64 	bl	8003f88 <xQueueReceive>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f47f af2a 	bne.w	800551c <prvProcessReceivedCommands+0x8>
	}
}
 80056c8:	bf00      	nop
 80056ca:	bf00      	nop
 80056cc:	3730      	adds	r7, #48	; 0x30
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20001728 	.word	0x20001728

080056d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b088      	sub	sp, #32
 80056dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056de:	e048      	b.n	8005772 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056e0:	4b2d      	ldr	r3, [pc, #180]	; (8005798 <prvSwitchTimerLists+0xc0>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056ea:	4b2b      	ldr	r3, [pc, #172]	; (8005798 <prvSwitchTimerLists+0xc0>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	3304      	adds	r3, #4
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fe f97d 	bl	80039f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b00      	cmp	r3, #0
 8005712:	d02e      	beq.n	8005772 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	4413      	add	r3, r2
 800571c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	429a      	cmp	r2, r3
 8005724:	d90e      	bls.n	8005744 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005732:	4b19      	ldr	r3, [pc, #100]	; (8005798 <prvSwitchTimerLists+0xc0>)
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	3304      	adds	r3, #4
 800573a:	4619      	mov	r1, r3
 800573c:	4610      	mov	r0, r2
 800573e:	f7fe f922 	bl	8003986 <vListInsert>
 8005742:	e016      	b.n	8005772 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005744:	2300      	movs	r3, #0
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	2300      	movs	r3, #0
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	2100      	movs	r1, #0
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f7ff fd60 	bl	8005214 <xTimerGenericCommand>
 8005754:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10a      	bne.n	8005772 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	603b      	str	r3, [r7, #0]
}
 800576e:	bf00      	nop
 8005770:	e7fe      	b.n	8005770 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005772:	4b09      	ldr	r3, [pc, #36]	; (8005798 <prvSwitchTimerLists+0xc0>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1b1      	bne.n	80056e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800577c:	4b06      	ldr	r3, [pc, #24]	; (8005798 <prvSwitchTimerLists+0xc0>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005782:	4b06      	ldr	r3, [pc, #24]	; (800579c <prvSwitchTimerLists+0xc4>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a04      	ldr	r2, [pc, #16]	; (8005798 <prvSwitchTimerLists+0xc0>)
 8005788:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800578a:	4a04      	ldr	r2, [pc, #16]	; (800579c <prvSwitchTimerLists+0xc4>)
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	6013      	str	r3, [r2, #0]
}
 8005790:	bf00      	nop
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	20001720 	.word	0x20001720
 800579c:	20001724 	.word	0x20001724

080057a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80057a6:	f000 f965 	bl	8005a74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80057aa:	4b15      	ldr	r3, [pc, #84]	; (8005800 <prvCheckForValidListAndQueue+0x60>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d120      	bne.n	80057f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80057b2:	4814      	ldr	r0, [pc, #80]	; (8005804 <prvCheckForValidListAndQueue+0x64>)
 80057b4:	f7fe f896 	bl	80038e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80057b8:	4813      	ldr	r0, [pc, #76]	; (8005808 <prvCheckForValidListAndQueue+0x68>)
 80057ba:	f7fe f893 	bl	80038e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80057be:	4b13      	ldr	r3, [pc, #76]	; (800580c <prvCheckForValidListAndQueue+0x6c>)
 80057c0:	4a10      	ldr	r2, [pc, #64]	; (8005804 <prvCheckForValidListAndQueue+0x64>)
 80057c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80057c4:	4b12      	ldr	r3, [pc, #72]	; (8005810 <prvCheckForValidListAndQueue+0x70>)
 80057c6:	4a10      	ldr	r2, [pc, #64]	; (8005808 <prvCheckForValidListAndQueue+0x68>)
 80057c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80057ca:	2300      	movs	r3, #0
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	4b11      	ldr	r3, [pc, #68]	; (8005814 <prvCheckForValidListAndQueue+0x74>)
 80057d0:	4a11      	ldr	r2, [pc, #68]	; (8005818 <prvCheckForValidListAndQueue+0x78>)
 80057d2:	2110      	movs	r1, #16
 80057d4:	200a      	movs	r0, #10
 80057d6:	f7fe f9a1 	bl	8003b1c <xQueueGenericCreateStatic>
 80057da:	4603      	mov	r3, r0
 80057dc:	4a08      	ldr	r2, [pc, #32]	; (8005800 <prvCheckForValidListAndQueue+0x60>)
 80057de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80057e0:	4b07      	ldr	r3, [pc, #28]	; (8005800 <prvCheckForValidListAndQueue+0x60>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d005      	beq.n	80057f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80057e8:	4b05      	ldr	r3, [pc, #20]	; (8005800 <prvCheckForValidListAndQueue+0x60>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	490b      	ldr	r1, [pc, #44]	; (800581c <prvCheckForValidListAndQueue+0x7c>)
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fe fdba 	bl	8004368 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057f4:	f000 f96e 	bl	8005ad4 <vPortExitCritical>
}
 80057f8:	bf00      	nop
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	20001728 	.word	0x20001728
 8005804:	200016f8 	.word	0x200016f8
 8005808:	2000170c 	.word	0x2000170c
 800580c:	20001720 	.word	0x20001720
 8005810:	20001724 	.word	0x20001724
 8005814:	200017d4 	.word	0x200017d4
 8005818:	20001734 	.word	0x20001734
 800581c:	0800607c 	.word	0x0800607c

08005820 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3b04      	subs	r3, #4
 8005830:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005838:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	3b04      	subs	r3, #4
 800583e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	f023 0201 	bic.w	r2, r3, #1
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	3b04      	subs	r3, #4
 800584e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005850:	4a0c      	ldr	r2, [pc, #48]	; (8005884 <pxPortInitialiseStack+0x64>)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3b14      	subs	r3, #20
 800585a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	3b04      	subs	r3, #4
 8005866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f06f 0202 	mvn.w	r2, #2
 800586e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	3b20      	subs	r3, #32
 8005874:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005876:	68fb      	ldr	r3, [r7, #12]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	08005889 	.word	0x08005889

08005888 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800588e:	2300      	movs	r3, #0
 8005890:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005892:	4b12      	ldr	r3, [pc, #72]	; (80058dc <prvTaskExitError+0x54>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800589a:	d00a      	beq.n	80058b2 <prvTaskExitError+0x2a>
	__asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	60fb      	str	r3, [r7, #12]
}
 80058ae:	bf00      	nop
 80058b0:	e7fe      	b.n	80058b0 <prvTaskExitError+0x28>
	__asm volatile
 80058b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	60bb      	str	r3, [r7, #8]
}
 80058c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80058c6:	bf00      	nop
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d0fc      	beq.n	80058c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80058ce:	bf00      	nop
 80058d0:	bf00      	nop
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	20000030 	.word	0x20000030

080058e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80058e0:	4b07      	ldr	r3, [pc, #28]	; (8005900 <pxCurrentTCBConst2>)
 80058e2:	6819      	ldr	r1, [r3, #0]
 80058e4:	6808      	ldr	r0, [r1, #0]
 80058e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ea:	f380 8809 	msr	PSP, r0
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f04f 0000 	mov.w	r0, #0
 80058f6:	f380 8811 	msr	BASEPRI, r0
 80058fa:	4770      	bx	lr
 80058fc:	f3af 8000 	nop.w

08005900 <pxCurrentTCBConst2>:
 8005900:	200011f8 	.word	0x200011f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop

08005908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005908:	4808      	ldr	r0, [pc, #32]	; (800592c <prvPortStartFirstTask+0x24>)
 800590a:	6800      	ldr	r0, [r0, #0]
 800590c:	6800      	ldr	r0, [r0, #0]
 800590e:	f380 8808 	msr	MSP, r0
 8005912:	f04f 0000 	mov.w	r0, #0
 8005916:	f380 8814 	msr	CONTROL, r0
 800591a:	b662      	cpsie	i
 800591c:	b661      	cpsie	f
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	df00      	svc	0
 8005928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800592a:	bf00      	nop
 800592c:	e000ed08 	.word	0xe000ed08

08005930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005936:	4b46      	ldr	r3, [pc, #280]	; (8005a50 <xPortStartScheduler+0x120>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a46      	ldr	r2, [pc, #280]	; (8005a54 <xPortStartScheduler+0x124>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d10a      	bne.n	8005956 <xPortStartScheduler+0x26>
	__asm volatile
 8005940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005944:	f383 8811 	msr	BASEPRI, r3
 8005948:	f3bf 8f6f 	isb	sy
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	613b      	str	r3, [r7, #16]
}
 8005952:	bf00      	nop
 8005954:	e7fe      	b.n	8005954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005956:	4b3e      	ldr	r3, [pc, #248]	; (8005a50 <xPortStartScheduler+0x120>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a3f      	ldr	r2, [pc, #252]	; (8005a58 <xPortStartScheduler+0x128>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d10a      	bne.n	8005976 <xPortStartScheduler+0x46>
	__asm volatile
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	60fb      	str	r3, [r7, #12]
}
 8005972:	bf00      	nop
 8005974:	e7fe      	b.n	8005974 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005976:	4b39      	ldr	r3, [pc, #228]	; (8005a5c <xPortStartScheduler+0x12c>)
 8005978:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	b2db      	uxtb	r3, r3
 8005980:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	22ff      	movs	r2, #255	; 0xff
 8005986:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	b2db      	uxtb	r3, r3
 800598e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005990:	78fb      	ldrb	r3, [r7, #3]
 8005992:	b2db      	uxtb	r3, r3
 8005994:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005998:	b2da      	uxtb	r2, r3
 800599a:	4b31      	ldr	r3, [pc, #196]	; (8005a60 <xPortStartScheduler+0x130>)
 800599c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800599e:	4b31      	ldr	r3, [pc, #196]	; (8005a64 <xPortStartScheduler+0x134>)
 80059a0:	2207      	movs	r2, #7
 80059a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059a4:	e009      	b.n	80059ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80059a6:	4b2f      	ldr	r3, [pc, #188]	; (8005a64 <xPortStartScheduler+0x134>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3b01      	subs	r3, #1
 80059ac:	4a2d      	ldr	r2, [pc, #180]	; (8005a64 <xPortStartScheduler+0x134>)
 80059ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80059b0:	78fb      	ldrb	r3, [r7, #3]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	005b      	lsls	r3, r3, #1
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059ba:	78fb      	ldrb	r3, [r7, #3]
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c2:	2b80      	cmp	r3, #128	; 0x80
 80059c4:	d0ef      	beq.n	80059a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80059c6:	4b27      	ldr	r3, [pc, #156]	; (8005a64 <xPortStartScheduler+0x134>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f1c3 0307 	rsb	r3, r3, #7
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d00a      	beq.n	80059e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80059d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	60bb      	str	r3, [r7, #8]
}
 80059e4:	bf00      	nop
 80059e6:	e7fe      	b.n	80059e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059e8:	4b1e      	ldr	r3, [pc, #120]	; (8005a64 <xPortStartScheduler+0x134>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	021b      	lsls	r3, r3, #8
 80059ee:	4a1d      	ldr	r2, [pc, #116]	; (8005a64 <xPortStartScheduler+0x134>)
 80059f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059f2:	4b1c      	ldr	r3, [pc, #112]	; (8005a64 <xPortStartScheduler+0x134>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059fa:	4a1a      	ldr	r2, [pc, #104]	; (8005a64 <xPortStartScheduler+0x134>)
 80059fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a06:	4b18      	ldr	r3, [pc, #96]	; (8005a68 <xPortStartScheduler+0x138>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a17      	ldr	r2, [pc, #92]	; (8005a68 <xPortStartScheduler+0x138>)
 8005a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a12:	4b15      	ldr	r3, [pc, #84]	; (8005a68 <xPortStartScheduler+0x138>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a14      	ldr	r2, [pc, #80]	; (8005a68 <xPortStartScheduler+0x138>)
 8005a18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005a1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a1e:	f000 f8dd 	bl	8005bdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a22:	4b12      	ldr	r3, [pc, #72]	; (8005a6c <xPortStartScheduler+0x13c>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005a28:	f000 f8fc 	bl	8005c24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a2c:	4b10      	ldr	r3, [pc, #64]	; (8005a70 <xPortStartScheduler+0x140>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a0f      	ldr	r2, [pc, #60]	; (8005a70 <xPortStartScheduler+0x140>)
 8005a32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005a36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a38:	f7ff ff66 	bl	8005908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a3c:	f7ff f84c 	bl	8004ad8 <vTaskSwitchContext>
	prvTaskExitError();
 8005a40:	f7ff ff22 	bl	8005888 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	e000ed00 	.word	0xe000ed00
 8005a54:	410fc271 	.word	0x410fc271
 8005a58:	410fc270 	.word	0x410fc270
 8005a5c:	e000e400 	.word	0xe000e400
 8005a60:	20001824 	.word	0x20001824
 8005a64:	20001828 	.word	0x20001828
 8005a68:	e000ed20 	.word	0xe000ed20
 8005a6c:	20000030 	.word	0x20000030
 8005a70:	e000ef34 	.word	0xe000ef34

08005a74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
	__asm volatile
 8005a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	607b      	str	r3, [r7, #4]
}
 8005a8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a8e:	4b0f      	ldr	r3, [pc, #60]	; (8005acc <vPortEnterCritical+0x58>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3301      	adds	r3, #1
 8005a94:	4a0d      	ldr	r2, [pc, #52]	; (8005acc <vPortEnterCritical+0x58>)
 8005a96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a98:	4b0c      	ldr	r3, [pc, #48]	; (8005acc <vPortEnterCritical+0x58>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d10f      	bne.n	8005ac0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005aa0:	4b0b      	ldr	r3, [pc, #44]	; (8005ad0 <vPortEnterCritical+0x5c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aae:	f383 8811 	msr	BASEPRI, r3
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	603b      	str	r3, [r7, #0]
}
 8005abc:	bf00      	nop
 8005abe:	e7fe      	b.n	8005abe <vPortEnterCritical+0x4a>
	}
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	20000030 	.word	0x20000030
 8005ad0:	e000ed04 	.word	0xe000ed04

08005ad4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ada:	4b12      	ldr	r3, [pc, #72]	; (8005b24 <vPortExitCritical+0x50>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10a      	bne.n	8005af8 <vPortExitCritical+0x24>
	__asm volatile
 8005ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	607b      	str	r3, [r7, #4]
}
 8005af4:	bf00      	nop
 8005af6:	e7fe      	b.n	8005af6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005af8:	4b0a      	ldr	r3, [pc, #40]	; (8005b24 <vPortExitCritical+0x50>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	4a09      	ldr	r2, [pc, #36]	; (8005b24 <vPortExitCritical+0x50>)
 8005b00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b02:	4b08      	ldr	r3, [pc, #32]	; (8005b24 <vPortExitCritical+0x50>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d105      	bne.n	8005b16 <vPortExitCritical+0x42>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	f383 8811 	msr	BASEPRI, r3
}
 8005b14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	20000030 	.word	0x20000030
	...

08005b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b30:	f3ef 8009 	mrs	r0, PSP
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	4b15      	ldr	r3, [pc, #84]	; (8005b90 <pxCurrentTCBConst>)
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	f01e 0f10 	tst.w	lr, #16
 8005b40:	bf08      	it	eq
 8005b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4a:	6010      	str	r0, [r2, #0]
 8005b4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b54:	f380 8811 	msr	BASEPRI, r0
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f7fe ffba 	bl	8004ad8 <vTaskSwitchContext>
 8005b64:	f04f 0000 	mov.w	r0, #0
 8005b68:	f380 8811 	msr	BASEPRI, r0
 8005b6c:	bc09      	pop	{r0, r3}
 8005b6e:	6819      	ldr	r1, [r3, #0]
 8005b70:	6808      	ldr	r0, [r1, #0]
 8005b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b76:	f01e 0f10 	tst.w	lr, #16
 8005b7a:	bf08      	it	eq
 8005b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b80:	f380 8809 	msr	PSP, r0
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	f3af 8000 	nop.w

08005b90 <pxCurrentTCBConst>:
 8005b90:	200011f8 	.word	0x200011f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop

08005b98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	607b      	str	r3, [r7, #4]
}
 8005bb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005bb2:	f7fe fed7 	bl	8004964 <xTaskIncrementTick>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005bbc:	4b06      	ldr	r3, [pc, #24]	; (8005bd8 <xPortSysTickHandler+0x40>)
 8005bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	f383 8811 	msr	BASEPRI, r3
}
 8005bce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005bd0:	bf00      	nop
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	e000ed04 	.word	0xe000ed04

08005bdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005bdc:	b480      	push	{r7}
 8005bde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005be0:	4b0b      	ldr	r3, [pc, #44]	; (8005c10 <vPortSetupTimerInterrupt+0x34>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005be6:	4b0b      	ldr	r3, [pc, #44]	; (8005c14 <vPortSetupTimerInterrupt+0x38>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005bec:	4b0a      	ldr	r3, [pc, #40]	; (8005c18 <vPortSetupTimerInterrupt+0x3c>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a0a      	ldr	r2, [pc, #40]	; (8005c1c <vPortSetupTimerInterrupt+0x40>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	099b      	lsrs	r3, r3, #6
 8005bf8:	4a09      	ldr	r2, [pc, #36]	; (8005c20 <vPortSetupTimerInterrupt+0x44>)
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bfe:	4b04      	ldr	r3, [pc, #16]	; (8005c10 <vPortSetupTimerInterrupt+0x34>)
 8005c00:	2207      	movs	r2, #7
 8005c02:	601a      	str	r2, [r3, #0]
}
 8005c04:	bf00      	nop
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	e000e010 	.word	0xe000e010
 8005c14:	e000e018 	.word	0xe000e018
 8005c18:	20000024 	.word	0x20000024
 8005c1c:	10624dd3 	.word	0x10624dd3
 8005c20:	e000e014 	.word	0xe000e014

08005c24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005c24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005c34 <vPortEnableVFP+0x10>
 8005c28:	6801      	ldr	r1, [r0, #0]
 8005c2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005c2e:	6001      	str	r1, [r0, #0]
 8005c30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c32:	bf00      	nop
 8005c34:	e000ed88 	.word	0xe000ed88

08005c38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c3e:	f3ef 8305 	mrs	r3, IPSR
 8005c42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2b0f      	cmp	r3, #15
 8005c48:	d914      	bls.n	8005c74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c4a:	4a17      	ldr	r2, [pc, #92]	; (8005ca8 <vPortValidateInterruptPriority+0x70>)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4413      	add	r3, r2
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c54:	4b15      	ldr	r3, [pc, #84]	; (8005cac <vPortValidateInterruptPriority+0x74>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	7afa      	ldrb	r2, [r7, #11]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d20a      	bcs.n	8005c74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	607b      	str	r3, [r7, #4]
}
 8005c70:	bf00      	nop
 8005c72:	e7fe      	b.n	8005c72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c74:	4b0e      	ldr	r3, [pc, #56]	; (8005cb0 <vPortValidateInterruptPriority+0x78>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c7c:	4b0d      	ldr	r3, [pc, #52]	; (8005cb4 <vPortValidateInterruptPriority+0x7c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d90a      	bls.n	8005c9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	603b      	str	r3, [r7, #0]
}
 8005c96:	bf00      	nop
 8005c98:	e7fe      	b.n	8005c98 <vPortValidateInterruptPriority+0x60>
	}
 8005c9a:	bf00      	nop
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	e000e3f0 	.word	0xe000e3f0
 8005cac:	20001824 	.word	0x20001824
 8005cb0:	e000ed0c 	.word	0xe000ed0c
 8005cb4:	20001828 	.word	0x20001828

08005cb8 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d04d      	beq.n	8005d66 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005cca:	2308      	movs	r3, #8
 8005ccc:	425b      	negs	r3, r3
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	4b24      	ldr	r3, [pc, #144]	; (8005d70 <vPortFree+0xb8>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10a      	bne.n	8005cfc <vPortFree+0x44>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	60fb      	str	r3, [r7, #12]
}
 8005cf8:	bf00      	nop
 8005cfa:	e7fe      	b.n	8005cfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00a      	beq.n	8005d1a <vPortFree+0x62>
	__asm volatile
 8005d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	60bb      	str	r3, [r7, #8]
}
 8005d16:	bf00      	nop
 8005d18:	e7fe      	b.n	8005d18 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	4b14      	ldr	r3, [pc, #80]	; (8005d70 <vPortFree+0xb8>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4013      	ands	r3, r2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d01e      	beq.n	8005d66 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d11a      	bne.n	8005d66 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	4b0e      	ldr	r3, [pc, #56]	; (8005d70 <vPortFree+0xb8>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	43db      	mvns	r3, r3
 8005d3a:	401a      	ands	r2, r3
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d40:	f7fe fd54 	bl	80047ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	4b0a      	ldr	r3, [pc, #40]	; (8005d74 <vPortFree+0xbc>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	4a09      	ldr	r2, [pc, #36]	; (8005d74 <vPortFree+0xbc>)
 8005d50:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d52:	6938      	ldr	r0, [r7, #16]
 8005d54:	f000 f812 	bl	8005d7c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005d58:	4b07      	ldr	r3, [pc, #28]	; (8005d78 <vPortFree+0xc0>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	4a06      	ldr	r2, [pc, #24]	; (8005d78 <vPortFree+0xc0>)
 8005d60:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005d62:	f7fe fd51 	bl	8004808 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d66:	bf00      	nop
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20001840 	.word	0x20001840
 8005d74:	20001838 	.word	0x20001838
 8005d78:	2000183c 	.word	0x2000183c

08005d7c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d84:	4b28      	ldr	r3, [pc, #160]	; (8005e28 <prvInsertBlockIntoFreeList+0xac>)
 8005d86:	60fb      	str	r3, [r7, #12]
 8005d88:	e002      	b.n	8005d90 <prvInsertBlockIntoFreeList+0x14>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	60fb      	str	r3, [r7, #12]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d8f7      	bhi.n	8005d8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	4413      	add	r3, r2
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d108      	bne.n	8005dbe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	441a      	add	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	441a      	add	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d118      	bne.n	8005e04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	4b15      	ldr	r3, [pc, #84]	; (8005e2c <prvInsertBlockIntoFreeList+0xb0>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d00d      	beq.n	8005dfa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	441a      	add	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	601a      	str	r2, [r3, #0]
 8005df8:	e008      	b.n	8005e0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005dfa:	4b0c      	ldr	r3, [pc, #48]	; (8005e2c <prvInsertBlockIntoFreeList+0xb0>)
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	e003      	b.n	8005e0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d002      	beq.n	8005e1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e1a:	bf00      	nop
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	2000182c 	.word	0x2000182c
 8005e2c:	20001834 	.word	0x20001834

08005e30 <__libc_init_array>:
 8005e30:	b570      	push	{r4, r5, r6, lr}
 8005e32:	4d0d      	ldr	r5, [pc, #52]	; (8005e68 <__libc_init_array+0x38>)
 8005e34:	4c0d      	ldr	r4, [pc, #52]	; (8005e6c <__libc_init_array+0x3c>)
 8005e36:	1b64      	subs	r4, r4, r5
 8005e38:	10a4      	asrs	r4, r4, #2
 8005e3a:	2600      	movs	r6, #0
 8005e3c:	42a6      	cmp	r6, r4
 8005e3e:	d109      	bne.n	8005e54 <__libc_init_array+0x24>
 8005e40:	4d0b      	ldr	r5, [pc, #44]	; (8005e70 <__libc_init_array+0x40>)
 8005e42:	4c0c      	ldr	r4, [pc, #48]	; (8005e74 <__libc_init_array+0x44>)
 8005e44:	f000 f906 	bl	8006054 <_init>
 8005e48:	1b64      	subs	r4, r4, r5
 8005e4a:	10a4      	asrs	r4, r4, #2
 8005e4c:	2600      	movs	r6, #0
 8005e4e:	42a6      	cmp	r6, r4
 8005e50:	d105      	bne.n	8005e5e <__libc_init_array+0x2e>
 8005e52:	bd70      	pop	{r4, r5, r6, pc}
 8005e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e58:	4798      	blx	r3
 8005e5a:	3601      	adds	r6, #1
 8005e5c:	e7ee      	b.n	8005e3c <__libc_init_array+0xc>
 8005e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e62:	4798      	blx	r3
 8005e64:	3601      	adds	r6, #1
 8005e66:	e7f2      	b.n	8005e4e <__libc_init_array+0x1e>
 8005e68:	08006104 	.word	0x08006104
 8005e6c:	08006104 	.word	0x08006104
 8005e70:	08006104 	.word	0x08006104
 8005e74:	08006108 	.word	0x08006108

08005e78 <__retarget_lock_acquire_recursive>:
 8005e78:	4770      	bx	lr

08005e7a <__retarget_lock_release_recursive>:
 8005e7a:	4770      	bx	lr

08005e7c <memcpy>:
 8005e7c:	440a      	add	r2, r1
 8005e7e:	4291      	cmp	r1, r2
 8005e80:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005e84:	d100      	bne.n	8005e88 <memcpy+0xc>
 8005e86:	4770      	bx	lr
 8005e88:	b510      	push	{r4, lr}
 8005e8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e92:	4291      	cmp	r1, r2
 8005e94:	d1f9      	bne.n	8005e8a <memcpy+0xe>
 8005e96:	bd10      	pop	{r4, pc}

08005e98 <memset>:
 8005e98:	4402      	add	r2, r0
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d100      	bne.n	8005ea2 <memset+0xa>
 8005ea0:	4770      	bx	lr
 8005ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ea6:	e7f9      	b.n	8005e9c <memset+0x4>

08005ea8 <cleanup_glue>:
 8005ea8:	b538      	push	{r3, r4, r5, lr}
 8005eaa:	460c      	mov	r4, r1
 8005eac:	6809      	ldr	r1, [r1, #0]
 8005eae:	4605      	mov	r5, r0
 8005eb0:	b109      	cbz	r1, 8005eb6 <cleanup_glue+0xe>
 8005eb2:	f7ff fff9 	bl	8005ea8 <cleanup_glue>
 8005eb6:	4621      	mov	r1, r4
 8005eb8:	4628      	mov	r0, r5
 8005eba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ebe:	f000 b87d 	b.w	8005fbc <_free_r>
	...

08005ec4 <_reclaim_reent>:
 8005ec4:	4b2c      	ldr	r3, [pc, #176]	; (8005f78 <_reclaim_reent+0xb4>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4283      	cmp	r3, r0
 8005eca:	b570      	push	{r4, r5, r6, lr}
 8005ecc:	4604      	mov	r4, r0
 8005ece:	d051      	beq.n	8005f74 <_reclaim_reent+0xb0>
 8005ed0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005ed2:	b143      	cbz	r3, 8005ee6 <_reclaim_reent+0x22>
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d14a      	bne.n	8005f70 <_reclaim_reent+0xac>
 8005eda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005edc:	6819      	ldr	r1, [r3, #0]
 8005ede:	b111      	cbz	r1, 8005ee6 <_reclaim_reent+0x22>
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	f000 f86b 	bl	8005fbc <_free_r>
 8005ee6:	6961      	ldr	r1, [r4, #20]
 8005ee8:	b111      	cbz	r1, 8005ef0 <_reclaim_reent+0x2c>
 8005eea:	4620      	mov	r0, r4
 8005eec:	f000 f866 	bl	8005fbc <_free_r>
 8005ef0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005ef2:	b111      	cbz	r1, 8005efa <_reclaim_reent+0x36>
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	f000 f861 	bl	8005fbc <_free_r>
 8005efa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005efc:	b111      	cbz	r1, 8005f04 <_reclaim_reent+0x40>
 8005efe:	4620      	mov	r0, r4
 8005f00:	f000 f85c 	bl	8005fbc <_free_r>
 8005f04:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005f06:	b111      	cbz	r1, 8005f0e <_reclaim_reent+0x4a>
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f000 f857 	bl	8005fbc <_free_r>
 8005f0e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005f10:	b111      	cbz	r1, 8005f18 <_reclaim_reent+0x54>
 8005f12:	4620      	mov	r0, r4
 8005f14:	f000 f852 	bl	8005fbc <_free_r>
 8005f18:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005f1a:	b111      	cbz	r1, 8005f22 <_reclaim_reent+0x5e>
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	f000 f84d 	bl	8005fbc <_free_r>
 8005f22:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005f24:	b111      	cbz	r1, 8005f2c <_reclaim_reent+0x68>
 8005f26:	4620      	mov	r0, r4
 8005f28:	f000 f848 	bl	8005fbc <_free_r>
 8005f2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f2e:	b111      	cbz	r1, 8005f36 <_reclaim_reent+0x72>
 8005f30:	4620      	mov	r0, r4
 8005f32:	f000 f843 	bl	8005fbc <_free_r>
 8005f36:	69a3      	ldr	r3, [r4, #24]
 8005f38:	b1e3      	cbz	r3, 8005f74 <_reclaim_reent+0xb0>
 8005f3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	4798      	blx	r3
 8005f40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005f42:	b1b9      	cbz	r1, 8005f74 <_reclaim_reent+0xb0>
 8005f44:	4620      	mov	r0, r4
 8005f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005f4a:	f7ff bfad 	b.w	8005ea8 <cleanup_glue>
 8005f4e:	5949      	ldr	r1, [r1, r5]
 8005f50:	b941      	cbnz	r1, 8005f64 <_reclaim_reent+0xa0>
 8005f52:	3504      	adds	r5, #4
 8005f54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f56:	2d80      	cmp	r5, #128	; 0x80
 8005f58:	68d9      	ldr	r1, [r3, #12]
 8005f5a:	d1f8      	bne.n	8005f4e <_reclaim_reent+0x8a>
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	f000 f82d 	bl	8005fbc <_free_r>
 8005f62:	e7ba      	b.n	8005eda <_reclaim_reent+0x16>
 8005f64:	680e      	ldr	r6, [r1, #0]
 8005f66:	4620      	mov	r0, r4
 8005f68:	f000 f828 	bl	8005fbc <_free_r>
 8005f6c:	4631      	mov	r1, r6
 8005f6e:	e7ef      	b.n	8005f50 <_reclaim_reent+0x8c>
 8005f70:	2500      	movs	r5, #0
 8005f72:	e7ef      	b.n	8005f54 <_reclaim_reent+0x90>
 8005f74:	bd70      	pop	{r4, r5, r6, pc}
 8005f76:	bf00      	nop
 8005f78:	20000034 	.word	0x20000034

08005f7c <strncmp>:
 8005f7c:	b510      	push	{r4, lr}
 8005f7e:	b17a      	cbz	r2, 8005fa0 <strncmp+0x24>
 8005f80:	4603      	mov	r3, r0
 8005f82:	3901      	subs	r1, #1
 8005f84:	1884      	adds	r4, r0, r2
 8005f86:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005f8a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005f8e:	4290      	cmp	r0, r2
 8005f90:	d101      	bne.n	8005f96 <strncmp+0x1a>
 8005f92:	42a3      	cmp	r3, r4
 8005f94:	d101      	bne.n	8005f9a <strncmp+0x1e>
 8005f96:	1a80      	subs	r0, r0, r2
 8005f98:	bd10      	pop	{r4, pc}
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	d1f3      	bne.n	8005f86 <strncmp+0xa>
 8005f9e:	e7fa      	b.n	8005f96 <strncmp+0x1a>
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	e7f9      	b.n	8005f98 <strncmp+0x1c>

08005fa4 <__malloc_lock>:
 8005fa4:	4801      	ldr	r0, [pc, #4]	; (8005fac <__malloc_lock+0x8>)
 8005fa6:	f7ff bf67 	b.w	8005e78 <__retarget_lock_acquire_recursive>
 8005faa:	bf00      	nop
 8005fac:	20001844 	.word	0x20001844

08005fb0 <__malloc_unlock>:
 8005fb0:	4801      	ldr	r0, [pc, #4]	; (8005fb8 <__malloc_unlock+0x8>)
 8005fb2:	f7ff bf62 	b.w	8005e7a <__retarget_lock_release_recursive>
 8005fb6:	bf00      	nop
 8005fb8:	20001844 	.word	0x20001844

08005fbc <_free_r>:
 8005fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fbe:	2900      	cmp	r1, #0
 8005fc0:	d044      	beq.n	800604c <_free_r+0x90>
 8005fc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fc6:	9001      	str	r0, [sp, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f1a1 0404 	sub.w	r4, r1, #4
 8005fce:	bfb8      	it	lt
 8005fd0:	18e4      	addlt	r4, r4, r3
 8005fd2:	f7ff ffe7 	bl	8005fa4 <__malloc_lock>
 8005fd6:	4a1e      	ldr	r2, [pc, #120]	; (8006050 <_free_r+0x94>)
 8005fd8:	9801      	ldr	r0, [sp, #4]
 8005fda:	6813      	ldr	r3, [r2, #0]
 8005fdc:	b933      	cbnz	r3, 8005fec <_free_r+0x30>
 8005fde:	6063      	str	r3, [r4, #4]
 8005fe0:	6014      	str	r4, [r2, #0]
 8005fe2:	b003      	add	sp, #12
 8005fe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fe8:	f7ff bfe2 	b.w	8005fb0 <__malloc_unlock>
 8005fec:	42a3      	cmp	r3, r4
 8005fee:	d908      	bls.n	8006002 <_free_r+0x46>
 8005ff0:	6825      	ldr	r5, [r4, #0]
 8005ff2:	1961      	adds	r1, r4, r5
 8005ff4:	428b      	cmp	r3, r1
 8005ff6:	bf01      	itttt	eq
 8005ff8:	6819      	ldreq	r1, [r3, #0]
 8005ffa:	685b      	ldreq	r3, [r3, #4]
 8005ffc:	1949      	addeq	r1, r1, r5
 8005ffe:	6021      	streq	r1, [r4, #0]
 8006000:	e7ed      	b.n	8005fde <_free_r+0x22>
 8006002:	461a      	mov	r2, r3
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	b10b      	cbz	r3, 800600c <_free_r+0x50>
 8006008:	42a3      	cmp	r3, r4
 800600a:	d9fa      	bls.n	8006002 <_free_r+0x46>
 800600c:	6811      	ldr	r1, [r2, #0]
 800600e:	1855      	adds	r5, r2, r1
 8006010:	42a5      	cmp	r5, r4
 8006012:	d10b      	bne.n	800602c <_free_r+0x70>
 8006014:	6824      	ldr	r4, [r4, #0]
 8006016:	4421      	add	r1, r4
 8006018:	1854      	adds	r4, r2, r1
 800601a:	42a3      	cmp	r3, r4
 800601c:	6011      	str	r1, [r2, #0]
 800601e:	d1e0      	bne.n	8005fe2 <_free_r+0x26>
 8006020:	681c      	ldr	r4, [r3, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	6053      	str	r3, [r2, #4]
 8006026:	4421      	add	r1, r4
 8006028:	6011      	str	r1, [r2, #0]
 800602a:	e7da      	b.n	8005fe2 <_free_r+0x26>
 800602c:	d902      	bls.n	8006034 <_free_r+0x78>
 800602e:	230c      	movs	r3, #12
 8006030:	6003      	str	r3, [r0, #0]
 8006032:	e7d6      	b.n	8005fe2 <_free_r+0x26>
 8006034:	6825      	ldr	r5, [r4, #0]
 8006036:	1961      	adds	r1, r4, r5
 8006038:	428b      	cmp	r3, r1
 800603a:	bf04      	itt	eq
 800603c:	6819      	ldreq	r1, [r3, #0]
 800603e:	685b      	ldreq	r3, [r3, #4]
 8006040:	6063      	str	r3, [r4, #4]
 8006042:	bf04      	itt	eq
 8006044:	1949      	addeq	r1, r1, r5
 8006046:	6021      	streq	r1, [r4, #0]
 8006048:	6054      	str	r4, [r2, #4]
 800604a:	e7ca      	b.n	8005fe2 <_free_r+0x26>
 800604c:	b003      	add	sp, #12
 800604e:	bd30      	pop	{r4, r5, pc}
 8006050:	20001848 	.word	0x20001848

08006054 <_init>:
 8006054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006056:	bf00      	nop
 8006058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800605a:	bc08      	pop	{r3}
 800605c:	469e      	mov	lr, r3
 800605e:	4770      	bx	lr

08006060 <_fini>:
 8006060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006062:	bf00      	nop
 8006064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006066:	bc08      	pop	{r3}
 8006068:	469e      	mov	lr, r3
 800606a:	4770      	bx	lr
